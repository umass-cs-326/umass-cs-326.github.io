"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5200],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(h,o(o({ref:t},c),{},{components:n})):r.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9047:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={author:"Rajasi-Desai",tags:["exercise","assignment"]},o="Ex3: Decoder Ring",l={unversionedId:"exercises/decoder-ring/index",id:"exercises/decoder-ring/index",title:"Ex3: Decoder Ring",description:"Information",source:"@site/docs/05-exercises/03-decoder-ring/index.md",sourceDirName:"05-exercises/03-decoder-ring",slug:"/exercises/decoder-ring/",permalink:"/docs/exercises/decoder-ring/",draft:!1,tags:[{label:"exercise",permalink:"/docs/tags/exercise"},{label:"assignment",permalink:"/docs/tags/assignment"}],version:"current",frontMatter:{author:"Rajasi-Desai",tags:["exercise","assignment"]},sidebar:"tutorialSidebar",previous:{title:"Ex2: Letter Histogram",permalink:"/docs/exercises/letter-histogram/"},next:{title:"Ex4: Decoder Ring Class",permalink:"/docs/exercises/decoder-ring-class/"}},s={},p=[{value:"Information",id:"information",level:2},{value:"Submission",id:"submission",level:2},{value:"Overview",id:"overview",level:2},{value:"Starter Kit",id:"starter-kit",level:2},{value:"TODO #1: Decoder Ring (\u201cCaesar cipher\u201d)",id:"todo-1-decoder-ring-caesar-cipher",level:2},{value:"Property 1:",id:"property-1",level:3},{value:"Property 2:",id:"property-2",level:3},{value:"Property 3:",id:"property-3",level:3},{value:"Hints and Tips:",id:"hints-and-tips",level:4},{value:"Property 4:",id:"property-4",level:3},{value:"TODO #2: Write Tests",id:"todo-2-write-tests",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ex3-decoder-ring"},"Ex3: Decoder Ring"),(0,a.kt)("h2",{id:"information"},"Information"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Visit Moodle and follow the GitHub Classroom assignment link."),(0,a.kt)("li",{parentName:"ul"},"See the ",(0,a.kt)("a",{parentName:"li",href:"/docs/information/schedule/#exercises"},"calendar")," for due\ndates.")),(0,a.kt)("h2",{id:"submission"},"Submission"),(0,a.kt)("p",null,"You must submit the following to complete this assignment:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Push all changes to your GitHub repository before the due date. You\ndo not need to submit anything to Moodle. We will take your last\ncommit before the deadline as your submission."),(0,a.kt)("li",{parentName:"ul"},"Complete the Grade Reflection survey associated with this assignment\non Moodle.")),(0,a.kt)("p",null,"See the ",(0,a.kt)("a",{parentName:"p",href:"/docs/information/syllabus/#exercises"},"course syllabus")," for\nadditional information on exercise assignments."),(0,a.kt)("h2",{id:"overview"},"Overview"),(0,a.kt)("p",null,"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "),(0,a.kt)("h2",{id:"starter-kit"},"Starter Kit"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"Follow the GitHub Classroom assignment link on Moodle first.")),(0,a.kt)("p",null,"You are provided a single HTML file named ",(0,a.kt)("inlineCode",{parentName:"p"},"exercise-06.html"),". Although we haven\u2019t discussed HTML files yet, you will write your JavaScript code between the ",(0,a.kt)("inlineCode",{parentName:"p"},"<script>")," tags inside of that HTML file. You may only use the ",(0,a.kt)("inlineCode",{parentName:"p"},"console.log")," function to print values to the browser\u2019s console and ",(0,a.kt)("inlineCode",{parentName:"p"},"console.assert")," to test the functions that you write. You are encouraged to test your code to make sure it works as intended."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/60818982/219066123-35124be6-b6b1-46b5-8305-6e8bc6e48e3a.png",alt:"image"})),(0,a.kt)("h2",{id:"todo-1-decoder-ring-caesar-cipher"},"TODO #1: Decoder Ring (\u201cCaesar cipher\u201d)"),(0,a.kt)("p",null,"This is an exercise in implementing a basic encryption technique known as a Caesar cipher. The basic approach is to match each letter in the alphabet to a letter in an alphabet that is shifted by a certain amount. For example:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Original:")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"ABCDEFGHIJKLMNOPQRSTUVWXYZ")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Shifted 2 to the right:")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"CDEFGHIJKLMNOPQRSTUVWXYZAB")),(0,a.kt)("p",null,"To encode, you match the original letter to the shifted version, so A \u2192 C, B \u2192 D, and so on. To decode a message, you just do the same thing in reverse, so C \u2192 A, and D \u2192 B."),(0,a.kt)("hr",null),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"From Wikipedia:")),(0,a.kt)("p",null,"The transformation can be represented by aligning two alphabets; the cipher alphabet is the plain alphabet rotated left or right by some number of positions. For instance, here is a Caesar cipher using a left rotation of three places, equivalent to a right shift of 23 (the shift parameter is used as the key):"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Plain:    ABCDEFGHIJKLMNOPQRSTUVWXYZ")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Cipher:   XYZABCDEFGHIJKLMNOPQRSTUVW")),(0,a.kt)("p",null,'When encrypting, a person looks up each letter of the message in the "plain" line and writes down the corresponding letter in the "cipher" line.'),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Plaintext:  THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG")),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD")),(0,a.kt)("p",null,"Deciphering is done in reverse, with a right shift of 3."),(0,a.kt)("p",null,"The encryption can also be represented using modular arithmetic by first transforming the letters into numbers, according to the scheme, A \u2192 0, B \u2192 1, ..., Z \u2192 25. Encryption of a letter x by a shift n can be described mathematically as,"),(0,a.kt)("p",null,"$$E_n(x)=(x+n) \\text{ mod } 26$$"),(0,a.kt)("p",null,"Decryption is performed similarly,"),(0,a.kt)("p",null,"$$D_n(x)=(x\u2008-\u2008n)\u2008\u2008\\text{ mod }\u200826$$"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"You are to write a function called ",(0,a.kt)("inlineCode",{parentName:"p"},"decoderRing")," that takes a rotation (a number from 0 to 25) as a parameter and returns an object with the following properties:"),(0,a.kt)("h3",{id:"property-1"},"Property 1:"),(0,a.kt)("p",null,"An ",(0,a.kt)("inlineCode",{parentName:"p"},"encodeMap")," object that contains an entry for every lower-case letter and its corresponding encoded version, shifted forward by the rotation. For example, if the rotation is 2, ",(0,a.kt)("inlineCode",{parentName:"p"},"encodeMap")," will look like this, where the result for every letter is 2 letters after it in the alphabet, wrapping around to the beginning (notice the wrap-around at the end!):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const dr = decoderRing(2); // rotation of 2\n// verify that the encodeMap is correct\n// notice that "y" and "z" wrap around to "a" and "b"!\nconsole.assert(JSON.stringify(dr.encodeMap) === JSON.stringify({"a":"c","b":"d","c":"e","d":"f","e":"g","f":"h","g":"i","h":"j","i":"k","j":"l","k":"m","l":"n","m":"o","n":"p","o":"q","p":"r","q":"s","r":"t","s":"u","t":"v","u":"w","v":"x","w":"y","x":"z","y":"a","z":"b"}));\n')),(0,a.kt)("p",null,"You might find these functions/operations useful:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"str.charCodeAt(ind)"),": Returns the ASCII value of the character at index ",(0,a.kt)("inlineCode",{parentName:"li"},"ind")," ")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"\u2018a\u2019.charCodeAt(0) // evaluates to 97\n")),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"String.fromCharCode(asc)"),": Returns the character corresponding to the ASCII value asc")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"String.fromCharCode(98) // evaluates to \u2018b\u2019\n")),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"x % k"),": x modulo k is the remainder after dividing x by k")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"30 % 26 === 4\n")),(0,a.kt)("h3",{id:"property-2"},"Property 2:"),(0,a.kt)("p",null,"A ",(0,a.kt)("inlineCode",{parentName:"p"},"decodeMap")," object that is the inverse of ",(0,a.kt)("inlineCode",{parentName:"p"},"encodeMap")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"dr.decodeMap; // evaluates to { \u201cc\u201d:\u201da\u201d, \u201cd\u201d:\u201db\u201d, \u2026 }\n")),(0,a.kt)("h3",{id:"property-3"},"Property 3:"),(0,a.kt)("p",null,"A function ",(0,a.kt)("inlineCode",{parentName:"p"},"encode(str)")," that takes a string and returns the encoded version \u2013 ",(0,a.kt)("strong",{parentName:"p"},"if there is no encoding, return the original letter.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"dr.encode(\u2018hello world\u2019); // evaluates to \u2018jgnnq yqtnf\u2019\n")),(0,a.kt)("h4",{id:"hints-and-tips"},"Hints and Tips:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"let xs = str.split('').map((ch) => { \u2026 return something })")," to iterate through each character in a string and returns a list of everything that has been mapped.")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let str = \u2018hey\u2019;\nlet upper = str.split(\u2018\u2019).map(ch => ch.toUpperCase());\nconsole.assert(JSON.stringify(upper) === \n    JSON.stringify([\u2018H\u2019, \u2018E\u2019, \u2018Y\u2019]));\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Use ",(0,a.kt)("inlineCode",{parentName:"li"},"xs.join(\u2018\u2019)")," to convert a list xs back to a string, which is what you will return from the ",(0,a.kt)("inlineCode",{parentName:"li"},"encode")," function.")),(0,a.kt)("p",null,"Example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"[\u2018H\u2019, \u2018E\u2019, \u2018Y\u2019].join(\u2018\u2019); // evaluates to \u2018HEY\u2019\n")),(0,a.kt)("h3",{id:"property-4"},"Property 4:"),(0,a.kt)("p",null,"A function ",(0,a.kt)("inlineCode",{parentName:"p"},"decode(str)")," that does the reverse."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"dr.decode(\u2018jgnnq yqtnf\u2019); // evaluates to \u2018hello world\u2019\n")),(0,a.kt)("p",null,"You will find ",(0,a.kt)("inlineCode",{parentName:"p"},"TODO #1")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"exercise-06.html")," file."),(0,a.kt)("h2",{id:"todo-2-write-tests"},"TODO #2: Write Tests"),(0,a.kt)("p",null,"To ensure that the ",(0,a.kt)("inlineCode",{parentName:"p"},"decoderRing")," function and the object it returns that you wrote in ",(0,a.kt)("inlineCode",{parentName:"p"},"TODO #1")," is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must ",(0,a.kt)("strong",{parentName:"p"},"write 3 tests to test your code"),". You must use the ",(0,a.kt)("inlineCode",{parentName:"p"},"console.assert")," function to write your tests."),(0,a.kt)("p",null,"You will find ",(0,a.kt)("inlineCode",{parentName:"p"},"TODO #2")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"exercise-06.html")," file."))}d.isMDXComponent=!0}}]);