"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2032],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=i,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||a;return n?r.createElement(m,o(o({ref:t},d),{},{components:n})):r.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},94110:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(87462),i=(n(67294),n(3905));const a={},o="Ex11: REST and Fetch",s={unversionedId:"exercises/rest-and-fetch/index",id:"exercises/rest-and-fetch/index",title:"Ex11: REST and Fetch",description:"Overview",source:"@site/docs/05-exercises/11-rest-and-fetch/index.md",sourceDirName:"05-exercises/11-rest-and-fetch",slug:"/exercises/rest-and-fetch/",permalink:"/docs/exercises/rest-and-fetch/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Ex10: Install Node.js and Run Server",permalink:"/docs/exercises/run-server/"},next:{title:"Ex12: CRUD #1",permalink:"/docs/exercises/crud-1/"}},l={},p=[{value:"Overview",id:"overview",level:2},{value:"Starter Kit",id:"starter-kit",level:2},{value:"TODO #1: Add Event Listener",id:"todo-1-add-event-listener",level:2},{value:"TODO #2: Fetch the Stars",id:"todo-2-fetch-the-stars",level:2},{value:"Submission",id:"submission",level:2},{value:"Rubric and Grading",id:"rubric-and-grading",level:2},{value:"Exercise (2 points)",id:"exercise-2-points",level:3}],d={toc:p};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"ex11-rest-and-fetch"},"Ex11: REST and Fetch"),(0,i.kt)("h2",{id:"overview"},"Overview"),(0,i.kt)("p",null,'The goal of this exercise is to implement a web app that takes a GitHub repository and name (e.g., plasma-umass/scalene) and then fetches the number of \u201cstars" which the repository has (displayed on the upper-right hand side of GitHub repositories).'),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"image",src:n(50013).Z,width:"620",height:"101"})),(0,i.kt)("p",null,"This is what the app will look like when you run it:"),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"animated image",src:n(21835).Z,width:"882",height:"328"})),(0,i.kt)("h2",{id:"starter-kit"},"Starter Kit"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://drive.google.com/drive/folders/1xF0Lku4hjZPksRFGczVAV3F9rfdr-AGA?usp=sharing"},"Download the Starter Kit!")),(0,i.kt)("p",null,"You only need to edit the file ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.js"),", but you will need to consult ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.html"),"."),(0,i.kt)("h2",{id:"todo-1-add-event-listener"},"TODO #1: Add Event Listener"),(0,i.kt)("p",null,"First, you will implement the code (one line) in the function ",(0,i.kt)("inlineCode",{parentName:"p"},"initialize")," to add an event listener to the button (consult ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.html"),")."),(0,i.kt)("p",null,"You will find ",(0,i.kt)("strong",{parentName:"p"},"TODO #1")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.js")," file."),(0,i.kt)("h2",{id:"todo-2-fetch-the-stars"},"TODO #2: Fetch the Stars"),(0,i.kt)("p",null,"Second, implement the function ",(0,i.kt)("inlineCode",{parentName:"p"},"getStars")," that uses the fetch API. You will need to ",(0,i.kt)("inlineCode",{parentName:"p"},"await fetch")," first to get the response from the server, and then ",(0,i.kt)("inlineCode",{parentName:"p"},"await response.json()")," to get the JSON out of the response."),(0,i.kt)("p",null,"Your function should then update the ",(0,i.kt)("inlineCode",{parentName:"p"},"<div>")," that will contain the star count (returned from the GitHub API in a JSON object as the property ",(0,i.kt)("inlineCode",{parentName:"p"},"stargazers_count"),"). Recall that the API endpoints for GitHub look like this: ",(0,i.kt)("inlineCode",{parentName:"p"},"https://api.github.com/repos/jvilk/browserfs"),' (in other words, you can\'t just use the "repo" ',(0,i.kt)("inlineCode",{parentName:"p"},"<div>"),"  element as the URL!)."),(0,i.kt)("p",null,"If the request fails (",(0,i.kt)("inlineCode",{parentName:"p"},"response.ok")," is false or ",(0,i.kt)("inlineCode",{parentName:"p"},"response.status === 404"),'), your app should report "an error has occurred." Although not typically advisable, use ',(0,i.kt)("inlineCode",{parentName:"p"},".innerHTML")," to set the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"<div>")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.html")," to make things a little easier. In total, your function should be pretty short: around 10 lines of code."),(0,i.kt)("p",null,"You will find ",(0,i.kt)("strong",{parentName:"p"},"TODO #2")," in the ",(0,i.kt)("inlineCode",{parentName:"p"},"starbuddy.js")," file."),(0,i.kt)("h2",{id:"submission"},"Submission"),(0,i.kt)("p",null,"You must do the following to submit this assignment:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Create a Zip archive of the folder containing your solution files."),(0,i.kt)("li",{parentName:"ul"},"Upload this Zip file to the Moodle assignment."),(0,i.kt)("li",{parentName:"ul"},"Check to make sure you uploaded your Zip archive to the Moodle assignment."),(0,i.kt)("li",{parentName:"ul"},"Check again.")),(0,i.kt)("h2",{id:"rubric-and-grading"},"Rubric and Grading"),(0,i.kt)("p",null,"Use the following rubric to satisfy the requirements of this assignment. We will be using this rubric to score your submission"),(0,i.kt)("h3",{id:"exercise-2-points"},"Exercise (2 points)"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"2 points, a reasonable attempt was made at completing the exercise, a solid attempt was made at completing all TODOs."),(0,i.kt)("li",{parentName:"ul"},"1 point, an attempt was made, but was incomplete or had missing or empty parts, not all TODOs were completed, minimal work."),(0,i.kt)("li",{parentName:"ul"},"0 points, empty or no submission.")))}u.isMDXComponent=!0},50013:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image1-0e5cf01a4853eff70aa07ef38cd83ec1.png"},21835:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/image2-3e449dc3b93c420d9489b5d79ee56d3f.gif"}}]);