[{"title":"Office Hours Posted","type":0,"sectionRef":"#","url":"/blog/office-hours/","content":"I hope that everyone had a fantastic first week of our web programming class! I am thrilled to be teaching this course this semester, and I am eager to help all of you learn the ins and outs of web programming, including the powerful and versatile JavaScript language. This semester is going to be an excellent one, and I am confident that each of you will leave the class with a deep understanding of the building blocks of the web. To help ensure your success, I want to bring to your attention that office hours are now posted and available for you to use. I encourage all of you to take advantage of this valuable resource and stop by for any questions or concerns you may have. Flexible learning is at the forefront of this class, and we are here to support you in any way that we can. Whether you are a beginner just starting out or have a little background in web programming, we believe that this class will have something for everyone. So let's have fun and charge into week two!","keywords":""},{"title":"Week 3","type":0,"sectionRef":"#","url":"/blog/w3/","content":"Just a reminder on what is due. Exercise 4 was due on Wednesday, Feb 22 at 11:59pm.Exercise 5 is due on Tuesday, Feb 28 at 11:59pm.Homework 2 is due on Tuesday, Mar 7 at 11:59pm. tip Make sure you update your calendar with the due dates for any assignments posted in the schedule. You are responsible for managing your own schedule and meeting all deadlines. Please read the course policies for more information on how late assignments will be handled.","keywords":""},{"title":"Week 2","type":0,"sectionRef":"#","url":"/blog/w2/","content":"I hope you're all doing well and enjoying the web programming course so far. As we move into week 2, we'll be diving deeper into JavaScript and working on several more assignments. This week, we'll be covering some advanced topics in JavaScript, including functions, objects, and arrays. These concepts will build upon what you learned in the first week and provide you with the foundation to start creating dynamic and interactive web pages. Along with the lecture material, you'll be working on several new assignments. These assignments are designed to give you hands-on experience and help you apply the concepts you learned in class. Be sure to take your time, read the instructions carefully, and ask for help if you need it. Remember, the goal of this course is to equip you with the skills you need to become a confident and capable web programmer. So, don't be afraid to challenge yourself, ask questions, and push your limits. If you have any questions or concerns, please don't hesitate to reach out. I'm here to support you and help you succeed. Let's continue this journey together!","keywords":""},{"title":"Week 5","type":0,"sectionRef":"#","url":"/blog/w5/","content":"","keywords":""},{"title":"Assignments​","type":1,"pageTitle":"Week 5","url":"/blog/w5/#assignments","content":""},{"title":"Exercises​","type":1,"pageTitle":"Week 5","url":"/blog/w5/#exercises","content":"We have a couple of exercises for you to dig into CSS: Ex7 2x2 Checkerboard (A: Tu 3/7, Tu D: 3/14)Ex8 8x8 Chessboard (A: Th 3/9, D: Tu 3/14) "},{"title":"Homework​","type":1,"pageTitle":"Week 5","url":"/blog/w5/#homework","content":"Homework 3 has bee released: Hw3 Rack &amp; Render (A: 3/7, D: 3/28) You have plenty of time to complete this homework. It is due on Tuesday, Mar 28 at 11:59pm and I do not expect that you will need to work on this over break. "},{"title":"Project​","type":1,"pageTitle":"Week 5","url":"/blog/w5/#project","content":"We have a new project assignment for you to work on: Pr3 UI Design (A: 3/7, D: 3/30) Note, you also have lots of time for this assignment. It is due on Thursday, Mar 30 at 11:59pm. You will be working on this assignment with your teams. tip Make sure you update your calendar with the due dates for any assignments posted in the schedule. You are responsible for managing your own schedule and meeting all deadlines. Please read the course policies for more information on how late assignments will be handled. "},{"title":"Week 4","type":0,"sectionRef":"#","url":"/blog/w4/","content":"This week brings us another university snow cancellation. I have decided to cancel class on Tuesday, Feb 28. This will require us to make some adjustments to the schedule. These changes will be available on the schedule page as soon as they are finalized. These changes will include an adjustment to the lectures dates and the due dates for the impacted assignments. At the moment, the following due dates are unchanged: Exercise 5 Decoder Web Page is due on Tuesday, Feb 28 at 11:59pm.Homework 2 is due on Tuesday, Mar 7 at 11:59pm. The proposed changes to the schedule are as follows: Lecture 07 DOM Events will be moved to Thursday, Mar 2.All lectures will be moved forward by a Tu/Th.Ex6 Interactive Decoder will have its due date set to Tuesday, Mar 7 at 11:59pm.Hw3 Rack &amp; Render will retain its current release date of Tuesday, Mar 7 and continue to be due on Tuesday, Mar 28 at 11:59pm. If you have any questions or concerns about these changes, please let us know on Piazza. Do not email us directly. This week also brings the release of Pr2: Idea. This is the second project assignment where you will work with your team to develop a project idea. Read the documentation for more details. The due date for this assignment is Tuesday, Mar 7 at 11:59pm. We will be finalizing the teams in the team sign up sheet soon. You should communicate with your team members to begin coordinating on this assignment. tip Make sure you update your calendar with the due dates for any assignments posted in the schedule. You are responsible for managing your own schedule and meeting all deadlines. Please read the course policies for more information on how late assignments will be handled.","keywords":""},{"title":"Welcome to Web Programming!","type":0,"sectionRef":"#","url":"/blog/welcome/","content":"We are thrilled to have you onboard and look forward to a challenging and enriching journey as we dive into the exciting world of web programming. By the end of this course, you will gain a fundamental understanding of web development and be able to use both front-end and back-end technologies to build stunning web applications. In particular, you will learn to create stunning designs and user experiences with HTML, CSS, and JavaScript. There are several reasons why taking this course is essential for your career, both in industry and in graduate school. Here are five: Understand the latest trends in web programming: Knowing the latest web technologies will help you create and develop modern web applications that meet the latest standards in web design and usability.Master coding and problem-solving skills: With a deep understanding of the concepts, you can effectively code and solve programming problems to complete complex tasks.Improve job opportunities: Your web programming knowledge can provide valuable skills for landing great job opportunities.Understand how the web works: With an in-depth knowledge of the underlying principles and how they apply to the real world, you can better understand how the web works.Learn important development processes: Knowing the essential development processes will make you more productive and ensure the development of higher quality web applications. So, what are you waiting for? Get started on this journey with us and begin mastering web programming! We are looking forward to teaching you the foundations of web programming and to equipping you with the necessary tools and skills to succeed!","keywords":""},{"title":"Exercises","type":0,"sectionRef":"#","url":"/docs/exercises/","content":"Exercises Most classes will provide time to begin exercises that will apply your understanding of the material being discussed in lecture. You are required to complete participation exercises by the stated deadline. If you are unable to attend class you are still expected to submit the activity by the deadline. They are due on the day of the next class by midnight. You are encouraged to extend these exercises with additional features to explore the material, however, know that some exercises build on previous ones. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review.","keywords":""},{"title":"Ex8: 8x8 Chessboard","type":0,"sectionRef":"#","url":"/docs/exercises/chessboard/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#overview","content":"In this exercise you will make a full chess board (8x8) that uses a css grid and changes colors as you hover, revealing the text, and the text indicates which piece is at the relevant position: &quot;rook&quot;, &quot;knight&quot;, &quot;bishop&quot;, &quot;queen&quot;, &quot;king&quot;, &quot;bishop&quot;, &quot;knight&quot;, &quot;rook&quot;, &quot;pawn&quot; When you click on a square, it will print to the console the coordinates of the square:  "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided three files: chessboard.html, chessboard.css, and chessboard.js. The HTML file provides the necessary tags to load in both the CSS and JS files. You do not need to modify this file. Your job is to complete the CSS and JS files to create this 8x8 chessboard application. "},{"title":"TODO #1: CSS​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#todo-1-css","content":"Complete the CSS in checkerboard.css provided in the starter kit to duplicate the visual effects shown in the animated image above. You will find TODO #1 in the chessboard.css file. "},{"title":"TODO #2: JavaScript​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#todo-2-javascript","content":"Complete the JS in checkerboard.js provided in the starter kit to duplicate the console output behavior shown in the animated image above. You will find TODO #2 in the chessboard.js file. "},{"title":"Ex7: 2x2 Checkerboard","type":0,"sectionRef":"#","url":"/docs/exercises/checkerboard/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex7: 2x2 Checkerboard","url":"/docs/exercises/checkerboard/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex7: 2x2 Checkerboard","url":"/docs/exercises/checkerboard/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex7: 2x2 Checkerboard","url":"/docs/exercises/checkerboard/#overview","content":"In this exercise, you will make a mini-checkerboard (2x2) that uses CSS grid layout and changes colors as you hover over the grid elements:  This exercise does not require you to use any code from a previous exercise. The application works as follows: The user hovers over a block and the block turns red and displays the word “hello” in white text. Starter Kit note Follow the GitHub Classroom assignment link on Moodle first. You are provided two files: mini-checkerboard.html and mini-checkerboard.css. Both of these files are mostly empty. Your job is to fill them in to create this 2x2 checkerboard application. "},{"title":"TODO #1: User Interface​","type":1,"pageTitle":"Ex7: 2x2 Checkerboard","url":"/docs/exercises/checkerboard/#todo-1-user-interface","content":"This part is really easy. Do the following: Add a &lt;div&gt; element to mini-checkerboard.html file to represent the entire 2x2 board. You should also have a class and id attribute for this div so your CSS rules can apply rules to it. This will be the container for your 2x2 grid.Add child &lt;div&gt; elements to the above &lt;div&gt; to represent each of the squares. You should also have a class attribute for these as well. You will find TODO #1 in the mini-checkerboard.html file. "},{"title":"TODO #2: Application Interactivity​","type":1,"pageTitle":"Ex7: 2x2 Checkerboard","url":"/docs/exercises/checkerboard/#todo-2-application-interactivity","content":"Next, add the CSS rules to duplicate the behavior of the application displayed above. You are not allowed to use JavaScript in this application. You will find TODO #2 in the mini-checkerboard.css file. "},{"title":"Ex12: CRUD #1","type":0,"sectionRef":"#","url":"/docs/exercises/crud-1/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#overview","content":"The goal of this exercise is to implement a basic CRUD server in two parts. You will understand the basic logic to manage state as a JavaScript object. Your job is to save and restore that state from a file. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#starter-kit","content":"Download the Starter Kit! "},{"title":"CRUD Server Walk Through​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#crud-server-walk-through","content":"You will notice a package.json file in the starter template. This is necessary to use ES6 module syntax (imports) in a Node.js environment. It is also used for a variety of other things including tracking library dependencies. We will see this at a later point. In addition, you will see memcrud.js, this is the code that you will extend. This is a completely worked out example for managing a non-persistent counter with CRUD. You can run this code as is with from a command prompt using the following command inside the starter kit folder: node memcrud.js  With the server running, you can test it by entering the following URLs into your browser: localhost:8080/create?name=counter1 // counter1 should now be 0 (counter[counter1] = 0) localhost:8080/create?name=counter2 // counter2 should now be 0 localhost:8080/update?name=counter3 // should produce an error since there's no counter3 localhost:8080/update?name=counter1 // counter1 should now be 1 localhost:8080/update?name=counter1 // counter1 should now be 2 localhost:8080/read?name=counter2 // should be 0 localhost:8080/delete?name=counter2 // now it should be deleted localhost:8080/read?name=counter2 // this time it should fail localhost:8080/read?name=counter1 // should output 2  If you interrupt your server and then restart it, you should see that the counter values are all gone: localhost:8080/read?name=counter1 // the counter doesn't exist because as far as the server is concerned, it was never created!  "},{"title":"TODO #1: Saving State on the File System​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#todo-1-saving-state-on-the-file-system","content":"Now, you are going to extend the template code to provide persistence. You are probably familiar with the usual way one makes things in memory persistent: you write them to disk. That's what we're going to do for this TODO. First, we will save the file in a JSON file called counter.json. Put this near the top of the memcrud.js file. const JSONfile = 'counter.json';  As this shows, what we are going to do is have a file in JSON format that stores the counter object. To make this server really persistent (so it never loses any updates even if it dies), every time we read the counter, we need to reload it from disk, and every time we update it, we need to write it to disk first. To read a file from disk, use the functions we covered in class. This will return a JSON string, which you then need to &quot;parse&quot; to get the actual object out. You can do this with JSON.parse(str), where str is the string you get back from reading the file. Implement this all in the function called reload. To write the data out, you want to convert the counter into a string; to do that, use JSON.stringify(counter). The reload function requires very little code, and you will only need to add a small amount of code to your server, either writing the counter to disk or reloading it. Test it by running the tests above, then kill the server and try the last test: http://localhost:8080/read?name=counter1 Your server should report that the counter still exists and has the value 2. Go ahead and terminate your server, and open the file counter.json. You should see the counter values. You will find TODO #1 in the memcrud.js file. "},{"title":"Submission​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#submission","content":"You must do the following to submit this assignment: Create a Zip archive of the folder containing your solution files.Upload this Zip file to the Moodle assignment.Check to make sure you uploaded your Zip archive to the Moodle assignment.Check again. "},{"title":"Rubric and Grading​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#rubric-and-grading","content":"Use the following rubric to satisfy the requirements of this assignment. We will be using this rubric to score your submission "},{"title":"Exercise (2 points)​","type":1,"pageTitle":"Ex12: CRUD #1","url":"/docs/exercises/crud-1/#exercise-2-points","content":"2 points, a reasonable attempt was made at completing the exercise, a solid attempt was made at completing all TODOs.1 point, an attempt was made, but was incomplete or had missing or empty parts, not all TODOs were completed, minimal work.0 points, empty or no submission. "},{"title":"Ex:13 CRUD #2","type":0,"sectionRef":"#","url":"/docs/exercises/crud-2/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#overview","content":"The goal of this exercise is to extend the basic HTTP server from the last exercise that supported persistence of an object holding data on counters. In particular, we will be doing the following: Use HTTP methods (GET, POST, PUT, DELETE, etc.) on an incoming request object in combination with the path to determine if a route matches a route in the server and invoking the associated operation to handle that request in the server.Add a route in the HTTP server to serve HTML, CSS, and JavaScript files.Add a front-end UI to interact with the CRUD server. It will be helpful to reference the server code example covered in the associated lesson to provide guidance on the implementation of this exercise. The starter kit we provide also gives you significant direction. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#starter-kit","content":"Download the Starter Kit! "},{"title":"A CRUD Server with a UI​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#a-crud-server-with-a-ui","content":"In the last exercise we created a server that provided a RESTful interface and CRUD operations for an HTTP server that managed a “database” of counter variables. We were able to perform several operations on that database by sending the server HTTP requests from the browser and seeing the results in the browser window. In this exercise, we are going to look at a more complete application that will include a front-end interface that will communicate with the back-end REST/CRUD server. In the end, you will end up with an application in the browser that looks like the one below.  "},{"title":"TODO #1: Server Update and Delete​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#todo-1-server-update-and-delete","content":"Complete the updateCounter and deleteCounter CRUD functions in memcrud.js. We provide the implementation of the other operations that you can look at for guidance. You will find TODO #1 in the memcrud.js file. "},{"title":"TODO #2: Server Methods and Paths​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#todo-2-server-methods-and-paths","content":"Update the basicServer function to check that the request path and HTTP method match to determine if the server functionality should be invoked. You need to complete this for the /update and /delete route. We provide the others to give you some direction. You will find TODO #2 in the memcrud.js file. "},{"title":"TODO #3: Client Update and Delete Buttons​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#todo-3-client-update-and-delete-buttons","content":"​​Complete the update and delete button’s click event listener functions in client/client.js to call the appropriate CRUD operations in client/crud.js and update the user interface. We have implemented the others to give you a reference point. You will find TODO #3 in the client/client.js file. "},{"title":"TODO #4: Client Update and Delete CRUD Functions​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#todo-4-client-update-and-delete-crud-functions","content":"Complete the update and delete CRUD functions in client/crud.js. These functions use the fetch web API call to make the proper request to the server to update and delete counter data. You will find TODO #4 in the client/crud.js file. "},{"title":"Submission​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#submission","content":"You must do the following to submit this assignment: Create a Zip archive of the folder containing your solution files.Upload this Zip file to the Moodle assignment.Check to make sure you uploaded your Zip archive to the Moodle assignment.Check again. "},{"title":"Rubric and Grading​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#rubric-and-grading","content":"Use the following rubric to satisfy the requirements of this assignment. We will be using this rubric to score your submission "},{"title":"Exercise (2 points)​","type":1,"pageTitle":"Ex:13 CRUD #2","url":"/docs/exercises/crud-2/#exercise-2-points","content":"2 points, a reasonable attempt was made at completing the exercise, a solid attempt was made at completing all TODOs.1 point, an attempt was made, but was incomplete or had missing or empty parts, not all TODOs were completed, minimal work.0 points, empty or no submission. "},{"title":"Ex4: Decoder Ring Class","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-ring-class/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided two files in the starter kit. You are provided an HTML file named decoderRingClass.html and a JavaScript file named decoderRingClass.js. You will not need to modify the decoderRingClass.html file, however, it will be used to run your JavaScript code by loading that JavaScript file into the browser by loading the HTML file into your browser. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended. You can use the Live Server VSCode extension to run this simple web application by right-clicking on the decoderRingClass.html file in VSCode and open it in “Live Server”. This will automatically open a browser window. Once your app is loaded into the browser, you can open the browser’s developer tools and the console to see any output that is generated.  "},{"title":"TODO #1: Decoder Class​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#todo-1-decoder-class","content":"In a previous exercise, we made a decoder ring that could work with a certain number of rotations. Now, we are going to generalize decoders so we can implement different kinds of decoders easily. You will write a decoder class whose constructor takes as input an argument which is a string of characters corresponding to the &quot;cipher&quot;. For example, to implement a Caesar cipher that shifts everything two to the right, you do this: let d = new decoder('cdefghijklmnopqrstuvwxyzab'); d.encode('hello world'); // evaluates to 'jgnnq yqtnf'; d.decode('jgnnq yqtnf'); // evaluates to 'hello world';  Your decoder class will provide a similar interface as we saw in a previous exercise. For example, it includes encodeMap and decodeMap objects that are used for the cipher mapping, and it will contain two functions, encode and decode for encoding a string and decoding a string respectively. In this case, the encodeMap will map 'a' → 'c' (the first character in the string), then 'b' → 'd', and so on. Note, that we are no longer restricted by rotations - the cipher could be the lower-case alphabet in any order. In addition, you are going to implement a getter and a setter method that changes the cipher. When the cipher changes, you must rebuild the encodeMap and decodeMap! We provide you the start of the decoder class in the decoderRingClass.js file. Your job is to complete this class. In particular: Implement the cipher setter methodComplete the implementation of the _rebuildMaps methodImplement the encode methodImplement the decode method You will find TODO #1 in the decoderRingClass.js file. "},{"title":"TODO #2: Extend the decoder class​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#todo-2-extend-the-decoder-class","content":"Now, you are going to make a decoderRing subclass that implements the Caesar cipher like last time. The constructor will take a rotation argument, and then it will generate the cipher alphabet to pass to the decoder superclass. Here is an example of its use: let dr = new decoderRing(2); dr.encode('hello world'); // evaluates to 'jgnnq yqtnf'; dr.decode('jgnnq yqtnf'); // evaluates to 'hello world';  We provide you the start of the decoderRing class in the decoderRingClass.js file. Your job is to complete this class. In particular: The constructor To ensure that the decoderRing class that you wrote is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must also write 3 tests to test your code. You must use the console.assert function to write your tests. You will find TODO #2 in the decoderRingClass.js file. "},{"title":"Ex5: Decoder Web Page","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-web-page/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#overview","content":"For this exercise you will make a web interface to the decoder class you built in the previous exercise. You can use your solution from the previous exercise or our solution. Note, that for this exercise you are not allowed to use modules. So, if you used modules in the last exercise you can simply comment out any import/export statements in your decoder.js file. If you do use your own solution, make sure you copy your JS file into the same folder as the HTML document you are about to complete. You should write your solutions in VSCode (or an editor of your choice). The web page you will create should look and work roughly like this:  The application works as follows: Enter a key, consisting of 26 letters (for now, no validation or error-checking is required).Optionally, enter text to encode or decodeWhen you click the “Go” button, it should encode the text entered in the “Text to encode” box, printing it in the “Encoded” box, and the same for “Text to decode” and “Decoded”. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided the decoderRingClass.js solution from the last exercise. This file contains the class definition for the decoder and decoderRing classes. You will use decoder in this exercise to encode/decode text the user enters into the interface. You will not need to make any modifications to that file. We also provide a file named index.html which doesn’t have much. You will need to update this file to build the user interface for our simple encoder/decoder application. "},{"title":"TODO #1: User Interface​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#todo-1-user-interface","content":"For this TODO, you need to use HTML tags to design and implement the user interface you see above for the encoder/decoder application. This will require you to use several different tags. Here are the tags that we used to implement the interface: &lt;h1&gt; - header&lt;center&gt; - this tag is actually deprecated, but is fine to use for now. We will see how to do this properly when we introduce CSS&lt;br&gt; - this is used for formatting&lt;img&gt; - this is used for the image, the image can be found at https://github.com/emeryberger/web-programming/raw/master/decoder-ring.jpg Example: &lt;img src=”URL” alt=”description for the blind”&gt; &lt;form&gt; - for the form itself You want to nest the labels and other form elements inside of the &lt;form&gt; tag: &lt;label&gt; - for accessibility &lt;label for=”some_id”&gt;explanation&lt;/label&gt; &lt;input&gt; - for input UI components &lt;input type=”text” id=”some_id”&gt;Use the following IDs: keyencode, encodeddecode, decoded Examples: &lt;input type=&quot;button&quot; onClick=&quot;doIt()&quot; value=&quot;Go&quot;&gt; &lt;label for=&quot;encode&quot;&gt;Text to encode:&lt;/LABEL&gt; &lt;input type=&quot;text&quot; ID=&quot;encode&quot; /&gt;  You can read up on these tags on the MDN Web Docs. You will find TODO #1 in the index.html file. "},{"title":"TODO #2: Application Behavior​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#todo-2-application-behavior","content":"Now that you have completed TODO #1, you have an interface. Let us make this more interesting by adding some behavior to this application. That is, we want to be able to perform the encode/decode operations when we click on the Go button. To do this you will need to implement a function called doIt inside of the &lt;script&gt; tag in the index.html file. This function needs to create a new decoder object and encode and decode the values from the text boxes in the user interface. Remember, you can get/set the values from the user interface like we do in this example: encodeStr = document.getElementById('encode').value; document.getElementById('encoded').value = c.encode(encodeStr);  Make sure that the Go button calls the doIt function when the Go button is clicked. You will find TODO #2 in the index.html file. That's it! You should now have a working decoder web application! Use VSCode’s Liver Server extension to run your encoder/decoder web application! "},{"title":"Ex3: Decoder Ring","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-ring/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#starter-kit","content":"GitHub Classroom Starter Kit🔥 GitHub Classroom Not Working 🔥 note Follow the GitHub Classroom assignment link on Moodle first. You are provided a single HTML file named exercise-03.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended.  "},{"title":"TODO #1: Decoder Ring (“Caesar cipher”)​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#todo-1-decoder-ring-caesar-cipher","content":"This is an exercise in implementing a basic encryption technique known as a Caesar cipher. The basic approach is to match each letter in the alphabet to a letter in an alphabet that is shifted by a certain amount. For example: Original: ABCDEFGHIJKLMNOPQRSTUVWXYZ Shifted 2 to the right: CDEFGHIJKLMNOPQRSTUVWXYZAB To encode, you match the original letter to the shifted version, so A → C, B → D, and so on. To decode a message, you just do the same thing in reverse, so C → A, and D → B.  From Wikipedia: The transformation can be represented by aligning two alphabets; the cipher alphabet is the plain alphabet rotated left or right by some number of positions. For instance, here is a Caesar cipher using a left rotation of three places, equivalent to a right shift of 23 (the shift parameter is used as the key): Plain: ABCDEFGHIJKLMNOPQRSTUVWXYZ Cipher: XYZABCDEFGHIJKLMNOPQRSTUVW When encrypting, a person looks up each letter of the message in the &quot;plain&quot; line and writes down the corresponding letter in the &quot;cipher&quot; line. Plaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD Deciphering is done in reverse, with a right shift of 3. The encryption can also be represented using modular arithmetic by first transforming the letters into numbers, according to the scheme, A → 0, B → 1, ..., Z → 25. Encryption of a letter x by a shift n can be described mathematically as, En(x)=(x+n) mod 26E_n(x)=(x+n) \\text{ mod } 26En​(x)=(x+n) mod 26 Decryption is performed similarly, Dn(x)=(x − n) mod 26D_n(x)=(x - n) \\text{ mod } 26Dn​(x)=(x − n) mod 26  You are to write a function called decoderRing that takes a rotation (a number from 0 to 25) as a parameter and returns an object with the following properties: "},{"title":"Property 1:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-1","content":"An encodeMap object that contains an entry for every lower-case letter and its corresponding encoded version, shifted forward by the rotation. For example, if the rotation is 2, encodeMap will look like this, where the result for every letter is 2 letters after it in the alphabet, wrapping around to the beginning (notice the wrap-around at the end!): const dr = decoderRing(2); // rotation of 2 // verify that the encodeMap is correct // notice that &quot;y&quot; and &quot;z&quot; wrap around to &quot;a&quot; and &quot;b&quot;! console.assert(JSON.stringify(dr.encodeMap) === JSON.stringify({&quot;a&quot;:&quot;c&quot;,&quot;b&quot;:&quot;d&quot;,&quot;c&quot;:&quot;e&quot;,&quot;d&quot;:&quot;f&quot;,&quot;e&quot;:&quot;g&quot;,&quot;f&quot;:&quot;h&quot;,&quot;g&quot;:&quot;i&quot;,&quot;h&quot;:&quot;j&quot;,&quot;i&quot;:&quot;k&quot;,&quot;j&quot;:&quot;l&quot;,&quot;k&quot;:&quot;m&quot;,&quot;l&quot;:&quot;n&quot;,&quot;m&quot;:&quot;o&quot;,&quot;n&quot;:&quot;p&quot;,&quot;o&quot;:&quot;q&quot;,&quot;p&quot;:&quot;r&quot;,&quot;q&quot;:&quot;s&quot;,&quot;r&quot;:&quot;t&quot;,&quot;s&quot;:&quot;u&quot;,&quot;t&quot;:&quot;v&quot;,&quot;u&quot;:&quot;w&quot;,&quot;v&quot;:&quot;x&quot;,&quot;w&quot;:&quot;y&quot;,&quot;x&quot;:&quot;z&quot;,&quot;y&quot;:&quot;a&quot;,&quot;z&quot;:&quot;b&quot;}));  You might find these functions/operations useful: str.charCodeAt(ind): Returns the ASCII value of the character at index ind  Example: ‘a’.charCodeAt(0) // evaluates to 97  String.fromCharCode(asc): Returns the character corresponding to the ASCII value asc Example: String.fromCharCode(98) // evaluates to ‘b’  x % k: x modulo k is the remainder after dividing x by k Example: 30 % 26 === 4  "},{"title":"Property 2:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-2","content":"A decodeMap object that is the inverse of encodeMap dr.decodeMap; // evaluates to { “c”:”a”, “d”:”b”, … }  "},{"title":"Property 3:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-3","content":"A function encode(str) that takes a string and returns the encoded version – if there is no encoding, return the original letter. dr.encode(‘hello world’); // evaluates to ‘jgnnq yqtnf’  Hints and Tips:​ Use let xs = str.split('').map((ch) =&gt; { … return something }) to iterate through each character in a string and returns a list of everything that has been mapped. Example: let str = ‘hey’; let upper = str.split(‘’).map(ch =&gt; ch.toUpperCase()); console.assert(JSON.stringify(upper) === JSON.stringify([‘H’, ‘E’, ‘Y’]));  Use xs.join(‘’) to convert a list xs back to a string, which is what you will return from the encode function. Example: [‘H’, ‘E’, ‘Y’].join(‘’); // evaluates to ‘HEY’  "},{"title":"Property 4:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-4","content":"A function decode(str) that does the reverse. dr.decode(‘jgnnq yqtnf’); // evaluates to ‘hello world’  You will find TODO #1 in the exercise-03.html file. "},{"title":"TODO #2: Write Tests​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#todo-2-write-tests","content":"To ensure that the decoderRing function and the object it returns that you wrote in TODO #1 is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must write 3 tests to test your code. You must use the console.assert function to write your tests. You will find TODO #2 in the exercise-03.html file. "},{"title":"Ex6: Interactive Decoder Web Page","type":0,"sectionRef":"#","url":"/docs/exercises/interactive-decoder/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#overview","content":"For this exercise you will refactor the web page you built in the previous exercise to create an interactive web interface to the decoder class. You should use your solution from the previous exercise or use our decoder.js and encoder.html reference implementation. Note, that for this exercise you are required to use modules. If you do use your own solution, make sure you copy your JS file into the same folder as the HTML document you are about to complete. You should write your solutions in VSCode (or an editor of your choice). The web application you will create should look and work roughly like this:  The application works as follows: Enter a key, consisting of 26 letters (for now, no validation or error-checking is required).Optionally, enter text to encode or decodeWhen text is entered into the “Key” text box, the background will be yellow with black text until a 26-letter key (all lowercase) has been entered. Any uppercase letters will not be accepted. If a valid key has been entered, the background turns white.When you type into the “Text to encode” text box, it will encode upon each keyup event. It will also turn the background color in the “Encoded” text box to red and the font color to white if there is something to encode; otherwise the background color is white.When you type into the “Text to decode” text box, it will decode upon each keyup event. It will also turn the background color in the “Encoded” text box to green and the font color to white if there is something to encode; otherwise the background color is white. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided the decoderRingClass.js solution from the last exercise. This file contains the class definition for the decoder and decoderRing classes. You will use decoder in this exercise to encode/decode text the user enters into the interface. You will not need to make any modifications to that file. We also provide an index.html file containing the solution from the previous exercise. Lastly, we provide interactive.js which you will use to write JavaScript functions that set up event handlers for the application’s interactivity. You will need to modify and update both index.html and interactive.js to build the user interface for our simple interactive encoder/decoder application. "},{"title":"TODO #1: User Interface and Module Setup​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#todo-1-user-interface-and-module-setup","content":"This part is really easy. Do the following: Remove &lt;input type=&quot;button&quot; onClick=&quot;doIt()&quot; value=&quot;Go&quot;&gt; from index.html. Remove all the existing &lt;script&gt; tags and their contents. Create a new &lt;script&gt; tag that loads in interactive.js as a module. At the end of decoderRingClass.js export the decoder class like this: export { decoder }; Import the decoder class into interactive.js at the top like so: import { decoder } from './decoderRingClass.js';  Now that we have all of that done, we can move on to the next TODO. You may find it helpful to read about [import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) and [export](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/export](https://developer.mozilla.org/en/docs/web/javascript/reference/statements/export) from the MDN Web Docs. You will find TODO #1 in the index.html , decoderRingClass.js, and interactive.js files. "},{"title":"TODO #2: Application Interactivity​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#todo-2-application-interactivity","content":"Now that we have the UI and the JS files/modules ready, we are now going to implement the interactivity of the application. You are to write the following functions: validateKeyTextInput(): This function looks at the key input box to see if it is 26 letters all lowercase. If it is, we change the background color to white. If it is not, we change the background color to yellow.colorEncodedTextBox(): This function looks at the encoded text box. If there is nothing in it, the background color is set to white and the text color is set to black. If there is something in it, the background color is set to red and the text color is set to white.colorDecodedTextBox() : This function looks at the decoded text box. If there is nothing in it, the background color is set to white and the text color is set to black. If there is something in it, the background color is set to green and the text color is set to white.encodeText(): This function grabs the content of the encode text box, calls the encode method of the Decoder class on that text, and sets the value of the encoded text box to the result of the encode method.decodeText(): This function grabs the content of the decode text box, calls the decode method of the Decoder class on that text, and sets the value of the decoded text box to the result of the decode method. note We recommend that you test these functions to make sure they are working. You can do this by simply calling the functions in the interactive.js file and using VSCode’s Live Server extension to run the application. You will find TODO #2 in the interactive.js file. "},{"title":"TODO #3: Hooking it all up​","type":1,"pageTitle":"Ex6: Interactive Decoder Web Page","url":"/docs/exercises/interactive-decoder/#todo-3-hooking-it-all-up","content":"Now that you have tested the functions in the previous TODO, you need to hook everything up so that the user can interact with the application. To complete this exercise, write the following code in interactive.js: Set the initial background color of the key text box to yellow.Add an event listener to the key input box such that on a keyup event it will call the validateKeyTextIntput function.Add two keyup event listeners to the encode text box. One for encoding the text and the other to color the encoded text box. The functions in the previous TODO come in handy for this.Add two keyup event listeners to the decode text box. One for decoding the text and the other to color the decoded text box. The functions in the previous TODO come in handy for this. That's it! You should now have a working interactive decoder web application! Use VSCode’s Liver Server extension to run your encoder/decoder web application! "},{"title":"Ex2: Letter Histogram","type":0,"sectionRef":"#","url":"/docs/exercises/letter-histogram/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Repository​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#starter-repository","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided a single HTML file named exercise-02.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use theconsole.logfunction to print values to the browser’s console andconsole.assertto test the functions that you write. You are encouraged to test your code to make sure it works as intended. "},{"title":"TODO #1: Letter Histogram​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#todo-1-letter-histogram","content":"Write a function called letterHistogram that counts the number of times each character appears in a string and returns an object mapping characters to their frequencies. You will be creating an object ({}) to track the count of each letter. Instead of accessing each character by indexing an array, use str.split(‘’).forEach. Here is the signature of the letterHistogram function: function letterHistogram(str)  Here is an example of calling this function: letterHistogram('this is a test'); // evaluates to { t: 3, h: 1, i: 2, s: 3, ' ': 3, a: 1, e: 1 }  You will find TODO #1 in the exercise-02.html file. "},{"title":"TODO #2: Write Tests​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#todo-2-write-tests","content":"To ensure that the letterHistogram function you wrote in TODO #1 is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must write 3 tests to test your letterHistogram function. You must use the console.assert function to write your tests. Hint: To compare objects, it is easiest to convert both objects into a string and then perform a string comparison. This will be helpful when you test the return value of your letterHistogram function: console.assert(JSON.stringify(letterHistogram(&quot;xxx&quot;)) === JSON.stringify({x : 3}));  You will find TODO #2 in the exercise-02.html file. "},{"title":"Ex9: Persistent Encoder","type":0,"sectionRef":"#","url":"/docs/exercises/persistent-encoder/","content":"Ex9: Persistent Encoder Overview The goal of this exercise is to add persistence to the encoder application we saw in a previous exercise. In particular, you will be implementing an application that works identical to the previous encoder/decoder exercise. However, you will extend this application to support persistence using browser local storage. That is, if you reload the page it will keep the text that has been entered into the editable text boxes. Starter Kit note Follow the GitHub Classroom assignment link on Moodle first. You are provided two files: encoder-interactive.html, interactive.js, and decoder.js. The HTML file provides the necessary tags to load in both the CSS and JS files. You will be modifying this file to add a button. In the interactive.js file you will be adding the necessary logic for data persistence. You do not need to modify the decoder.js file. This contains the decoder functionality from the previous exercises. TODO #1: (HTML) Adding a button You are welcome to use your previous solution, however, the instructions for this exercise are based off of our solution and the starter kit that will help you get started. Here is the modifications you need to make to encoder-interactive.html: Add a “clear” button that will be used to clear local storage and the content of the text boxes that you have typed into. You can see the button in the image above. You will find TODO #1 in the encoder-interactive.html file. TODO #2: (JavaScript) Adding persistence behavior Complete the JS in interactive.js provided in the starter kit to add persistence of the UI data and clear the UI data as shown in the animated image above. Follow the steps below: Add event handlers for the cipher key, encode, and decode text boxes that will save the content of each of these text boxes to local storage.Add an event handler for the clear button such that when the user clicks the button it will clear the local storage state and the text boxes.Call the restoreState function to restore the state of the text boxes.Implement the saveState, restoreState, and clearState functions. You will find TODO #2 in the interactive.js file.","keywords":""},{"title":"Ex1: Letter Frequency","type":0,"sectionRef":"#","url":"/docs/exercises/letter-frequency/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#information","content":"Believe it or not, you should start HW1 first before completing this exercise.Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#overview","content":"The following exercises will give you some practice with some of the basics of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Code​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#starter-code","content":"You are provided a single HTML file named exercise-04.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended. "},{"title":"TODO #1: Letter Frequency​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#todo-1-letter-frequency","content":"Write a function letterFrequency that counts the number of times a particular character appears in a string and returns that count. You'll need to use the length property of a string (str.length → the length of the string). Note that the string is represented as an array, so you can access each character by normal array indexing: str[0] is the first character. You will find TODO #1 in the exercise-04.html file. "},{"title":"TODO #2: Palindrome Detector​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#todo-2-palindrome-detector","content":"Write a function isPalindrome that checks if the input string is a palindrome – that is, the string is the same forwards and backwards (example: level is a palindrome, as is the word racecar and tacocat). This function returns true if the word is a palindrome; false otherwise. For this exercise, &quot;race car&quot; (with a space) is not a palindrome, but &quot;a a a&quot; is. You will find TODO #2 in the exercise-04.html file. "},{"title":"Ex11: REST and Fetch","type":0,"sectionRef":"#","url":"/docs/exercises/rest-and-fetch/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#overview","content":"The goal of this exercise is to implement a web app that takes a GitHub repository and name (e.g., plasma-umass/scalene) and then fetches the number of “stars&quot; which the repository has (displayed on the upper-right hand side of GitHub repositories).  This is what the app will look like when you run it:  "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You only need to edit the file starbuddy.js, but you will need to consult starbuddy.html. "},{"title":"Submission​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#submission","content":"You must submit the following to complete this exercise: The associated assignment survey on Moodle. You must ensure that you have completed this exercise and committed your work to your GitHub repository before submitting the assignment survey on Moodle. You are required to submit a link to the commit that you are self reviewing and that we may use to review your work. Your submission time/date is based on the time/date of the assignment survey submission available from Moodle. You are responsible for ensuring that your submission is complete and accurate. If your survey submission is late, tokens will be automatically deducted from your token count. You will be notified of the number of tokens deducted from your token count as part of your score report in an email. "},{"title":"😎 Meeting Standards 😎​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#-meeting-standards-","content":"Meeting Standards is considered B-quality work. This level of work meets the requirements of the assignment. It is expected that you will be able to complete this level of work with minimal assistance and complete it by the assigned due date with a correct solution. By completing this level of work, you will be able to demonstrate that you have met the learning objectives of the assignment and of the course and are prepared to be successful in future assignments and subsequent courses that have this course as a prerequisite. "},{"title":"TODO #1: Add Event Listener​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#todo-1-add-event-listener","content":"First, you will implement the code (one line) in the function initialize to add an event listener to the button (consult starbuddy.html). You will find TODO #1 in the starbuddy.js file. "},{"title":"TODO #2: Fetch the Stars​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#todo-2-fetch-the-stars","content":"Second, implement the function getStars that uses the fetch API. You will need to await fetch first to get the response from the server, and then await response.json() to get the JSON out of the response. Your function should then update the &lt;div&gt; that will contain the star count (returned from the GitHub API in a JSON object as the property stargazers_count). Recall that the API endpoints for GitHub look like this: https://api.github.com/repos/jvilk/browserfs (in other words, you can't just use the &quot;repo&quot; &lt;div&gt; element as the URL!). If the request fails (response.ok is false or response.status === 404), your app should report &quot;an error has occurred.&quot; Although not typically advisable, use .innerHTML to set the contents of the &lt;div&gt; in starbuddy.html to make things a little easier. In total, your function should be pretty short: around 10 lines of code. You will find TODO #2 in the starbuddy.js file. "},{"title":"🚀 Exceeding Standards 🚀​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#-exceeding-standards-","content":"Exceeding Standards is considered A-quality work. If you have satisfied the Meeting Standards level of this assignment and you want to go above and beyond, you can try to do one or all of the following: Add a loading indicator (e.g., a spinner) while the request is in progress.Add a &quot;clear&quot; button that clears the star count.Add a &quot;reset&quot; button that clears the star count and the repository name.Add a &quot;random&quot; button that fetches a random repository from the GitHub API and displays its star count.Add a &quot;top&quot; button that fetches the top 10 repositories from the GitHub API and displays their star counts.Add a &quot;bottom&quot; button that fetches the bottom 10 repositories from the GitHub API and displays their star counts.Add a &quot;search&quot; button that fetches the top 10 repositories from the GitHub API that match the search query and displays their star counts.Add a &quot;sort&quot; button that fetches the top 10 repositories from the GitHub API that match the search query and displays their star counts, sorted by the number of stars.Add a &quot;filter&quot; button that fetches the top 10 repositories from the GitHub API that match the search query and displays their star counts, filtered by the number of stars. You are always welcome to try something else that is not listed here. The sky is the limit! Just make sure you document what you did in the associated submission form. You will only receive credit for the Exceeding Standards level of work if you have completed the Meeting Standards level of work. Do not attempt to complete the Exceeding Standards level of work until you have completed the Meeting Standards level of work as it will be ignored. "},{"title":"🕊️ Approaching Standards 🕊️​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#️-approaching-standards-️","content":"Approaching Standards is considered C-quality work. This level of work indicates that you are not quite meeting the standards for the assignment, but you are making progress. You should be able to complete the assignment with some guidance and/or additional work. You have demonstrated some understanding of the concepts, but you haven't completely showed that you understand the concepts entirely. You are likely to struggle on future assignments and/or subsequent courses that have this course as a prerequisite. If you struggled with this assignment, but you understand the concepts and have some understanding of how to solve it, but your application of that understanding is not quite there, incomplete, or incorrect, then your score is at the Approaching Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"🛟 Below Standards 🛟​","type":1,"pageTitle":"Ex11: REST and Fetch","url":"/docs/exercises/rest-and-fetch/#-below-standards-","content":"Below Standards is considered D-quality work. This level of work indicates that you are not meeting the standards for the assignment. You do not understand the concepts and/or you have not demonstrated any understanding of the concepts. You have not made any significant progress on the assignment. You are likely to significantly struggle on future assignments and/or subsequent courses that have this course as a prerequisite. If you struggled with this assignment and you do not understand how to solve it, do not understand where to start, or even entirely understand the code provided or the code you wrote, your score is at the Below Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"Ex14: Routing","type":0,"sectionRef":"#","url":"/docs/exercises/routing/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#overview","content":"This exercise uses the solution from a previous exercise where we extended a CRUD-based HTTP server with a front-end UI. In this exercise, we are going to use the ExpressJS server-side web framework in place of the built-in Node.js http library. As you will see, the ExpressJS framework is a lot more expressive than the built-in HTTP library. It allows us to write more concise code that is easier to read. It will be helpful to reference the server code examples covered in the lesson to provide guidance on the implementation of this exercise. The template we provide also gives you significant direction. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#starter-kit","content":"Download the Starter Kit! "},{"title":"Setup​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#setup","content":"After you download the starter, open up the exercise directory in VSCode and install the necessary dependencies in the Terminal from within the project directory. Run the following commands: npm init npm install --save express npm install --save morgan  This will update your package.json file to include the ExpressJS framework and the Morgan logging library as well as install the dependencies in the node_modules directory. After installing the dependencies, you will need to add the following line to your package.json file under the entry for description to support ES6 module syntax in your server code: &quot;type&quot;: &quot;module&quot;  After you have installed the dependencies and added the ES6 module support, you can run the following command to start the server: node memcrud.js  "},{"title":"Adding Express Routes (Server)​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#adding-express-routes-server","content":"The starter kit we provide for you includes the setup of the ExpressJS server with a few of the routes completed. You will find the creation of the ExpressJS server and routes we have provided towards the end of the file. Your job is to complete the remaining routes. In particular, you are to do the following: "},{"title":"TODO #1: Add Express Route /update​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-1-add-express-route-update","content":"Add the following route: /update: This route matches a PUT request to the /update path. It should pass the request body to the updateCounter function. "},{"title":"TODO #2: Add Express Route /delete​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-2-add-express-route-delete","content":"Add the following route: /delete: This route matches a DELETE request to the /delete path. It should pass the request body to the deleteCounter function. "},{"title":"Saving Server State (Server)​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#saving-server-state-server","content":""},{"title":"TODO #3: Complete the updateCounter function​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-3-complete-the-updatecounter-function","content":"Complete the following function: updateCounter(response, name): The response parameter is the Response object passed into the express route. The name parameter is the name of the counter. You can use the other CRUD functions we implemented as guidance. It is important to note that you must call response.json() as the last line of the function. If you do not do this, you may encounter some unexpected behavior. "},{"title":"TODO #4: Complete the deleteCounter function​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-4-complete-the-deletecounter-function","content":"Complete the following function: deleteCounter(response, name): The response parameter is the Response object passed into the express route. The name parameter is the name of the counter. You can use the other CRUD functions we implemented as guidance. It is important to note that you must call response.json() as the last line of the function. If you do not do this, you may encounter some unexpected behavior. "},{"title":"HTTP Fetch (Client)​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#http-fetch-client","content":"The following TODOs add functionality to the client to update and delete a counter from the browser. You will need to use the fetch browser API to communicate with the server. We made some slight changes to these RESTful calls to send JSON data to the server rather than use the query string. You can use the other CRUD functions we implemented as guidance. Note, we continue to use the query string for the readCounter function. The reason we do this is because we are unable to use the request body with a GET request. If we wanted to use the request body, we would have to use the POST method. "},{"title":"TODO #5: Complete the updateCounter function​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-5-complete-the-updatecounter-function","content":"Complete the following function in client/crud.js: updateCounter(name): The name parameter is the name of the counter. Use fetch to send a request to the server to update the server counter state. This function returns the data that is sent back to the client as an HTTP response. "},{"title":"TODO #6: Complete the deleteCounter function​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#todo-6-complete-the-deletecounter-function","content":"Complete the following function in client/crud.js: deleteCounter(name): The name parameter is the name of the counter. Use fetch to send a request to the server to update the server counter state. This function returns the data that is sent back to the client as an HTTP response. "},{"title":"Submission​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#submission","content":"You must do the following to submit this assignment: Create a Zip archive of the folder containing your solution files.Upload this Zip file to the Moodle assignment.Check to make sure you uploaded your Zip archive to the Moodle assignment.Check again. "},{"title":"Rubric and Grading​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#rubric-and-grading","content":"Use the following rubric to satisfy the requirements of this assignment. We will be using this rubric to score your submission "},{"title":"Exercise (2 points)​","type":1,"pageTitle":"Ex14: Routing","url":"/docs/exercises/routing/#exercise-2-points","content":"2 points, a reasonable attempt was made at completing the exercise, a solid attempt was made at completing all TODOs.1 point, an attempt was made, but was incomplete or had missing or empty parts, not all TODOs were completed, minimal work.0 points, empty or no submission. "},{"title":"Ex10: Install Node.js and Run Server","type":0,"sectionRef":"#","url":"/docs/exercises/run-server/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#overview","content":"This exercise is straight forward! You are only required to install Node.js (node) and run the node server that was discussed in the lesson. You will be using node for the rest of the semester, so it is important that you get it installed and running on your local computer. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided a single file: server.js. This JS file contains a rudimentary example of how an HTTP server is written using the core HTTP library that the node environment provides. It is a highly efficient HTTP server designed to write server-side web applications in JavaScript. "},{"title":"Submission​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#submission","content":"You must submit the following to complete this exercise: The associated assignment survey on Moodle. You must ensure that you have completed this exercise and committed your work to your GitHub repository before submitting the assignment survey on Moodle. You are required to submit a link to the commit that you are self reviewing and that we may use to review your work. Your submission time/date is based on the time/date of the assignment survey submission available from Moodle. You are responsible for ensuring that your submission is complete and accurate. If your survey submission is late, tokens will be automatically deducted from your token count. You will be notified of the number of tokens deducted from your token count as part of your score report in an email. "},{"title":"😎 Meeting Standards 😎​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#-meeting-standards-","content":"Meeting Standards is considered B-quality work. This level of work meets the requirements of the assignment. It is expected that you will be able to complete this level of work with minimal assistance and complete it by the assigned due date with a correct solution. By completing this level of work, you will be able to demonstrate that you have met the learning objectives of the assignment and of the course and are prepared to be successful in future assignments and subsequent courses that have this course as a prerequisite. "},{"title":"TODO #1: Install Node.js​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#todo-1-install-nodejs","content":"You can install Node.js by visiting their website. There are several different ways to get node on your local computer. Determine which way is the best for you. After you install node, bring up a terminal and type in this command: node --version  Take a screenshot of your terminal. Please add this screenshot to your GitHub repository and add an image link to it in the README.md file. "},{"title":"TODO #2: Run the HTTP server.​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#todo-2-run-the-http-server","content":"Run the HTTP server like so: node server.js  Take a screenshot of your terminal. Please add this screenshot to your GitHub repository and add an image link to it in the README.md file. "},{"title":"TODO #3: Visit the server in your browser.​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#todo-3-visit-the-server-in-your-browser","content":"Visit the server in your browser by going to this URL: http://localhost:3000. Take a screenshot of your browser. Please add this screenshot to your GitHub repository and add an image link to it in the README.md file. "},{"title":"🚀 Exceeding Standards 🚀​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#-exceeding-standards-","content":"Exceeding Standards is considered A-quality work. If you have satisfied the Meeting Standards level of this assignment and you want to go above and beyond, you can try to do one or all of the following: Add a new route to the server that responds to a GET request to the path /hello. The response should be a JSON object with a key of message and a value of Hello World!.Add a new route to the server that responds to a POST request to the path /hello. The response should be a JSON object with a key of message and a value of Hello World!.Add a new route to the server that responds to a GET request to the path /hello/:name. The response should be a JSON object with a key of message and a value of Hello &lt;name&gt;!, where &lt;name&gt; is the value of the name parameter in the URL.Add a new route to the server that responds to a POST request to the path /hello/:name. The response should be a JSON object with a key of message and a value of Hello &lt;name&gt;!, where &lt;name&gt; is the value of the name parameter in the URL. You are always welcome to try something else that is not listed here. The sky is the limit! Just make sure you document what you did in the associated submission form. You will only receive credit for the Exceeding Standards level of work if you have completed the Meeting Standards level of work. Do not attempt to complete the Exceeding Standards level of work until you have completed the Meeting Standards level of work as it will be ignored. "},{"title":"🕊️ Approaching Standards 🕊️​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#️-approaching-standards-️","content":"Approaching Standards is considered C-quality work. This level of work indicates that you are not quite meeting the standards for the assignment, but you are making progress. You should be able to complete the assignment with some guidance and/or additional work. You have demonstrated some understanding of the concepts, but you haven't completely showed that you understand the concepts entirely. You are likely to struggle on future assignments and/or subsequent courses that have this course as a prerequisite. If you struggled with this assignment, but you understand the concepts and have some understanding of how to solve it, but your application of that understanding is not quite there, incomplete, or incorrect, then your score is at the Approaching Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"🛟 Below Standards 🛟​","type":1,"pageTitle":"Ex10: Install Node.js and Run Server","url":"/docs/exercises/run-server/#-below-standards-","content":"Below Standards is considered D-quality work. This level of work indicates that you are not meeting the standards for the assignment. You do not understand the concepts and/or you have not demonstrated any understanding of the concepts. You have not made any significant progress on the assignment. You are likely to significantly struggle on future assignments and/or s If you struggled with this assignment and you do not understand how to solve it, do not understand where to start, or even entirely understand the code provided or the code you wrote, your score is at the Below Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"Guides","type":0,"sectionRef":"#","url":"/docs/guides/","content":"Guides","keywords":""},{"title":"Git Basics & Workflow Overview","type":0,"sectionRef":"#","url":"/docs/guides/git-basics/","content":"","keywords":""},{"title":"Git Commands​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#git-commands","content":"git init - Initialize a new local repository git clone &lt;repo_url&gt; - Copies an existing remote repository into a new folder on your machine git add . - Adds all files that were modified to be staged for commiting. You can do git add &lt;file&gt; for specific files. git commit -m &quot;your message&quot; - Commit the added changes with a short message describing the changes. If you don't use -m, Git will open up Vim to allow adding a longer message. git push origin &lt;branch&gt; - Pushes the changes to a particular branch. By default, git push should push to the main/master branch on the remote, but you can specifiy other branches as well. git status - Shows the state of the modified or added files in the repository. git pull - Grabs changes from the remote repo to your local one. git branch - Lists out all the existing branches on the local repo. git checkout -b &lt;branch_name&gt; - Creates and switches to a new branch. Remove the -b if you only want to switch to an existing branch. git switch &lt;branch_name&gt; - Another way to switch branches. git merge &lt;branch_name&gt; - Merges working branch to main/master (do this on main/master!). If you can, do this through GitHub so you can view all potential merge conflicts in a clean UI (The VSCode git extension also allows you to do this) git log - Shows a history of commits to the repository.  "},{"title":"Scenario 1: Initializing - Local Repository to GitHub​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#scenario-1-initializing---local-repository-to-github","content":"In your project folder, open the terminal and run git initOn GitHub, create a new empty repository and copy the URLOn your local folder, add all the files to your repo with git add .Stage your changes for committing with git commit -m &quot;your_message&quot;Run git branch -M mainRun git remote add origin &lt;github_repo_url&gt;Run git push -u origin main You should now see all your commited files from the local repo on the GitHub repo.  "},{"title":"Scenario 2: Initializing - Cloning From GitHub​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#scenario-2-initializing---cloning-from-github","content":"Open the terminal in a folder that will store the repositoryCopy the URL of your GitHub repositoryIn the terminal, run git clone &lt;github_repo_url&gt; Note to students: Watch out for which folder your terminal is open in when running these commands. Make sure you are not cloning repositories inside other repositories, keep your assignments in their own folders! The video walks through this more carefully.  "},{"title":"Scenario 3: Working with Branches​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#scenario-3-working-with-branches","content":"Create a new branch with git checkout -b &lt;branch_name&gt;. This will create and switch you over to this new branch.Make some changes to your project.Run git add . and git commit -m &quot;your_message&quot;Run git push origin &lt;branch_name&gt;Run git switch main (or master, depending on your git)Run git merge &lt;branch_name&gt;. If there are no merge conflicts, this should happen smoothly, otherwise you will be alerted to the conflicts and can fix them in VSCode, or create a pull request on GitHub and resolve the issues there.  "},{"title":"Important Links and Extras​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#important-links-and-extras","content":""},{"title":"Launching VSCode with code .​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#launching-vscode-with-code-","content":"MacOSWindows "},{"title":"Renaming default git branch to main:​","type":1,"pageTitle":"Git Basics & Workflow Overview","url":"/docs/guides/git-basics/#renaming-default-git-branch-to-main","content":"git config --global init.defaultBranch main "},{"title":"VSCode","type":0,"sectionRef":"#","url":"/docs/guides/vscode/","content":"","keywords":""},{"title":"Install VSCode​","type":1,"pageTitle":"VSCode","url":"/docs/guides/vscode/#install-vscode","content":"Do the following: Download VSCode and install it on your computer.Learn a little about VSCode by looking at Getting Started with Visual Studio Code. "},{"title":"Install Extensions​","type":1,"pageTitle":"VSCode","url":"/docs/guides/vscode/#install-extensions","content":"Like many other programming editors, VSCode has a rich set of extensions that you can use to extend the functionality of the editor. To install an extension you want to click on the extension icon in the Activity Bar as shown in the figure below.  This will bring up Extensions pane and allow you to search for extensions. We recommend you install the following extensions: HTML CSS SupportLive Server There are plenty of other extensions you might be interested in exploring that will allow you to make VSCode more powerful and customized to the way you like it. "},{"title":"Homework","type":0,"sectionRef":"#","url":"/docs/homework/","content":"Homework Homework are programming assignments that reinforce material taught in class. These are longer assignments and take more time than in-class exercises. They require you to apply your understanding of the material to a programming challenge that emphasizes what you have learned during lecture and any assigned material. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review.","keywords":""},{"title":"Git Setup","type":0,"sectionRef":"#","url":"/docs/guides/git/","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#preparation","content":"Before you complete the tasks in this document, you should watch the following videos: Git, GitHub, &amp; GitHub Desktop for beginnersGit and GitHub in ~30 Minutes The first video provides a gentle introduction to Git using GitHub Desktop, which is a graphical application that allows you to interface with Git repositories stored on GitHub. The second video covers the most common Git commands that can be used from a command prompt. Although you can use GitHub Desktop for much of the work in this course, you should use Git from the command line to better understand how it works. To be proficient with Git and claim that you understand how it is used and works (say, in a job interview), you should be able to use Git from the command prompt. "},{"title":"Download and Install Git​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#download-and-install-git","content":"Download and Install Git. After you install Git, open a command prompt on your operating system (Terminal on Mac, Command prompt on windows, Terminal on Linux) and type in the following command: git --version  This will print out the version. Mine looks like this: git version 2.38.1  "},{"title":"Create a GitHub Account​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#create-a-github-account","content":"Create an account on GitHub if you do not already have a GitHub account. "},{"title":"Hw5: Fetch, Multiplayer, Server","type":0,"sectionRef":"#","url":"/docs/homework/fetch-multi-server/","content":"Hw5: Fetch, Multiplayer, Server Coming soon...","keywords":""},{"title":"Hw6: Fetch, Scoreboard, Deploy","type":0,"sectionRef":"#","url":"/docs/homework/fetch-scoreboard-deploy/","content":"Hw6: Fetch, Scoreboard, Deploy Coming soon...","keywords":""},{"title":"Hw1: GitHub Classroom","type":0,"sectionRef":"#","url":"/docs/homework/github-classroom/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#overview","content":"In this course, most of the assignments are distributed using GitHub Classroom. GitHub Classroom uses Git to organize assignments that are stored in Git repositories. The goal of this homework is to get you familiar with Git, GitHub, and GitHub Classroom. This course uses Git extensively to help you practice using version control which is an extremely important tool in the context of software development as well as other disciplines that need a fine-grained method for versioning files. We use GitHub Classroom as a place to manage assignment repositories. "},{"title":"Task 1 – Accept GitHub Classroom Link​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-1--accept-github-classroom-link","content":"The following is step-by-step instructions on how to accept your first GitHub Classroom assignment. Follow these instructions in sequence to successfully gain access to this first assignment. "},{"title":"Step 1​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-1","content":"The first thing you need to do is click on the GitHub Classroom assignment link provided with this homework in the LMS that we are using (e.g., Moodle). Once you click on that link you will see a message similar to the one to the left. It is asking you to join the classroom. You need to find your UMass username or email address in the list of “Identifiers”. Once you find it, click on it to continue. If you do not find it, post to Piazza so we can fix that.  "},{"title":"Step 2​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-2","content":"After you click on your UMass username you then need to click OK to confirm.  "},{"title":"Step 3​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-3","content":"Next, you need to accept the assignment. Notice that it will create a unique repository name that will be associated with your UMass username.  "},{"title":"Step 4​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-4","content":"Now you need to wait a short period of time for GitHub Classroom to create your repository. You must refresh the web page to see when it completes.  "},{"title":"Step 5​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-5","content":"After a few browser refreshes it will display the link to your repository. Click on that link to open your GitHub repository.  After you follow those steps, you have a GitHub repository connected to GitHub Classroom. The instructors of this course will have access to your repository and be able to see the work that you commit. This allows us to help you as you complete assignments as well as see your progress. Your repository will look something like this (this may vary depending on the semester):  "},{"title":"Task 2 - Clone the Assignment Repository​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-2---clone-the-assignment-repository","content":"Now that you created the homework repository, you want to clone that repository to your local machine. We will discuss two ways of doing this. The first way is to use the command prompt. The second way is to clone the repository through VSCode. "},{"title":"Command Prompt Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#command-prompt-method","content":"You will need to open a command prompt (this will differ depending on which operating system you are using) and navigate to a folder in which you want to clone your assignment repository into. Once you are in that folder you want to type in the following command : git clone YOUR_REPOSITORY_URL  You will need to replace YOUR_REPOSITORY_URL with the name of the repository that was created for you when you accepted the assignment. Here is an example of what this might look like (depends on the semester): git clone https://github.com/umass-cs-326-summer/homework-01-github-classroom.git  After you type this command you may be asked to enter your GitHub username and password. If you encounter an error, you may need to create a personal access token to clone your repository successfully. To create a personal access token, you should follow the instructions in How To: Clone GIT Repo Using Personal Access Token. You can read more about the reasoning behind GitHub’s decision to require a personal access token in this article. After you run this command, you will see a folder that was created containing the starter repository. You can open this folder in VSCode. There are several ways of doing this depending on the operating system you are using. In Windows, you can right click on the folder and click on “Open with VSCode”. On a Mac, you can drag the folder onto the VSCode application. You can also open VSCode and click on the “Explorer” button on the Activity Bar. Then click on “Open Folder”  "},{"title":"VSCode Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#vscode-method","content":"Another way to clone your repository is directly from VSCode. We will not explain the details in this document, but you are welcome to look at this brief video to show you how. "},{"title":"GitHub Desktop Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#github-desktop-method","content":"Lastly, you can use GitHub Desktop to clone your repository. See this video to learn how to do that. You are welcome to use whichever method you prefer, but we will mostly be demonstrating how to work with Git from the command line. "},{"title":"Task 3 - Configuring Names and Emails​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-3---configuring-names-and-emails","content":"For you to be identified properly when you make changes to your repository, you need to configure Git to use your name and email. You must run these two commands from a command prompt to accomplish this: git config --global user.name &quot;John Doe&quot; git config --global user.email johndoe@example.com  You must replace the value for user.name with your actual name and user.email with your actual email. It is extremely important that you provide your credentials, otherwise it is impossible to identify your commits in your Git repositories. Do not skip this step! "},{"title":"Task 4 - Making Changes, Adding, and Committing​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-4---making-changes-adding-and-committing","content":"Now you are ready to work with your homework repository. This homework has a simple task. You will notice a PROFILE.md file in the homework repository folder. Open that file in VSCode. Follow these steps to be successful: Replace the [Your Name Here] and [Your Email Here] text fragments with your name and your email. Next, we want to commit this change to the repository. Run these commands from the command prompt inside your repository folder. These commands will add your changed file to the “staging” area and then commit them to the repository. git add .git commit -m “Added my name and email” You can also do this through VSCode by clicking on the Git icon in the Activity Bar. If you are interested in learning more on how to do that I suggest you google VSCode and Git to learn more. Next, go to the end of the PROFILE.md file. You will find a TODO that asks you to add a little bit about yourself. Replace that TODO with a paragraph about yourself. You can write anything you would like. It also asks you to write something about what you are expecting out of this course. Let us know! After you write the paragraph and feel like you have something done, you need to run the same commands again, but with a different “message”. git add .git commit -m “Added my paragraph”  That is all you need to do here! "},{"title":"Task 5 - Pushing​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-5---pushing","content":"You have made changes to your local repository on your computer and added and committed those changes to the repository on your computer. Next, you want to copy those changes to the remote copy of your repository on GitHub. To do that we use the push command. git push  The output of that command will look something like this:  After you push your changes, you are done! "},{"title":"Submission​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#submission-1","content":"The only requirement for submission is to push your changes to GitHub before the deadline. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission. "},{"title":"Hw4: Persistence & Hints","type":0,"sectionRef":"#","url":"/docs/homework/persistence-and-hints/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#submission","content":"You must submit the following to complete this exercise: The associated assignment survey on Moodle. You must ensure that you have completed this exercise and committed your work to your GitHub repository before submitting the assignment survey on Moodle. You are required to submit a link to the commit that you are self reviewing and that we may use to review your work. Your submission time/date is based on the time/date of the assignment survey submission available from Moodle. You are responsible for ensuring that your submission is complete and accurate. If your survey submission is late, tokens will be automatically deducted from your token count. You will be notified of the number of tokens deducted from your token count as part of your score report in an email. "},{"title":"Overview​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#overview","content":"This is the next part of a series of assignments around the game of Scrabble. We hope that it will be a fun experience in progressively learning all pieces of modern web development, so as to engineer a fully functional game. In this assignment, you will add a new functionality to our Scrabble application to save the game state, create one more utility function, do a little refactoring, and add some additional functionality for displaying hints. In particular, this is what your web application will resemble in the end:  "},{"title":"GitHub Classroom and Workflow​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#github-classroom-and-workflow","content":"All homework assignments use GitHub Classroom. To start this assignment, you must click on the GitHub Classroom link and accept the assignment to create your initial GitHub repository. You must then use the git clone command to clone that repository to your local computer to begin work. If you forget how to do this, refer to the first homework assignment and related material. We recommend the following workflow to complete homework assignments: Accept the GitHub Classroom link Clone your repository to your local computer Do the following until the assignment is complete A. Make incremental required additions/edits/changes to the source code B. Add those changes to your repository: `git add .` C. Commit those changes: `git commit -m &quot;a short message about changes&quot;` D. Push those changes to GitHub: `git push`  You are also welcome to use use GitHub Desktop and/or VSCode to do this, but we highly encourage you to become familiar with the command line usage first as this is 100% expected in industry and academia. "},{"title":"General Guidelines​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#general-guidelines","content":"Here are a few general guidelines for this assignment: Use console.log to print values to the browser console. This is a cheap way to ensure that your code is doing what you think it is doing. If nothing displays in the browser window, it is likely that there is an error in your code. Open the console and see if there was an error. It will be helpful to come up with test cases using console.assert. This will give you some assurance that your code is working properly. We encourage you to share test cases that you develop with others taking this class. This will make everyone’s code better and is how quality assurance (QA) can work in practice. We will be spot checking your code for good coding practices. It is expected your code does not contain (1) extraneous variables/code, (2) missing semicolons, (3) missing curly braces, and (4) use of double equals. Furthermore, you should use whitespace consistently and make the code legible. Many of these issues will be recognized by VSCode and either suggested as corrections or automatically corrected when you save your code. Write code in small increments, continually verify that it is working. It is strongly encouraged that you write your code in small increments and test (or print) that code at each step of the way. Do not write an entire application and then see if it works. If you can verify that your code is working each step of the way, then you can be confident to extend it further. Please review the collaboration policy in the Syllabus for further information on what you can and cannot do in terms of sharing of work. "},{"title":"Starter Code​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#starter-code","content":"The starter code provided below is a skeleton of the code you will be writing. Here is a brief description of each of the files: README.md: this file contains markdown text; always included in a git repository.main.js: this is the main entry point into the application; loaded by index.html.game.js: contains code that represents a scrabble game board.rack.js: contains code that represents a rack of tiles used by a player.scoring.js: contains code that implements the scoring for the scrabble game.scrabbleUtils.js: this file contains the utility functions you wrote in the previous homework. It is not used in this homework. You are welcome to copy your implementation here.shuffle.js: used to shuffle the game tiles.test.js: contains your tests for game.js and rack.js.dictionary.js: This file contains the dictionary of words that will be used in the scrabble game.index.html: this file is used to display the scrabble board and user interfacemain.css: contains the CSS for this web application To run this &quot;application&quot; it is recommended that you use the Live Server VSCode extension. You simply right-click on the index.html file and select &quot;Open with Live Server&quot;. This will automatically run a web server on your local machine and point your browser to the local server which will load the index.html file into the browser. info Please complete all of the TODOs in the code.DO NOT DELETE THE TODO COMMENTS IN THE STARTER CODE "},{"title":"😎 Meeting Standards 😎​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#-meeting-standards-","content":"Meeting Standards is considered B-quality work. This level of work meets the requirements of the assignment. It is expected that you will be able to complete this level of work with minimal assistance and complete it by the assigned due date with a correct solution. By completing this level of work, you will be able to demonstrate that you have met the learning objectives of the assignment and of the course and are prepared to be successful in future assignments and subsequent courses that have this course as a prerequisite. "},{"title":"Part 0: Git Commits​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-0-git-commits","content":"You must have at least 5 GitHub commits to receive credit for this part. It is always good practice to design and develop code incrementally. As part of that process you should be making frequent commits to keep a record of your changes along the way. "},{"title":"Part 1: Saving the State of the Game​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-1-saving-the-state-of-the-game","content":"In this first part, you will make it possible for the game state to be saved and restored when the page is reloaded. More precisely, in game.js, you should save the grid state and bag state in browser local storage, and restore it when the page loads/reloads. Every time a word is placed on the grid (using the controls from the last homework), the state of the game in storage should be updated. When the page loads, you should check if there is a version in storage, and if there is, you should restore it. You must also extend index.html and add a reset button to your user interface controls, which should clear the grid and delete the copy in local storage. After you complete this part, the UI and behavior of the scrabble application will look like this:  The code files you will need to work with in this part are: game.js: the logic for saving and restoring game stateindex.html: the addition of the reset button "},{"title":"Part 2: Refactor Shuffle​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-2-refactor-shuffle","content":"This part is easy! As you may have noticed, the shuffle function in shuffle.js is only used in game.js. It would therefore make sense to place it in that file, and keep it “private” (which in JS just means to not export it). Therefore, move the shuffle function to game.js and delete the shuffle.js file. This will also reduce the number of files we are working with. Do not forget to remove the import of shuffle.js at the top of game.js. The code files you will need to work with in this part are: game.js: adding the shuffle function to game.jsshuffle.js: removing this file "},{"title":"Part 3: Checking if a Word is Valid (in the dictionary)​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-3-checking-if-a-word-is-valid-in-the-dictionary","content":"In this part, you will write another utility function which will determine if a word is valid (i.e. it is in the dictionary). The word will be played by the user, and therefore can contain wildcards. The function should return true if the input matches any of the words in the dictionary, otherwise it returns false. Add a new function called isValid to the scrabbleUtils.js file implementing this functionality. Make sure that you export this function from scrabbleUtils.js. The code files you will need to work with in this part are: scrabbleUtils.js: new function called isValid "},{"title":"Part 4: Rendering and Updating the Rack​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-4-rendering-and-updating-the-rack","content":"This next part is the most difficult in this assignment. It brings together a few parts with some logic to render the board and rack properly. To start, you will render the player’s rack below the board. Remember, the rack is where the player’s tiles that have been drawn from the bag are held. You should initialize the rack by taking 7 random tiles from the bag. You will then connect it to the UI controls in the following way: When the play button is clicked, your code should check if the word is valid (using the isValid function you implemented in Part 3) and if it can be played with the available tiles. If it cannot be played, you should tell the user using the alert() function.If the word can be played, the code should place it on the board, remove the tiles used from the available tiles, take enough tiles from the bag to go back to a maximum of 7 tiles, and rerender the rack. Here is what the UI should mostly look like after you make these changes:  In a similar fashion as the Game class you can implement a render method in your Rack class (rack.js) that takes in the DOM element into which the rack needs to be rendered. You will likely need a few other methods to populate the Rack with letters from the Game. You will also need to update your main.css file with additional rules to display the rack similar to the figure shown above. We implemented it this way: Added a &lt;div&gt; to index.html with an id attribute set to “rack”Added a render method to the Rack class to render the rack with its letter tilesAdded some CSS to display the rack as shown aboveAdded a removeTile method to the Rack class to remove a tile from the rackAdded a few lines of code to main.js to create a new Rack object, add 7 tiles to the rack by calling its takeFromBag method, and rendering the Rack with its render methodAdded additional code to the event handler for the “Play!” button that includes: Checking if the word played is a valid word in the dictionary using isValid that you implemented in the scrabbleUtils.js fileChecking if the word can be constructed from the available tiles (the canConstructWord from scrabbleUtils.js is handy along with the Rack’s getAvailableTiles method)Checking if the word can’t be constructed from the available tiles or if the word isn’t valid. If either is true, then display an alert dialog boxOtherwise, we then constructed the word from the available tiles (using the constructWord function in scrabbleUtils.js that we give you) and then we used the Game’s playAt method to try to play the wordIf the word can’t be played, we displayed an alert dialog box, otherwise we rendered the game board, removed the played tiles from the rack, took new tiles from the bag to replace the played tiles, and rendered the rack with the new tiles "},{"title":"Part 5: Hints​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#part-5-hints","content":"In this last part, you will add a basic hint system. Add a third button to the controls, labeled “help” or “hint”. When clicked, it should display below the available tiles rack one or more hints, obtained using your bestPossibleWords function from scrabbleUtils.js. In the figure below, a random element from bestPossibleWords is displayed as the hint. The image below illustrates this.  "},{"title":"🚀 Exceeding Standards 🚀​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#-exceeding-standards-","content":"Exceeding Standards is considered A-quality work. If you have satisfied the Meeting Standards level of this assignment and you want to go above and beyond, you can try to do one or all of the following: Add persistence to the Rack so that it is saved and restored when the page is reloaded. The implementation above only saves and restores the Game state, which means the rack is reset with different tiles every time the page is reloaded.Add a random button to the controls. When clicked, it will randomly place a word on the board. The word should be randomly chosen from the list of words returned by bestPossibleWords. The word should be placed in a random location on the board, and should be placed in a random orientation (horizontal or vertical). The word should be placed only if it can be constructed from the available tiles. If it cannot be constructed, the random button should do nothing. If it can be constructed, the word should be placed on the board, and the tiles used should be removed from the available tiles. The rack should then be updated with new tiles from the bag. The random button should be disabled until the user has played a word. This will prevent the user from being able to use the random button to get a new rack of tiles without playing a word. You are always welcome to try something else that is not listed here. The sky is the limit! Just make sure you document what you did in the associated submission form. You will only receive credit for the Exceeding Standards level of work if you have completed the Meeting Standards level of work. Do not attempt to complete the Exceeding Standards level of work until you have completed the Meeting Standards level of work as it will be ignored. "},{"title":"🕊️ Approaching Standards 🕊️​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#️-approaching-standards-️","content":"Approaching Standards is considered C-quality work. This level of work indicates that you are not quite meeting the standards for the assignment, but you are making progress. You should be able to complete the assignment with some guidance and/or additional work. You have demonstrated some understanding of the concepts, but you haven't completely showed that you understand the concepts entirely. You are likely to struggle on future assignments and/or subsequent courses that have this course as a prerequisite. If you struggled with this assignment, but you understand the concepts and have some understanding of how to solve it, but your application of that understanding is not quite there, incomplete, or incorrect, then your score is at the Approaching Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"🛟 Below Standards 🛟​","type":1,"pageTitle":"Hw4: Persistence & Hints","url":"/docs/homework/persistence-and-hints/#-below-standards-","content":"Below Standards is considered D-quality work. This level of work indicates that you are not meeting the standards for the assignment. You do not understand the concepts and/or you have not demonstrated any understanding of the concepts. You have not made any significant progress on the assignment. You are likely to significantly struggle on future assignments and/or subsequent courses that have this course as a prerequisite. If you struggled with this assignment and you do not understand how to solve it, do not understand where to start, or even entirely understand the code provided or the code you wrote, your score is at the Below Standards level. You should consider seeking help from another student in the class, a TA/UCA, or the instructor. "},{"title":"Hw3: Rack & Render","type":0,"sectionRef":"#","url":"/docs/homework/rack-and-render/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection Survey associated with this assignment. A link to this survey can be found on the course LMS. "},{"title":"Overview​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#overview","content":"Hey there, Scrabble enthusiasts! Get ready for the second part of our thrilling Scrabble assignments series! We're excited to help you learn all the pieces of modern web development while creating a fully functional Scrabble game. This assignment is going to be a blast as you dive into writing the game logic using the Game class and Rack class. But that's not all - you'll also get to use JavaScript to dynamically generate HTML and see the Scrabble board come to life in your browser! Get ready for an amazing experience that will boost your web development skills and leave you feeling pumped! Let's go! In particular, this is what your web application will resemble in the end:   "},{"title":"GitHub Classroom and Workflow​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#github-classroom-and-workflow","content":"All homework assignments use GitHub Classroom. To start this assignment, you must click on the GitHub Classroom link and accept the assignment to create your initial GitHub repository. You must then use the git clone command to clone that repository to your local computer to begin work. If you forget how to do this, refer to the first homework assignment and related material. We recommend the following workflow to complete homework assignments: Accept the GitHub Classroom link Clone your repository to your local computer Do the following until the assignment is complete A. Make incremental required additions/edits/changes to the source code B. Add those changes to your repository: `git add .` C. Commit those changes: `git commit -m &quot;a short message about changes&quot;` D. Push those changes to GitHub: `git push`  You are also welcome to use use GitHub Desktop and/or VSCode to do this, but we highly encourage you to become familiar with the command line usage first as this is 100% expected in industry and academia.  "},{"title":"General Guidelines​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#general-guidelines","content":"Here are a few general guidelines for this assignment: Use console.log to print values to the browser console. This is a cheap way to ensure that your code is doing what you think it is doing. If nothing displays in the browser window, it is likely that there is an error in your code. Open the console and see if there was an error. It will be helpful to come up with test cases using console.assert. This will give you some assurance that your code is working properly. We encourage you to share test cases that you develop with others taking this class. This will make everyone’s code better and is how quality assurance (QA) can work in practice. We will be spot checking your code for good coding practices. It is expected your code does not contain (1) extraneous variables/code, (2) missing semicolons, (3) missing curly braces, and (4) use of double equals. Furthermore, you should use whitespace consistently and make the code legible. Many of these issues will be recognized by VSCode and either suggested as corrections or automatically corrected when you save your code. Write code in small increments, continually verify that it is working. It is strongly encouraged that you write your code in small increments and test (or print) that code at each step of the way. Do not write an entire application and then see if it works. If you can verify that your code is working each step of the way, then you can be confident to extend it further. Please review the collaboration policy in the Syllabus for further information on what you can and cannot do in terms of sharing of work.  "},{"title":"Starter Code​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#starter-code","content":"The starter code provided below is a skeleton of the code you will be writing. Here is a brief description of each of the files: README.md: this file contains markdown text; always included in a git repository.main.js: this is the main entry point into the application; loaded by index.html.game.js: contains code that represents a scrabble game board.rack.js: contains code that represents a rack of tiles used by a player.scoring.js: contains code that implements the scoring for the scrabble game.scrabbleUtils.js: this file contains the utility functions you wrote in the previous homework. It is not used in this homework. You are welcome to copy your implementation here.shuffle.js: used to shuffle the game tiles.test.js: contains your tests for game.js and rack.js.dictionary.js: This file contains the dictionary of words that will be used in the scrabble game.index.html: this file is used to display the scrabble board and user interfacemain.css: contains the CSS for this web application To run this &quot;application&quot; it is recommended that you use the Live Server VSCode extension. You simply right-click on the index.html file and select &quot;Open with Live Server&quot;. This will automatically run a web server on your local machine and point your browser to the local server which will load the index.html file into the browser. info Please complete all of the TODOs in the code.DO NOT DELETE THE TODO COMMENTS IN THE STARTER CODE "},{"title":"Part 1: The Game Class​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#part-1-the-game-class","content":"You will first implement a Game class that will represent (1) a physical Scrabble board and (2) a bag of tiles. The state of the Game class must include a 2-dimensional 15x15 grid/array representing the state of the playing board and an array of 100 tiles for each letter tile in the game. We provide you with some starter code to get you going. Please complete the following in the game.js file: "},{"title":"TODO #1: Game Class Constructor​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-1-game-class-constructor","content":"(game.js) In the constructor, initialize the bag of tiles as an array of 100 tiles for each letter tile (represented simply as a string of 1 characters) in the game. You will need to take into account the frequency of each letter in the English version to ensure that you have the correct number of tiles for each letter. Once the array has been properly initialized, it should be shuffled using the Fisher-Yates shuffle algorithm we have provided in shuffle.js. You should store this bag of tiles as an instance variable of the Game class.(game.js) In the constructor, create a 15x15 2-dimensional grid/array representing the physical Scrabble game board. This is where tiles will eventually be played. When there is an intentional absence of a value, it is idiomatic in JavaScript to use the null value. Since the board is empty when a new Game is constructed, each location in the 15x15 grid should be initialized to the null value. info Look for “TODO #1” in game.js and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"TODO #2: Game Play​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-2-game-play","content":"The Game class has a playAt method which simulates a player playing a word on the board. The signature of this method is: playAt(word, position, direction)  This method has three parameters: word, position, and direction. The word parameter is a string which represents the word to be played on the board, the position is an object of two numbers, where {x:1, y:1} is the top-left corner of the board, and the direction, which is a boolean, where true is horizontal and false is vertical. The goal of this method is to: Determine if the word can be played on the board at the position and direction (i.e., it can’t overlap existing words or go outside of the game board).If it can be placed on the board, it places it on the board at the given position and directions.If it can be placed on the board, a score is computed and returned as the return value of the method. You will notice that the general algorithm already exists in this method. However, it makes calls to other methods to accomplish the task. In particular, it calls _canBePlacedOnBoard and _placeOnBoard, to determine if the word can be placed on the board and then places it on the board if it can. Lastly, if the word can be placed, it calls scoring.score to return the word score. We provide the scoring rules in scoring.js so you need not worry about that, but your job is to implement the logic of the other two methods. Complete the following: (game.js) In _canBePlacedOnBoard, determine if the word can be placed on the board. For now, you do not need to consider words that intersect. That is, a word can be placed on the board if all the grid locations are empty. This method returns true if the word can be placed; false otherwise.(game.js) In _placeOnBoard, update the game grid with the letters of the word. This method has no return value. info Look for “TODO #2” in game.js and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"TODO #3: Taking Tiles from the Bag​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-3-taking-tiles-from-the-bag","content":"The Game class has a takeFromBag method which simulates a player taking the first n tiles from the tile bag and returning them. If n is greater than the number of remaining tiles, this removes and returns all the tiles from the bag. If the bag is empty, this returns an empty array. info Look for “TODO #3” in game.js and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"Part 2: The Rack Class​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#part-2-the-rack-class","content":""},{"title":"TODO #4: Updating Available Tiles from the Bag​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-4-updating-available-tiles-from-the-bag","content":"Next, you will complete the implementation of the Rack class meant to represent the tiles a single player has in front of them. The rack holds the available tiles a player has and includes a takeFromBag method, which given a number n and a Game object, takes n tiles from the games’ bag (by calling the Game object's takeFromBag method). This method updates the player’s available tiles with the n tiles it took from the game’s bag. info Look for “TODO #4” in rack.js and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"Part 3: Rendering the Board​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#part-3-rendering-the-board","content":"Ok, here comes the fun part. After you have verified that your implementation for Part 2 and Part 3 are working (and you really should do this!), you are ready to implement the actual beginning of the user interface (UI). The UI is going to render the 15x15 game board grid along with the controls that will allow us to place words on the board (see the image at the start of this document). "},{"title":"TODO #5: Render the Board​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-5-render-the-board","content":"The Game class in game.js includes a render method. The render method is where you will dynamically create DOM elements to represent the scrabble game board. This method takes a single parameter, element, which is the DOM element object where the game board will be rendered into. The creation of the Game object and the calling to its render method are done in main.js, which is executed by a &lt;script&gt; tag in index.html. We have provided the basic machinery which you should read over and understand. Your job is to implement the render method to display the board. You should proceed in the following steps to incrementally render the game board: (game.js) Render the 15x15 grid using CSS grids, which you must generate programmatically from JavaScript (the HTML file cannot contain any grid items!). You should do this using the grid that you maintain in the Game class. We have defined a board id and grid-item class in main.css to help with the styling of the board.(game.js, main.css, scoring.js) After you are able to render the board, extend your implementation to color the special tiles (those that multiply a letter or a word). The same special tiles should be the same color. You must use classes and CSS styles to accomplish this. You will see some classes already defined in the main.css file that correspond to the special tiles. You will need to fill in the styling information. You should also use the scoring.label method to get a square’s label which corresponds to the same name as the CSS classes. This will help with generating the appropriate styles for each grid item. info Look for “TODO #5” in game.js and main.css and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"TODO #6: Implement UI Controls​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#todo-6-implement-ui-controls","content":"Lastly, you need to implement the user interface (UI) controls for the Scrabble game. The UI controls include a text box to enter in the word to play, The x and y coordinate of the word on the board, the direction as a drop down box, and a button to play the word:  Do the following to implement the controls: (index.html) Add the controls as seen above using the appropriate HTML elements.(main.js) Add an event listener to the “Play!” button that will retrieve the values from the UI controls, call the Game object’s playAt method, and then call the Game object’s render method. If all goes well, after you click on the “Play!” button the game should display the word in the grid. info Look for “TODO #6” in index.html and main.js and complete the implementation!Make small incremental changes and print values out to test your implementation! Tips and Frequency Asked Questions There are currently none for this TODO. "},{"title":"Self Scoring and Expectations​","type":1,"pageTitle":"Hw3: Rack & Render","url":"/docs/homework/rack-and-render/#self-scoring-and-expectations","content":"The following is a self-scoring rubric for this assignment. You should use this to help you determine if you have completed the assignment correctly. You should also use this to help you determine if you have completed the assignment to the best of your ability. If you have completed the assignment to the best of your ability, you should propose an appropriate score. If you have not completed the assignment to the best of your ability, you should propose a grade that reflects the quality of your work. exceeding expectation: you completed the TODO and it is correct. The solution was properly designed, all functions/methods/html/css appear to be implemented correctly, your code is properly indented, commented, and clearly written and designed, no redundancy in your code, no extraneous variables, loops, or conditional statements, your code is concise, easy to read, and uses the JavaScript programming language features to your advantage. Not only did you complete the assignment according to the requirements, but you went above and beyond to make it better.meeting expectation: you completed the TODO and it is mostly correct. All functions/methods/html/css appear to be implemented mostly correct, your code is mostly properly indented, commented, and clearly written, there may be some redundancy and/or extraneous variables, loops, or conditional statements.approaching expectation: you completed the TODO and it is mostly correct. All functions/methods/html/css are not implemented correctly, but it appears that you were on the right track, work is incomplete, there is effort that is noticeable, possibly confusion with what you were asked to do, needs more work.below expectation: you worked on the TODO and it is not correct. You may or may not have been on the right track, work is incomplete, difficult to understand, confusion is noticeable, not enough effort, needs substantial work.unable to evaluate: no submission, minimal changes, nothing to evaluate. info Complete the Grade Reflection Survey associated with this assignment. A link to this survey can be found on the course LMS. "},{"title":"Course Information","type":0,"sectionRef":"#","url":"/docs/information/","content":"Course Information The web is arguably today's most important application platform. Web browsers run on practically every device, and even many phone applications are in fact web applications under the covers. This course will cover a broad range of client-side web technologies, including HTTP itself, HTML5, CSS, and JavaScript; it will additionally cover key concepts for the server side of web applications, including key value stores and SQL servers. This course will also cover key concepts and technologies including AJAX, JavaScript libraries (e.g., jQuery), and web security. This course is hands-on and heavily project-based; students will construct a substantial dynamic web application based on the concepts, technologies, and techniques presented during lectures and in readings. This course satisfies the IE Requirement.","keywords":""},{"title":"Hw2: Scrabble Starter","type":0,"sectionRef":"#","url":"/docs/homework/scrabble-starter/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#overview","content":"This is the first part of a series of assignments around the game of Scrabble. We hope that it will be a fun experience in progressively learning all the pieces surrounding modern web development, to engineer a fully functional game. In this assignment, you will build a collection of functions that we will use in future homework to build a (mostly) complete scrabble game web application.  "},{"title":"GitHub Classroom and Workflow​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#github-classroom-and-workflow","content":"All homework assignments use GitHub Classroom. To start this assignment, you must click on the GitHub Classroom link and accept the assignment to create your initial GitHub repository. You must then use the git clone command to clone that repository to your local computer to begin work. If you forget how to do this, refer to the first homework assignment and related material. We recommend the following workflow to complete homework assignments: Accept the GitHub Classroom link Clone your repository to your local computer Do the following until the assignment is complete A. Make incremental required additions/edits/changes to the source code B. Add those changes to your repository: `git add .` C. Commit those changes: `git commit -m &quot;a short message about changes&quot;` D. Push those changes to GitHub: `git push`  You are also welcome to use use GitHub Desktop and/or VSCode to do this, but we highly encourage you to become familiar with the command line usage first as this is 100% expected in industry and academia.  "},{"title":"General Guidelines​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#general-guidelines","content":"Here are a few general guidelines for this assignment: Use console.log to print values to the browser console. This is a cheap way to ensure that your code is doing what you think it is doing. If nothing displays in the browser window, it is likely that there is an error in your code. Open the console and see if there was an error. It will be helpful to come up with test cases using console.assert. This will give you some assurance that your code is working properly. We encourage you to share test cases that you develop with others taking this class. This will make everyone’s code better and is how quality assurance (QA) can work in practice. We will be spot checking your code for good coding practices. It is expected your code does not contain (1) extraneous variables/code, (2) missing semicolons, (3) missing curly braces, and (4) use of double equals. Furthermore, you should use whitespace consistently and make the code legible. Many of these issues will be recognized by VSCode and either suggested as corrections or automatically corrected when you save your code. Write code in small increments, continually verify that it is working. It is strongly encouraged that you write your code in small increments and test (or print) that code at each step of the way. Do not write an entire application and then see if it works. If you can verify that your code is working each step of the way, then you can be confident to extend it further. Please review the collaboration policy in the Syllabus for further information on what you can and cannot do in terms of sharing of work.  "},{"title":"Starter Code​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#starter-code","content":"The starter code provided below is a skeleton of the code you will be writing. Here is a brief description of each of the files: dictionary.js: This file contains the dictionary of words that will be used in the scrabble game.index.html: this file contains some HTML code that is used to run the scrabbleUtilsTest.js file. There is nothing you need to do with this file.README.md: this file contains a brief description of the project. All GitHub repositories should have this file.scrabbleUtils.js: this file contains the functions you will be writing. You will need to fill in the TODO's with your own code. The TODO's are marked with a // TODO #k comment, where k is the number of the TODO.scrabbleUtilsTest.js: this file contains some test cases that will be used to test your code. You should add your own tests – this is what every good programmer should do. This file will be run when the index.html file is loaded into the browser. To run this &quot;application&quot; it is recommended that you use the Live Server VSCode extension. You simply right-click on the index.html file and select &quot;Open with Live Server&quot;. This will automatically run a web server on your local machine and point your browser to the local server which will load the index.html file into the browser.  Please complete all the TODOs in the code. "},{"title":"What you need to do​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#what-you-need-to-do","content":""},{"title":"TODO #1: Word Checker​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-1-word-checker","content":"In Scrabble, a player has a collection of tiles where each tile is bearing a single character (the letter) as depicted here:  The goal of the game is to form words from these tiles held in a rack that are valid according to the rules of the game. To implement Scrabble as a web application we will need to implement the game using data and functionality in the JavaScript programming language. The first function we need to write is the canConstructWord function which can be found in the scrabbleUtils.js file. This function is used to perform one of the most important parts of the game which is to determine whether a player has the necessary tiles to construct a given word. The signature of this function looks like this: function canConstructWord(availableTiles, word)  This function has two parameters: the available tiles the player has (and how many) and a word the player wants to construct. The former is an object mapping letters to their frequencies. That is, the properties are the letters, and the values of those properties are the number of tiles the player has in their rack. The latter is simply a string. Scrabble also has blank “wildcard” tiles that we will represent with the ‘*’ (asterisk) character. A wildcard tile can be used in place of any character. Additional specifications for this function include: You may not modify the function arguments.You can assume the letters in the availableTiles object are always lowercase.You can assume that the word string is always lowercase. Here is an example of how you call this function: canConstructWord({ a: 1, c: 2, t: 1 }, 'cat'); // =&gt; true canConstructWord({ *: 1, c: 2, t: 1 }, 'cat'); // =&gt; true  This function is labeled as TODO #1 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function.  "},{"title":"TODO #2: Base Score Calculator​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-2-base-score-calculator","content":"The next function we need to write is the baseScore function which is used to calculate the base score of a word. The signature of this function looks like this: function baseScore(word)  This function has one parameter: word. The word is a string. The base score of a word is the sum of the scores of each letter in the word. For example, the base score of the word ‘cat’ is 3 + 1 + 1 = 5, if the letters ‘c’, 'a' and 't' have the scores 3, 2 and 1, respectively. This function returns the base score of the word. The number of letters and the associated scores for each letter are shown in the list below formatted as POINTS: LETTER × COUNT. That is, the number of points for each letter is on the left and the letter is on the right along with the number of those letter tiles that are available in the scrabble game. 0 points: blank tiles x21 point: E ×12, A ×9, I ×9, O ×8, N ×6, R ×6, T ×6, L ×4, S ×4, U ×42 points: D ×4, G ×33 points: B ×2, C ×2, M ×2, P ×24 points: F ×2, H ×2, V ×2, W ×2, Y ×25 points: K ×18 points: J ×1, X ×110 points: Q ×1, Z ×1 You can also find the scoring on Wikipedia. Additional specifications for this function include: You may assume that the word parameter is non-emptyYou may assume that the word parameter is all lowercaseYou may assume that the word parameter could contain a wildcard character There are many ways in which to implement this function. We suggest using an object mapping characters to their scores. This function is labeled as TODO #2 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function. Tips and Frequency Asked Questions You can assume that an input to baseScore() can contain 1-2 wildcard characters, and this should be factored into the score calculation For example, if I input &quot;cat&quot;, I should get 5 points (3 points for &quot;c&quot;, 1 point for &quot;a&quot;, and 1 point for &quot;t&quot;). If I input &quot;c*t&quot;, I should get 4 points (3 points for &quot;c&quot;, 1 point for &quot;a&quot;, and 0 points for &quot;*&quot;).  "},{"title":"TODO #3: Possible Words​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-3-possible-words","content":"An important goal the human player has in the game of Scrabble is to find a word that they know that can be constructed from the tiles they have in their rack in the context of the words that have already been played on the board. Although this can be a challenge for the human player (depending on their knowledge of words), it is not so hard for a computer to take a giant corpus of words and given a rack of tiles determine the possible words that can be constructed from those tiles. The next function we want to write is the possibleWords function which is used to find all possible words that can be constructed from the tiles the player has in their rack. This function could be used to check if a word played by a player is an actual word (of course this depends on how extensive our dictionary is). The signature of this function looks like this: function possibleWords(availableTiles)  This function has one parameter: the available tiles the player has. The available tiles are an object mapping letters to their frequencies. That is, the properties are the letters, and the values of those properties are the number of tiles the player has in their rack. Additional specifications for this function include: You may not modify the function argument.You can assume the letters in the availableTiles object are always lowercase. This function is labeled as TODO #3 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function.  "},{"title":"TODO #4: Best Possible Words​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-4-best-possible-words","content":"The next function we want to write is the bestPossibleWords function which is used to find the best possible words that can be constructed from the tiles the player has in their rack. This function could be used to determine the best possible words that the player can construct from their rack. As we will see in later homework, this function is used to give the player a list of words that they can construct from their rack. The signature of this function looks like this: function bestPossibleWords(availableTiles)  Additional specifications for this function include: You may not modify the function argument.You can assume the letters in the availableTiles object are always lowercase. This function is labeled as TODO #4 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function. Tips and Frequency Asked Questions availableTiles in bestPossibleWords() can also contain wildcards, which should be taken into account when returning the best possible words that can be constructed For example, if I have the tiles {c: 1, t: 1, *: 1}, I should be able to construct the word &quot;cat&quot; by using those three tiles. When considering the highest scoring words I can construct with these tiles, the word &quot;cat&quot; then should be worth 4 points here (3 points for &quot;c&quot;, 1 point for &quot;t&quot;, 0 points for &quot;*&quot;, not 5 points. You will need to handle the logic for figuring out which letters of a word the potential wildcards are replacing, and then use baseScore() to see how much it is worth.  "},{"title":"TODO #5: README.md​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-5-readmemd","content":"It is always important to update a README.md file in your GitHub repository. This final TODO asks you to provide a brief description in the README.md file of the changes you made to the code that was provided. Briefly describe the implementation of your functions in a paragraph or two of text. Please use complete sentences and proper grammar.  "},{"title":"Tips​","type":1,"pageTitle":"Hw2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#tips","content":"Write your code in small increments. This will help you identify mistakes early. The more code you write before you test it makes it more difficult to identify mistakes.You should commit your code to git regularly. This will help you keep track of your progress. You can see how many commits you have made by using git log in the terminal.You should push your code to GitHub regularly. This will allow the course staff to easily see your progress and see your code if you are having problems.Use console.log for debugging purposes. The output of this function will be displayed in the browser console.Use console.assert for testing your code. Write additional tests to the scrabbleUtilsTest.js file. Share your tests with your classmates. "},{"title":"AI Assistants","type":0,"sectionRef":"#","url":"/docs/information/ai-assistants/","content":"AI Assistants As computer science students, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science.","keywords":""},{"title":"Office Hours","type":0,"sectionRef":"#","url":"/docs/information/office-hours/","content":"","keywords":""},{"title":"Sunday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#sunday","content":"No office hours offered currently at this time. "},{"title":"Monday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#monday","content":"Ashir Imran (Head UCA): 11 AM - 1 PM, zoomLiam Neal Reilly (UCA): 4 PM - 5 PM, CS207-3Seth Franklin (UCA): 2:45 PM - 3:45 PM, zoom "},{"title":"Tuesday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#tuesday","content":"Tim Richards (INSTRUCTOR): Make an appointment, LGRC A351ASabrina Liang (TA): 11:30 AM - 2:30 PM, LGRT 222Isi Bernoff (UCA): 10 AM - 11 AM, zoomChou Heng Ieong (UCA): 1 PM - 2 PM, zoomAnshul Vemulapalli (UCA): 2 PM - 3 PM, LGRT-222Stanley Araki (UCA): 5:30 PM - 6:30 PM, zoom "},{"title":"Wednesday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#wednesday","content":"Harrison Geissler (TA): 9 AM - 12 PM, CS207Sridhama Prakhya (TA): 1 PM - 4 PM, zoomSeth Franklin (UCA): 2:45 PM - 3:45 PM, zoomChou Heng Ieong (UCA): 11 AM - 12 PM, zoom "},{"title":"Thursday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#thursday","content":"Tim Richards (INSTRUCTOR): Make an appointment, LGRC A351ARajasi Desai (Head UCA): 4:30 PM - 6:30 PM, LGRT 223/225Isi Bernoff (UCA): 10 AM - 11 AM, zoomAnshul Vemulapalli (UCA): 3 PM - 4 PM, zoomStanley Araki (UCA): 5:30 PM - 6:30 PM, zoom "},{"title":"Friday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#friday","content":"Liam Neal Reilly (UCA): 10 AM - 11 AM, CS207-3 "},{"title":"Saturday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#saturday","content":"No office hours offered currently at this time. "},{"title":"GitHub Classroom","type":0,"sectionRef":"#","url":"/docs/information/github-classroom/","content":"GitHub Classroom We will be using GitHub Classroom to distribute and collect assignments. GitHub Classroom is a web-based platform for educators to manage and track student assignments. It integrates with GitHub, the popular code hosting and collaboration platform, to provide a streamlined and efficient workflow for educators and students. For a web programming class, GitHub Classroom is particularly useful because it allows educators to set up and distribute assignments, track student progress, and provide feedback all within one platform. Students can access their assignments and submit their work directly on GitHub, providing an easy-to-use environment for both the students and the educator. With GitHub Classroom, educators can also ensure that each student has a unique repository for their work, which can be used to keep track of changes and version history. This makes it easier to review and provide feedback on student work and helps to avoid potential conflicts or merge conflicts. Additionally, GitHub Classroom provides a convenient and secure way for students to submit their work, and provides a platform for peer review, where students can see the code of their classmates and learn from it. This can foster a collaborative learning environment and encourage students to engage with each other’s work. Overall, GitHub Classroom is a valuable tool for web programming classes because it provides a simple and effective solution for managing student assignments and tracking progress, while also promoting collaboration and encouraging learning through peer review.","keywords":""},{"title":"Piazza","type":0,"sectionRef":"#","url":"/docs/information/piazza/","content":"Piazza We will be using Piazza for you to ask questions and receive answers Welcome to the world of Piazza! As you embark in this course, you will be using an exciting tool that will greatly enhance your learning experience: the Piazza discussion forum. Piazza is a powerful and efficient tool that provides a platform for students to ask questions and receive answers in a collaborative and supportive environment. This asynchronous tool allows students to interact with their classmates and instructors at any time, from anywhere, making it a convenient and flexible way to stay connected and engaged with the course material. One of the key advantages of Piazza is that it enables students to get answers to their questions quickly and easily. Whether you have a question about a specific concept or need clarification on a homework assignment, Piazza provides a space where you can ask and receive answers from your classmates and instructors. Additionally, Piazza fosters a collaborative learning environment, where students can learn from each other and share their insights and experiences. Another advantage of Piazza is that it is an asynchronous tool, meaning that students can access it at any time and participate in discussions at their own pace. This allows students to fit their learning into their busy schedules and can be especially beneficial for those who have other commitments outside of class. However, like any tool, Piazza also has its disadvantages. One disadvantage is that students may not receive a prompt response to their questions, especially if they are posted during the weekend when instructors may not be as readily available. Additionally, the platform can be overwhelming, with a large amount of information and discussions taking place at once, making it difficult for students to keep up and find the information they need. Despite these challenges, we believe that Piazza is an incredibly valuable tool for students and we encourage you to make the most of it. We will respond to your questions and participate in discussions as soon as we can during the week, and while we may be less responsive on the weekend, we will do our best to support you and answer your questions in a timely manner. So let's dive in and make the most of this exciting and dynamic platform! Remember, the road to success is paved with questions, and Piazza provides the perfect platform for asking, exploring, and learning. We highly encourage you to also answer questions posted by your fellow students to get the most out of this platform!","keywords":""},{"title":"Course Staff","type":0,"sectionRef":"#","url":"/docs/information/staff/","content":"","keywords":""},{"title":"Instructor​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#instructor","content":"Tim Richards Tim Richards is a senior teaching faculty member at the Manning College of Information and Computer Sciences, where he teaches a variety of courses and dabbles in research. He is the course administrator for this course and is dedicated to teaching computer science and enjoys sharing his passion with students. "},{"title":"Teaching Assistance​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#teaching-assistance","content":"Sabrina Liang First year master student in CS, interest in data science and data visualization. I enjoy knitting and painting, and recently started keeping plants. (she/her) Harrison Geissler Graduate 1st Year MS/PhD Student in CS, BINDs lab, with interest in RL/Convex Optimization. I love hiking, walking as well as Dungeons &amp; Dragons. Sridhama Prakhya Second-year graduate student interested in ML, NLP, and computational neuroscience. I enjoy music, hiking, reading, soccer, chess, and playing violin. (he/him) "},{"title":"Undergraduate Course Assistants​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#undergraduate-course-assistants","content":"Ashir Imran Senior CS Major, interested in Full Stack dev and AI/ML. For fun I like to play video games (he/him) (Head UCA) Rajasi Desai Senior dual degree in CS &amp; Psych with a Math minor. I love to learn new things for fun and also I dance in various campus events as part of KDC. (she/they) (Head UCA) Isi Bernoff Senior CS transfer, interested in web dev and UI/UX. I enjoy classical music and I started playing the piano during lockdown (she/her) Liam Reilly Senior CS, interested in full-stack development and robotics. My biggest hobby is the card game Magic. (He/him) Anshul Vemulapalli Junior in CS, interested in Backend dev, ML, and Computer Vision. I enjoy speed-running Hitman, and playing drums (he/him) Seth Franklin Senior CS and Linguistics double major, interested in DevOps, cloud computing (AWS), and NLP. I enjoy drawing, reading, running, and listening to music (pop, rap, k-pop, grunge). (he/him) Chou Heng Ieong Senior CS, interested in full stack development. I enjoy playing basketball, working out, hiking, as well as eating. Stanley Araki Senior Computer Science major interested in backend development. I enjoy hanging out with friends, listening to music, and cooking! "},{"title":"Schedule","type":0,"sectionRef":"#","url":"/docs/information/schedule/","content":"","keywords":""},{"title":"Lecture Schedule​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#lecture-schedule","content":"Tu 2/7 - L01 Course IntroductionTh 2/9 - L02 JavaScript IntroTu 2/14 - L03 JavaScript Objects, Arrays, FunctionsTh 2/16 - L04 JavaScript ObjectsTu 2/21 - L05 JavaScript ClassesTh 2/23 - L06 Modules, HTML, DOMTu 2/28 - Class cancelled due to weatherTh 3/2 - L07 DOM EventsTu 3/7 - L08 Basic CSSTh 3/9 - L09 CSS and DOM SurgeryTu 3/14 - No Class, Spring RecessTh 3/16 - No Class, Spring RecessTu 3/21 - L10 Browser Local StorageTh 3/23 - L11 Networking, HTTPTu 3/28 - L12 Asynchrony, Event ModelTh 3/30 - L13 REST and FetchTu 4/4 - L14 CRUD #1Th 4/6 - L15 CRUD #2Tu 4/11 - L16 RoutingTh 4/13 - L17 ACID and SQLTu 4/18 - No Class, Patriot’s DayTh 4/20 - L18 Node and SQLTu 4/25 - L19 NoSQLTh 4/27 - L20 AuthenticationTu 5/2 - L21 ProjectTh 5/4 - L22 ProjectTu 5/9 - L23 ProjectTh 5/11 - L24 ProjectTu 5/16 - L26 Project Showcase "},{"title":"Lab Schedule​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#lab-schedule","content":"All lab assignments are due the same day by 11:59 unless otherwise specified. Fr 2/10 - B01 Git and GitHub BasicsFr 2/17 - B02 Git Commands and Repository CreationFr 2/24 - B03 Advanced Git UsageFr 3/3 - B04 Pr2 Creative Idea WorkFr 3/10 - B05 Event HandlingFr 3/24 - B06 Pr3 UI Design WorkFr 3/31 - B07 Fetch PracticeFr 4/7 - B08 CRUD PracticeFr 4/14 - B09 Advanced ExpressFr 4/21 - B10 Pr4 Front-End WorkFr 4/28 - B11 Pr5 Back-End WorkFr 5/5 - B12 Pr5 Back-End WorkFr 5/12 - B13 Pr5/Pr6 Completion Work "},{"title":"Exercises​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#exercises","content":"All exercise assignments are due the following day by 11:59 unless otherwise specified. Ex1 Letter Frequency (A: Th 2/9, D: Mo 2/13)Ex2 Letter Histogram (A: Tu 2/14, D: We 2/15)Ex3 Decoder Ring (A: Th 2/16, D: Fr 2/17)Ex4 Decoder Ring Class (A: Tu 2/21, D: We 2/22)Ex5 Decoder Web Page (A: Th 2/23, D: Tu 2/28)Ex6 Interactive Decoder (A: Th 3/2, D: Tu 3/7)Ex7 2x2 Checkerboard (A: Tu 3/7, Tu D: 3/21)Ex8 8x8 Chessboard (A: Th 3/9, D: Tu 3/21)Ex9 Persistent Encoder (A: Tu 3/21, D: Tu 3/28)Ex10 Run Server (A: Th 3/23, D: Tu 3/28)Ex11 REST and Fetch (A: Th 3/30, D: Tu 4/4)Ex12 CRUD #1 (A: Th 3/30, D: Tu 4/4)Ex13 CRUD #2 (A: Tu 4/4, D: Tu 4/11)Ex14 Routing (A: Th 4/6, D: Tu 4/11) "},{"title":"Homework​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#homework","content":"All homework assignments are due by 11:59 unless otherwise specified. Hw1 GitHub Classroom (A: 2/9, D: 2/16)Hw2 Scrabble Starter (A: 2/16, D: 3/7)Hw3 Rack &amp; Render (A: 3/7, D: 3/28)Hw4 Persistence &amp; Hints (A: 3/28, D: 4/13)Hw5 Fetch, Multiplayer, Server (A: 4/13, D: 5/4)Hw6 Fetch, Scoreboard, Deploy (A: 5/4, D: 5/17) "},{"title":"Project​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#project","content":"All project assignments are due by 11:59 unless otherwise specified. Pr1 Join Team (A: 2/21, D: 2/28)Pr2 Idea (A: 2/28, D: 3/7)Pr3 UI Design (A: 3/7, D: 4/3)Pr4 Front-End (A: 4/5, D: 4/25)Pr5 Back-End (A: 4/25, D: 5/25)Pr6 Showcase (A: 4/25, D: 5/17) "},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/docs/information/syllabus/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#description","content":"The web is arguably today's most important application platform. Web browsers run on practically every device, and even many phone applications are in fact web applications under the covers. This course will cover a broad range of client-side web technologies, including HTTP itself, HTML5, CSS, and JavaScript; it will additionally cover key concepts for the server side of web applications, including key value stores and SQL servers. This course will also cover key concepts and technologies including AJAX, JavaScript libraries (e.g., jQuery), and web security. This course is hands-on and heavily project-based; students will construct a substantial dynamic web application based on the concepts, technologies, and techniques presented during lectures and in readings. This course satisfies the IE Requirement. "},{"title":"Prerequisites​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#prerequisites","content":"COMPSCI 220 (or 230) with a grade of C or better, or INFO 248 and COMPSCI 186/187, with a grade of C or better in each. This course assumes a good understanding of programming at the 187 (data structure implementation) or 186 level (using data structures), basic command line usage, understanding of version control systems (e.g., git), and object-oriented programming concepts and techniques are helpful. Previous JavaScript background, while not required, is also helpful. We also assume a level of maturity for success in working in a team-based environment. "},{"title":"Statement of Inclusivity​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#statement-of-inclusivity","content":"The staff for this course support the UMass commitment to diversity, and welcome individuals regardless of age, background, citizenship, disability, sex, education, ethnicity, family status, gender, gender identity, geographical origin, language, military experience, political views, race, religion, sexual orientation, socioeconomic status, and work experience. In this course, each voice in the classroom has something of value to contribute. Please take care to respect the different experiences, beliefs and values expressed by students and staff involved in this course. "},{"title":"Required Text​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#required-text","content":"No required text. All material will be provided through lectures notes, slides, examples, code, and any other resources deemed as relevant to the topics covered in this course. "},{"title":"Course Development Environment​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-development-environment","content":"Given that this is a programming intensive course, it is important to highlight the development environment! Generally, most of what we cover in this course is available on all the typical operating systems. However, the team project allows you to explore additional environments that may have specific OS requirements. You are welcome to use those additional libraries/tools; however, you will not receive direct support for what you use. It is your responsibility for the installation, setup, and use of those additional components. You are welcome to use any editor, IDE, or tools to explore this material. We strongly recommend that you use Visual Studio Code. "},{"title":"Other Material​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#other-material","content":"It is assumed that you have a computer to use for assignments in this course. You should make sure to commit your work frequently to GitHub. We will not accept excuses for missing or accidental deletion of work. You may only use GitHub for storing your work on individual assignments if you are using a private repository. Use of public repositories to store assignment solutions on GitHub is considered cheating and will result in a failure for this course. You will be required to store and share your team project work on a public repo! "},{"title":"Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#learning-outcomes","content":"After this course, students will be able to: Apply HTML to structure content rendered in a browserApply CSS to style content in a browser to enhance the usability of an applicationApply the JavaScript programming language to solve problems in a web environmentApply the fundamental architecture of a front-end web applicationApply the fundamental architecture of a back-end web applicationApply the connection between front-end and back-endApply a RESTful web applicationApply the fundamental construction of a modern and complete web application "},{"title":"Integrative Experience​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#integrative-experience","content":"This course satisfies the Integrative Experience (IE) requirement. The upper-division integrative experience provides a structured context for students to reflect on their own learning and explore the connections between the broad exposure provided by General Education and the more focused exposure of their major. You can read additional details on the integrative experience website. The IE requirement is fulfilled by this course through the application of extensive team-based learning. Furthermore, this course embraces the IE through a substantial team project that is entirely student driven and explicitly integrates the material covered in this course with the experiences, learning, and knowledge attained by every unique person enrolled in this course. "},{"title":"Course Format​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-format","content":""},{"title":"Hybrid​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#hybrid","content":"This course uses a hybrid model. There are two different sections of the course that meet on Tuesdays and Thursdays respectively. You are expected to attend in person the section that you are enrolled in. During the section that you are not enrolled in, you are expected to attend on Zoom. If you have a conflict with the time of the other section, you are then expected to watch the recording of the class on your own time and complete any activity that was introduced during class. If you attend on Zoom, you will be able to ask questions by posting to the messaging system. "},{"title":"Lectures​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lectures","content":"Lectures will be led by the professor and provide a high-level overview of the course material. The presentation format will include a variety of slides, written notes, programming examples, activities, etc. All material will be available through the course learning management system site or website. You are expected to attend every lecture for your section and arrive promptly so you do not disturb others. You may use electronic devices during class, however, its use must pertain to the activity at hand. If your use of an electronic device is distracting to yourself or others, you will be asked to turn the device off. What happens if I can’t attend a lecture in person? Although we want you to attend the lecture for your section in person, we understand that sometimes that isn’t always possible. For that reason, we provide flexible options that allow you to participate. Remote Synchronous: attend the lecture remotely on Zoom and ask questions through the messaging system.Asynchronous: watch the recorded lecture at a time that is convenient for you. "},{"title":"Lab​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lab","content":"The Lab section is led by teaching assistants (TAs) for this course. There will also be undergraduate course assistants (UCA) assigned to your lab section. You are expected to attend every lab section. Labs are used to begin lab exercises in groups as well as to work on the end of semester project. Missing a lab section does not excuse you from any activities that occur during that time. Do not ask to make up any missed work during lab section time. What happens if I can’t attend a lab in person? Although we want you to attend labs in person, we understand that sometimes that isn’t always possible. For that reason, we provide flexible options that allow you to participate. Remote Synchronous: attend the lab remotely on Zoom and ask questions through the messaging system.Asynchronous: labs will not be recorded, however, you must still complete the lab activity by the assigned due date. "},{"title":"Rules for Success​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#rules-for-success","content":""},{"title":"Student Responsibilities​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#student-responsibilities","content":"If you follow these rules, your odds of learning the material and achieving a good grade in this course will improve greatly. Read the assignment documentation early and carefully.Do your work on time, submit your work on time, and make sure you submitted the correct work.Communicate with other students in the course, the professor, and other course staff for help.Be honest in the work you do and the submissions you make.Communicate with me and others in the course with respect and understanding.Do not ask to submit assignments after the due date. "},{"title":"Instructor Responsibilities​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#instructor-responsibilities","content":"You can expect from us: Timely release of course assignments.Timely release of scores achieved on course assignments.To respond to questions in the discussion forums in a reasonable amount of time during the week and normal working hours.Be respectful of your ideas and value the diversity you bring to the virtual classroom.Be open to dialogue that challenges me.Be present during my stated office hours.Ensure the proper running of the course. "},{"title":"Grading Policy​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#grading-policy","content":"The anticipated breakdown of course grades is as follows; this is subject to change. In-Class Exercises (15%)Labs (15%)Homework (40%)Team Project (30%) "},{"title":"Grading Notes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#grading-notes","content":"The numerical cutoff for final course letter grade assignment will be made after all grading is completed. As a rough guide, expect to require at least a 93 to get an A, a 90 to get an A-, an 87 to get a B+, an 83 to get a B, an 80 to get a B-, etc.Individual projects/assignments/labs will not be scaled (curved).The instructor may or may not choose to scale final grades.Final grades are assigned based on the overall weighted average as defined by the grading policy. Grades will be rounded up. For example, if you achieve an 89.93 then the final letter grade will be (for example) an A-, not a B+. "},{"title":"Ungrading​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#ungrading","content":"Ungrading, also known as assessment without grades, is a radical form of assessment that shifts the focus from evaluating students' performance based on numerical scores to fostering their learning and growth. In an ungraded environment, teachers provide regular and ongoing feedback to students on their progress and learning, rather than assigning a final grade at the end of a course or assignment. This approach empowers students to take ownership of their learning by encouraging them to set their own goals, reflect on their progress, and engage in self-assessment. By removing the pressure of grades, students are able to take risks, be creative, and collaborate with their peers, leading to deeper and more meaningful learning experiences. Additionally, ungrading can help to reduce the stress and anxiety that students often experience in a traditional graded environment and foster a positive learning culture in the classroom. This course uses ungrading. In short, the responsibility of the grade you achieve in this course is up to you. You will submit grades that you believed you achieved on each and every assignment in this course including the final project and final grade. We will choose at random some number of submissions where we will provide feedback, but no grade. You will be asked to submit an extensive self-reflection at two points during the semester on your own learning and evidence that supports that learning. We will evaluate these submissions and how they relate to your chosen grade to determine accuracy. At the end of the course, you will submit a grade that you believe accurately reflects your learning in this course. The instructor reserves the right to make modifications to your grade based on your submissions and reflections. This form of grading provides grade freedom and ownership in your own learning. If used wisely, you have the opportunity to learn without grade stress and experience a learning environment that is free and open. We trust that you will use this freedom to explore the course material and beyond in ways in which you may not have been able to otherwise. &quot;The path to true learning lies not in grades but in the journey of self-discovery. Let go of the pressure, and the knowledge will come.&quot; - Yoda "},{"title":"Assignments​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#assignments","content":""},{"title":"Exercises​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#exercises","content":"Most classes will provide time to begin exercises that will apply your understanding of the material being discussed in lecture. You are required to complete participation exercises by the stated deadline. If you are unable to attend class you are still expected to submit the activity by the deadline. They are due on the day of the next class by midnight. You are encouraged to extend these exercises with additional features to explore the material, however, know that some exercises build on previous ones. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#labs","content":"Labs serve multiple purposes in this course. You will often complete short exercises during lab that you will be due by the stated deadline. If you are unable to attend lab you are still expected to submit the activity by the deadline. You have until midnight on the day of the lab to submit. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Homework​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#homework","content":"Homework are programming assignments that reinforce material taught in class. These are longer assignments and take more time than in-class exercises. They require you to apply your understanding of the material to a programming challenge that emphasizes what you have learned during lecture and any assigned material. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Team Project​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#team-project","content":"The team project encompasses the last third of the semester - approximately 4 weeks. You will be required to work in a team of 3-4 students to design and implement a web application using the three important components of web applications including HTML, CSS, and JavaScript. The design and implementation of the application is entirely up to you, but it must solve a real-world problem, be connected to work you have done in other areas (general education), connect to your discipline (e.g., CS, Informatics) and be relatively unique as compared to other existing applications (within reason). You are allowed to use any technology as long as it relates to the material covered in class and adheres to the project requirements. Your work is subject to peer review. "},{"title":"Assignment Submission​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#assignment-submission","content":"Assignments will be submitted electronically. You are responsible for submitting your assignments by the assigned due date. The due dates for assignments will be clearly indicated on the schedule and it is your responsibility to update your own calendar so you are aware of due dates. "},{"title":"Late and Early Submissions​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#late-and-early-submissions","content":""},{"title":"Lateness General Guidelines​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lateness-general-guidelines","content":"Lateness is defined as any assignment that is outside of the stated due date requirements. We allow assignments to be submitted three days “late” after the posted due date. However, penalties might be applied (see Submission Currency below). After the three days we will not accept a submission from any assessment component. It is your responsibility for maintaining your own schedule and being prompt with your submissions. We expect that you become familiar with the course submission software and verify that your submission has been properly uploaded. We will not accept late submissions due to lack of checking on this. We assume: You are an adult and have the ability to check and verify your work has been received properly.You are capable of using GitHub, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure.You have a back-up plan in place in the event that your computer fails or your internet connection is unavailable. Make sure you have a plan B and C if your computer crashes or your internet is unavailable. This is your responsibility.To ensure that you submit projects on time you should begin them early and not wait until the last minute to submit. You will be able to submit multiple times so submit early and often to ensure you have something in before the deadline. If there are extenuating circumstances beyond your control that prevent you from completing an assignment by the posted deadline you must contact the instructor immediately using the appropriate communication channel (see Communication below). "},{"title":"Submission Currency 💵​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#submission-currency-","content":"To add some flexibility to submission deadlines, we will be using a form of “currency” in this course to earn “tokens” for submissions that are made before the day an assignment is due. If you submit an assignment before the deadline you will receive a token. You may then use a token to buy a late day allowing you to submit an assignment past the deadline. If you submit an assignment late and you run out of tokens, you may borrow tokens putting you in the negative. To get out of the hole you will need to submit subsequent assignments early to earn tokens back and pay your debt! If you complete the course with leftover tokens it will be applied to your final grade and increase your overall grade for the course. If you complete the course with negative tokens it will be applied to your final grade and decrease your overall grade for the course. Here are the rules: You start the course with 3 tokens.If you submit an assignment any day before or on the day an assignment is due you will receive a token.If you submit an assignment any day after the day an assignment is due you will pay a token for each day past the due date.You may only use tokens up to three days past the deadline of an assignment. After three days past the deadline you are no longer able to use tokens or submit an assignment late. It will be marked as missing with a 0.You can only earn a maximum of 5 tokens.Tokens can be earned on homework.Tokens can not be earned on exercises and labs.Tokens are spent on homework and exercises only. Examples: At the start of the semester Mia submits the first assignment two days early and receives a token increasing their purse to 4.In the middle of the semester Pat is late by 2 days. This uses 2 tokens from their purse. This is not bad since Pat hasn’t missed an assignment. Pat has 1 token remaining.At the end of the semester Jorge has 3 tokens and their grade is an 88. The tokens are applied and their final grade is a 91. Jorge is happy. 😃At the end of the semester Tanya has -2 tokens and their grade is a 90. The tokens are applied and their final grade is an 88. Tanya is unhappy 😔, but understands. You are ultimately responsible for maintaining your token count. We will do our best to calculate the number of tokens you have for each assignment. However, it may take a few days to do so. "},{"title":"Final Grades​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#final-grades","content":"To evaluate your understanding of the course content, we will use scores achieved on each of the above assessment components. Your final grade will convey what you know from the course and how well you know it. Missing assignments can have a dramatic impact on your final grade so it is important that you are attentive to submission deadlines and avoid any missing work. The typical breakdown of percentages and final grades for this course are A (93-100), A- (90-92), B+ (87-89), B (83-86), B- (80-82), C+ (77-79), C (73-76), C- (70-72), D+ (67-69), D (60-66), F (0-59). This grading scheme may be adjusted based on the overall performance of students in the course. "},{"title":"Communication​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#communication","content":"Email: Email should not be used. Please post privately to Instructors on Piazza (see below). In the unlikely event that you are unable to post to Piazza, please send an email to the instructor teaching your course section. Piazza: We will be using Piazza for all other communication. This online discussion forum should be your first choice for asking questions. You should check the discussion forum before asking your question to see if the same question has already been posted. We will not answer questions that have already been answered in the discussion forum. Think before you post. We expect you to do a reasonable amount of thinking to try to solve your problems before posting for help. Make sure you are articulate and clear with your post (i.e., think before you post). You should post questions related to assignments early rather than wait until the last minute. Questions that are posted very near an assignment deadline may not be answered. Course staff are expected to answer questions Monday through Friday. Do not expect prompt answers on Saturday, Sunday, and scheduled holidays and breaks. Please post with respect and kindness. Posts that are disrespectful, crude, inappropriate, or mean will not be tolerated and will be reported and result in your immediate removal from the course and a failure for the course. Lecture: You are welcome to ask questions during and after class. The course will reserve 15 minutes after class to answer any questions. After that 15 minutes you will need to remember your question and ask it on Piazza. "},{"title":"Course Support​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-support","content":""},{"title":"Office Hours​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#office-hours","content":"Office hours are times when we provide real-time access to the instructor, TAs, and UCAs. You do not need an appointment to attend office hours, attendance is optional, and all questions you have about the course are welcome. These sessions will be held at several different times during the week. Office hours will be posted on the course website. "},{"title":"Accommodations​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#accommodations","content":"The University of Massachusetts Amherst is committed to providing an equal educational opportunity for all students. If you have a documented physical, psychological, or learning disability on file with Disability Services (DS), you may be eligible for reasonable academic accommodations to help you succeed in this course. If you have a documented disability that requires an accommodation, please notify me as soon as possible so that we may make appropriate arrangements. For further information, please visit Disability Services. "},{"title":"Title IX​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#title-ix","content":"If you have been the victim of sexual violence, gender discrimination, or sexual harassment, the university can provide you with a variety of support resources and accommodations. UMass is committed to providing these resources with minimal impact and costs to survivors on a case-by-case basis. Resources are available to survivors with or without them filing a complaint. No upfront costs are charged to any currently enrolled students for University Health Services or the Center for Counseling and Psychological Health, and no fees exist for services in the Dean of Students Office, the Center for Women and Community, Student Legal Services, or by live-in residential staff. "},{"title":"Attendance and Participation​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#attendance-and-participation","content":"You are expected to attend class and lab regularly, read any assigned readings before class, and participate in class discussions and activities. Your participation will be evaluated in a variety of ways. This includes any in class activities or activities that may be given during class or lab sections. You are responsible for maintaining your own schedule and ensuring that you are present during these activities and/or complete them in a timely manner. It is generally not possible to make up missed work. "},{"title":"Course Incompletes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-incompletes","content":"Students who are unable to complete course requirements within the allotted time because of severe medical or personal problems only may request a grade of Incomplete from the instructor of the course. Incomplete grades are warranted only if a student is passing the course at the time of the request and if the course requirements can be completed by the end of the following semester. Furthermore, an incomplete will be granted if at least 75% of the work has been completed for the course. Otherwise, the recommended course of action is to withdraw and retake the course in the future. Please see the Academic Regulations Section IV Grading System and Credit Guidelines for further details. Note: an incomplete means you are on your own to complete the material agreed upon by the instructor of this course. Do not expect additional help or one-on-one teaching of the material past the course completion date. It is your responsibility to complete the remaining material. "},{"title":"Collaboration Policy​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#collaboration-policy","content":"Group Work Encouragement: Students are encouraged to work in groups to facilitate learning, knowledge sharing, and skill development. Group work will be a regular part of the course and students are expected to actively participate in it. Group work is allowed on all assignments in this course.Individual Submissions: Although group work is encouraged, each student is required to submit their own individual work based on the group collaboration. This is to ensure that each student is held accountable for their own learning and understanding of the course material.Group Responsibilities: All group members are expected to contribute equally to the group discussions and work and should be prepared to share their knowledge and skills with their peers. Group members should also be respectful of each other's opinions and work styles.Conflict Resolution: In the event of a conflict within the group, students are encouraged to communicate and resolve the issue amongst themselves. If the conflict cannot be resolved, the instructor will mediate.Credit Allocation: Credit for group work will be allocated based on each student's individual contribution to the assignment. Students will assess their own contributions to submitted assignments and determine their grades accordingly.Cheating: Cheating, including plagiarism, is not tolerated and will result in a failing grade for the assignment. All work submitted must be original and should accurately reflect the student's own understanding of the course material.Communication: Regular communication between group members is essential for successful collaboration. Students are encouraged to use online tools, such as email or group chat platforms, to stay in touch and communicate effectively. By following this collaboration policy, students will be able to work collectively while still being held accountable for their individual learning and understanding of the course material. "},{"title":"AI Assistants​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#ai-assistants","content":"As computer science students, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro/","content":"","keywords":""},{"title":"Why learn web programming?​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#why-learn-web-programming","content":"Learning web programming is essential for computer scientists, as it provides a wide array of advantages. For one, web programming gives computer scientists the chance to develop applications that can be used across multiple platforms, from desktops and laptops to mobile phones and tablets. This level of versatility is invaluable for modern software development. Moreover, web programming offers the potential for large-scale deployment, meaning that software developed with web technologies can be used by a much larger number of people than would be possible with desktop applications. In addition to its versatility and scalability, web programming also allows computer scientists to create applications with powerful data-driven features. By leveraging APIs, cloud computing, and other technologies, web programmers can create applications that can store and process vast amounts of data quickly and efficiently. These powerful applications are being used today in a variety of ways, from digital marketing and e-commerce platforms to streaming video services and online gaming. Moreover, web programming has opened up new opportunities for computer scientists to work in a global economy. As more businesses move their operations online, web developers have the unique opportunity to develop solutions that can be used by customers all over the world. Through web programming, computer scientists can create products that can be accessed from anywhere with an internet connection, allowing businesses to reach new customers in an ever-expanding market. Finally, web programming has enabled computer scientists to create applications that have had a profound effect on the world. Take for example the success of Google Maps, which revolutionized the way we navigate around cities and countries. Similarly, Twitter has completely transformed the way we communicate with each other. These examples show just how powerful and influential web applications can be when designed and developed with the right expertise. In summary, learning web programming is essential for computer scientists due to its versatility, scalability, data-driven capabilities, global reach, and ability to create solutions that can change the world. By mastering web programming skills, computer scientists can position themselves to capitalize on the lucrative opportunities of the modern technology landscape. "},{"title":"A (brief) history of the web​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#a-brief-history-of-the-web","content":"The World Wide Web, the system of interlinked hypertext documents that made the internet so accessible and usable, was invented by British computer scientist Tim Berners-Lee in 1989 while working at CERN. With the help of Robert Cailliau, they developed the HyperText Transfer Protocol (HTTP) and the HyperText Markup Language (HTML). This was a revolutionary step in the history of the internet, as it allowed websites to be easily linked together. The first web browser, Mosaic, was released in 1993 and was quickly followed by Netscape Navigator in 1994. These early browsers revolutionized the way people interacted with the internet, as it was now much easier to navigate and find information. The release of Internet Explorer by Microsoft in 1995 sparked what is known as the “browser wars”. While Microsoft managed to gain a large market share, the open-source Mozilla project (which would later become Firefox) was developed in 1998. In 1995, JavaScript was created by Brendan Eich while working at Netscape. JavaScript was originally intended to allow web developers to add interactivity and dynamism to web pages. However, it has since evolved into a powerful programming language that can be used to build full-scale applications. The introduction of the &quot;XML HTTP Request (XHR) object&quot; in 1999 marked the beginning of web applications. This technology allowed websites to send and receive data from the server without having to refresh the page. This allowed web developers to create dynamic applications which could interact with users. In the same year, Cascading Style Sheets (CSS) were introduced to help web developers create beautiful applications that ran in a browser. CSS revolutionized web design by allowing developers to easily create complex designs with a few lines of code. Since then, the web has seen a tremendous amount of innovation and growth, transforming from simple websites to powerful web applications. It's an exciting time to be a web developer, as the possibilities are endless. "},{"title":"The evolution of web applications​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-evolution-of-web-applications","content":"The power of the JavaScript programming language has been a driving force behind the evolution of web applications. JavaScript has enabled developers to create interactive websites, and over time its functionality has become increasingly more powerful and versatile. Here are 5 reasons why the JavaScript language has been so successful: JavaScript is lightweight and can be quickly loaded into webpages. JavaScript supports dynamic data structures, making it easier to create complex applications. It can be easily integrated with HTML, allowing developers to control how webpages look and feel. It is an interpreted language, meaning that there’s no need to compile code before running it. It supports object-oriented programming principles, making it easier to manage larger projects. The JavaScript language has come a long way since its inception in 1995. Its early versions had limited capabilities but as newer versions were released, more features were added. Some of the most important versions include ES6 (2015) which introduced classes and modules, ES7 (2016) which added the ability to use async functions, and ES8 (2017) which added support for async iterators and generators. Recent additions to the language include WebAssembly which allows for faster execution of code, new browser APIs for working with media and text, and several new features for creating secure and efficient web applications. Node.js has been an important development in the evolution of JavaScript, allowing developers to use JavaScript on the server side as well. This opened up the possibility of writing entire applications in JavaScript, from front-end to back-end. Node.js also made it possible to create highly interactive single-page applications with minimal server-side processing requirements. More recently, TypeScript has emerged as a strongly-typed version of JavaScript, making it easier to debug and maintain large code bases. With TypeScript, developers can work with types just like they do in other languages such as Java or C#, giving them more control over their code. This makes it easier for teams to collaborate on projects and for newcomers to pick up existing code bases quickly. "},{"title":"The technology behind the web and its power​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-technology-behind-the-web-and-its-power","content":"At the core of web applications lies the amazing technology that drives it: HTML, CSS, JavaScript, and other web technologies. All of these components play a vital role in creating a web application that is fast, secure, and user-friendly. Let’s explore each of these technologies and why they are so important for every computer scientist to understand. HTML, or Hypertext Markup Language, is the foundation for every web page. It provides structure for the content on a page and allows for different types of media to be embedded. HTML elements are then styled with Cascading Style Sheets (CSS), which adds colors, fonts, and layout to the page. JavaScript adds dynamic effects to the page, allowing for interactive experiences and complex logic. Each of these technologies is essential in creating a web application. HTML provides the basic structure for the web page and allows for multimedia content to be included. CSS styles the page and makes it visually appealing. JavaScript makes the page dynamic and interactive by providing interactive effects such as animations and real-time interactions. Every computer scientist needs to be well-versed in these technologies because they are used in many applications today. As a computer scientist, understanding these technologies will give you a better understanding of how to create applications that are fast, secure, and user-friendly. Web Assembly is going to revolutionize the way we build web applications. It is a low-level programming language that can be compiled into a binary format and run inside a web browser. This technology will allow developers to write code in any language they choose and have it be immediately executable in the browser, meaning faster loading times and better performance. Web Assembly is an exciting new technology that has the potential to drastically change the landscape of the web. It provides an efficient way to create powerful applications that can run on any device and with any operating system. Through a basic knowledge of these technologies, computer scientists can understand how web applications work, create better solutions to problems, and devise more efficient systems. "},{"title":"The future of web applications​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-future-of-web-applications","content":"The future of the web is an exciting one, full of possibilities and opportunities. In the next 50 years, we are sure to see the continued evolution of the web, with developers creating innovative and revolutionary applications that will shape our lives. From interactive websites that can interact with users in real time to powerful software programs that run on the cloud, the possibilities are endless. Augmented reality and virtual reality are also likely to play a big role in the future of web applications. With AR and VR, users can be immersed in 3D environments with realistic visuals, sounds, and interactions. This technology can be used for gaming, training, or even medical purposes. In addition, this technology has the potential to revolutionize the way we interact with the internet and how it can improve our daily lives. Finally, AI-driven web applications could become more prominent over the next few decades. Already, AI-driven tools are being used to automate complex tasks and speed up workflows. We can expect this trend to continue in the future, with AI-driven web applications becoming smarter and more sophisticated over time. Additionally, AI-powered bots could help people find information quickly, saving them time and effort when searching online. "},{"title":"Labs","type":0,"sectionRef":"#","url":"/docs/labs/","content":"","keywords":""},{"title":"Lab Sections​","type":1,"pageTitle":"Labs","url":"/docs/labs/#lab-sections","content":""},{"title":"01LL Fr 10:10AM - 11:00AM, Marstn 211​","type":1,"pageTitle":"Labs","url":"/docs/labs/#01ll-fr-1010am---1100am-marstn-211","content":"Harrison Geissler (TA)Stanley Araki (UCA) "},{"title":"01LM Fr 11:15AM - 12:05PM, HasbAd 126​","type":1,"pageTitle":"Labs","url":"/docs/labs/#01lm-fr-1115am---1205pm-hasbad-126","content":"Sridhama Prakhya (TA)Liam Neal Reilly (UCA)Anshul Vemulapalli (UCA) "},{"title":"02LL Fr 12:20PM - 1:10PM, HasbAd 124​","type":1,"pageTitle":"Labs","url":"/docs/labs/#02ll-fr-1220pm---110pm-hasbad-124","content":"Xinzhi Liang (TA)Rajasi Desai (Head UCA)Seth Franklin (UCA) "},{"title":"02LM Fr 1:25PM - 2:15PM, Marstn 211​","type":1,"pageTitle":"Labs","url":"/docs/labs/#02lm-fr-125pm---215pm-marstn-211","content":"Ashir Imran (Head UCA)Chou Heng Ieong (UCA)Isi Bernoff (UCA) "},{"title":"B09 Advanced Express","type":0,"sectionRef":"#","url":"/docs/labs/advanced-express/","content":"B09 Advanced Express Coming soon...","keywords":""},{"title":"B08 CRUD Practice","type":0,"sectionRef":"#","url":"/docs/labs/crud-practice/","content":"B08 CRUD Practice Coming soon...","keywords":""},{"title":"B07 Fetch Practice","type":0,"sectionRef":"#","url":"/docs/labs/fetch-practice/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#information","content":"Please accept the GitHub Classroom Assignment for this labSee the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.  "},{"title":"Overview​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#overview","content":"We've recently learned about the Fetch API in JavaScript, as well as an introduction to Asynchrony. Today we'll be practicing these skills by checking out a Free Dictionary API. "},{"title":"Using fetch()​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#using-fetch","content":"As a recap, the Fetch API allows us to fetch resources from an external resource. Here's how you might use fetch in a typical JavaScript program: async function fetchData() { const response = await fetch(&quot;https://jsonplaceholder.typicode.com/posts&quot;); const data = await response.json(); console.log(data); } fetchData();  "},{"title":"Dictionary API​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#dictionary-api","content":"This free dictionary API allows a user to query various definitions of words. The URL to request information about a word is https://api.dictionaryapi.dev/api/v2/entries/en/&lt;word&gt;, where &lt;word&gt; can be anything the user inputs. Let's look at an example where we look up the word &quot;hello&quot;:  https://api.dictionaryapi.dev/api/v2/entries/en/hello [ { &quot;word&quot;: &quot;hello&quot;, &quot;phonetic&quot;: &quot;həˈləʊ&quot;, &quot;phonetics&quot;: [ { &quot;text&quot;: &quot;həˈləʊ&quot;, &quot;audio&quot;: &quot;//ssl.gstatic.com/dictionary/static/sounds/20200429/hello--_gb_1.mp3&quot; }, { &quot;text&quot;: &quot;hɛˈləʊ&quot; } ], &quot;origin&quot;: &quot;early 19th century: variant of earlier hollo ; related to holla.&quot;, &quot;meanings&quot;: [ { &quot;partOfSpeech&quot;: &quot;exclamation&quot;, &quot;definitions&quot;: [ { &quot;definition&quot;: &quot;used as a greeting or to begin a phone conversation.&quot;, &quot;example&quot;: &quot;hello there, Katie!&quot;, &quot;synonyms&quot;: [], &quot;antonyms&quot;: [] } ] }, { &quot;partOfSpeech&quot;: &quot;noun&quot;, &quot;definitions&quot;: [ { &quot;definition&quot;: &quot;an utterance of ‘hello’; a greeting.&quot;, &quot;example&quot;: &quot;she was getting polite nods and hellos from people&quot;, &quot;synonyms&quot;: [], &quot;antonyms&quot;: [] } ] }, { &quot;partOfSpeech&quot;: &quot;verb&quot;, &quot;definitions&quot;: [ { &quot;definition&quot;: &quot;say or shout ‘hello’.&quot;, &quot;example&quot;: &quot;I pressed the phone button and helloed&quot;, &quot;synonyms&quot;: [], &quot;antonyms&quot;: [] } ] } ] } ]  As you can see, we get back an array that contains an object with all the relevant information we want. In this object, we have access to the meanings property, which is an array of the different meanings a word might have. For this lab, we are interested in each meaning, it's partOfSpeech, and the first definition in the resulting definitions array. "},{"title":"TODO​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#todo","content":"Take a look at index.html. We have a search box where we can input a word and hit a button to see the results. The results div should end up containing each meaning of the word from the API in a way that looks like this: &lt;div class=&quot;results&quot; id=&quot;results&quot;&gt; &lt;!-- This is an example of a resulting meaning div. You must create these elements programatically in Javascript! --&gt; &lt;div id=&quot;meaning-1&quot;&gt; &lt;h2&gt;Meaning #1&lt;/h2&gt; &lt;h3&gt;Part of Speech: &gt;&lt;/h3&gt; &lt;h3&gt;Definition:&lt;/h3&gt; &lt;/div&gt; &lt;/div&gt;  Your task is to use the fetch() API to get all the meanings of the input word and render them on the webpage programatically, similar to how you've been rendering grid elements in your homework. More specifically, you must loop over all the meanings and create the following: Each meaning should get it's own div with the id meaning-X where X is the i+1th element in the resulting meanings array from the APIEach meaning div should have an h2 tag with the text &quot;Meaning #X&quot; where X is the i+1th element in the resulting meanings array from the APIEach meaning div should have an h3 tag with the text &quot;Part of Speech: \\&lt;partOfSpeech&gt;&quot;Each meaning div should have an h3 tag with the text &quot;Definition: \\&lt;definition&gt;&quot;, where definition is the first definition in meanings[i].definitions You do not need to worry about any CSS, that is already handled for you. Here is an example of the final product (the text might be hard to read cause of compression):  "},{"title":"Tips​","type":1,"pageTitle":"B07 Fetch Practice","url":"/docs/labs/fetch-practice/#tips","content":"Once you're able to successfully fetch the data, try using console.log() on the data and interact with it in your browser's console. Make sure you understand the data structure of the results before you create your HTML elements "},{"title":"B03 Advanced Git","type":0,"sectionRef":"#","url":"/docs/labs/git-advanced/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"B03 Advanced Git","url":"/docs/labs/git-advanced/#information","content":"Please accept the GitHub Classroom Assignment for this labSee the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"B03 Advanced Git","url":"/docs/labs/git-advanced/#submission","content":"There are two parts to this assignment: the first is practicing some basic git procedures, and the second is creating and resolving a merge conflict. The assignment contains a README.md file that contains instructions on what to do for each of the two parts. Complete each of the steps in order.You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission. Please be sure to ask the staff for help if you get stuck or have any questions.  "},{"title":"Overview​","type":1,"pageTitle":"B03 Advanced Git","url":"/docs/labs/git-advanced/#overview","content":"As the last of the labs focused on Git, we will be looking at merging branches and dealing with merge conflicts, something that you will most certainly run into when working in teams. We'll also go over the general Git/GitHub workflow again, as well as pull requests. "},{"title":"Pull Requests​","type":1,"pageTitle":"B03 Advanced Git","url":"/docs/labs/git-advanced/#pull-requests","content":"So far, we've been practicing manually merging branches via the command line. While this is fine on a small scale, creating a pull request on GitHub is what you'll be doing more often. Pull Requests are a way to &quot;propose&quot; your changes in a branch, allowing others to review the modified files before merging back to main/master. GitHub will check to see if there are any merge conflicts. If there aren't any, then the incoming changes can be merged. If there are conflicts however, GitHub will let you compare the conflicting files and edit them to ensure the right lines of code remain in main. If you run into a merge conflict when merging locally and you're using VSCode, you'll be prompted to resolve the issues right in the editor, which can also be handy. "},{"title":"Merge Conflicts​","type":1,"pageTitle":"B03 Advanced Git","url":"/docs/labs/git-advanced/#merge-conflicts","content":"When working in another branch, you might not have all the up to date contents from main in it. For example, while you branched off to work on a new feature, another team member might have already branched off and merged back into main. If they touched the same files as you, this will result in a merge conflict when trying to merge your own branch to main. Git/GitHub will require you to resolve these issues and decide which changes are kept in the final merge, and this can be done in the two ways mentioned above. "},{"title":"B05 Event Handling","type":0,"sectionRef":"#","url":"/docs/labs/event-handling/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#information","content":"Please accept the GitHub Classroom Assignment for this labSee the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#submission","content":"The assignment has several TODOs split up into three parts that you must complete. They all involve playing around with various event types. You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.  "},{"title":"Overview​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#overview","content":"In this lab we will delve into the details of Event handling in JavaScript, and apply this knowledge to a few exercises. "},{"title":"Events​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#events","content":"In the context of the web, an Event is when a user performs some action on a webpage, e.g. clicks a link, refreshes the page, scrolls down, downloads an image, etc. Linking these actions to meaningul functionality is key to creating dynamic webpages This is what separates the current web from the static nature of the the early web. When users interact with a page, they expect to see feedback from the page that guides them through to their goals, e.g. making a purchase, sending a message, playing a game, liking a video, etc. Linking Events to this functionality and feedback is called Event handling: The user performs an action on your page, and you want to &quot;handle&quot; that event through a function that provides live feedback to the user. You can handle an event through the addEventListener() method of the EventTarget interface. "},{"title":"addEventListener()​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#addeventlistener","content":"Understanding the addEventListener() is sometimes confusing for new web programmers, so read this section carefully to clear up points of confusion. To access the addEventListener() method, you need an instance of the EventTarget interface, which is usually a HTML Element like a button. Once you have an EventTarge`, you can &quot;listen&quot; for some event to occur on it, like a user clicking it. addEventListener(type, listener) takes in an event type, as well as something to handle the event in the form of a callback function. Here's an example of a few common events, although you can find a full list on the MDN Web Docs and W3 Schools. Since listener is a callback function, it is passed in as a reference. For example, the function foo() is passed in as addEventListener(type, foo), not addEventListener(type, foo()) "},{"title":"Event Types​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#event-types","content":"Mouse Events​ click: Event when a mouse button is both pressed and released on the targetmouseup: Event when a mouse button is released on the targetmousedown: Event when a mouse button is held down on the target Drag Events​ drag: Even when the element is dragged Submit Events​ submit: Event when an HTML &lt;form&gt; is submitted Keyboard Events​ keydown: Event when a key is pressed down while the target is selectedkeyup: Event when a key is released while the target is selectedkeypress: Event when a user presses and releases a key "},{"title":"The \"event\" Parameter​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#the-event-parameter","content":"As part of the Event interface, we can access instance properties directly in an event listener function by passing in the &quot;event&quot; parameter. This allows us to control the behavior of the event through instance methods, or read various properties through event.target. "},{"title":"Example​","type":1,"pageTitle":"B05 Event Handling","url":"/docs/labs/event-handling/#example","content":"HTML: &lt;input type=&quot;text&quot; id=&quot;my-textbox&quot; /&gt; &lt;button type=&quot;button&quot; id=&quot;my-button&quot;&gt;Click here&lt;/button&gt;  Javascript: // First, we grab our DOM elements through their IDs const textBox = document.getElementById(&quot;my-textbox&quot;); const button = document.getElementById(&quot;my-button&quot;); // Then, we create a function to handle an event for when we click our button const buttonHandler = (event) =&gt; { // Changes the background color of the button to black event.target.style.backgroundColor = &quot;black&quot;; // Changes the text color of the button to white event.target.style.color = &quot;white&quot;; // Changes the button text to what's in the text box event.target.textContent = textBox.value; };  "},{"title":"B01 Git and GitHub Basics","type":0,"sectionRef":"#","url":"/docs/labs/git-basics/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"B01 Git and GitHub Basics","url":"/docs/labs/git-basics/#overview","content":"In this lab we will go over the basics of how to use Git and GitHub for version control. Version control will ensure you have a solid working history for any code you write and will allow you to easily revert your work if something goes wrong (It happens to all of us!). Git becomes especially important when working on teams of software engineers like you will for the team project later in the semester. Organizing and merging together the work of multiple people is not easy and knowing how to properly use Git will make your lives a lot easier. "},{"title":"Slides​","type":1,"pageTitle":"B01 Git and GitHub Basics","url":"/docs/labs/git-basics/#slides","content":"Download Powerpoint "},{"title":"B04 Pr2 Work","type":0,"sectionRef":"#","url":"/docs/labs/pr2-work/","content":"B04 Pr2 Work There is no submission for this lab. This lab time is reserved for working on Pr2: Creative Idea. Please follow the instructions as outlined in the docs, and work together with your teammates to start on this milestone. If your teammates are not in the same lab section as you, you can use this time to come up with project ideas, or work together with your teammates online through email, Discord, Slack, etc.","keywords":""},{"title":"B02 Git Commands","type":0,"sectionRef":"#","url":"/docs/labs/git-commands/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#overview","content":"In this lab, we will continue learning about and practicing Git and GitHub.  "},{"title":"A Recap​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#a-recap","content":"Git is a tool for managing the development of your software. It helps manage versions of code and allows you to rollback, and helps teams collaborate. For an oversimplified comparison, it's like Google Drive for code. Git works on the concept of local and remote repositories, and GitHub is a website that hosts remote repositories.  "},{"title":"Git Basics​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#git-basics","content":"The most basic concepts in git are those of commits. A commit is a bundle of changes to the codebase. Each commit has a unique hash to identify itHas a time and date stampHas a user associated with it A commit keeps track of who changed what and when they did it. It's very useful to help fix things when something goes wrong. For example: someone adds a commit and all the code breaks, you can easily narrow it down to specific files and line numbers that were changed in that commit. "},{"title":"Git Commands​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#git-commands","content":"git init - Initialize a new local repository git clone &lt;repo_url&gt; - Copies an existing remote repository into a new folder on your machine git add . - Adds all files that were modified to be staged for commiting. You can do git add &lt;file&gt; for specific files. git commit -m &quot;your message&quot; - Commit the added changes with a short message describing the changes. If you don't use -m, Git will open up Vim to allow adding a longer message. git push origin &lt;branch&gt; - Pushes the changes to a particular branch. By default, git push should push to the main/master branch on the remote, but you can specifiy other branches as well. git pull - Grabs changes from the remote repo to your local one. git branch - Lists out all the existing branches on the local repo. git checkout -b &lt;branch_name&gt; - Creates and switches to a new branch. Remove the -b if you only want to switch to an existing branch. git switch &lt;branch_name&gt; - Another way to switch branches. git merge &lt;branch_name&gt; - Merges working branch to main/master (do this on main!). If you can, do this through GitHub so you can view all potential merge conflicts first. "},{"title":"Linking local git projects to GitHub​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#linking-local-git-projects-to-github","content":"Create an empty repository on GitHub. Unless the repo will contain sensitive material, keep this public Initialize a new local git repository with git init Go to the local copy of the repo that you want to store in GitHub Use the following command to set the upload source origin, or remote as the GitHub repo you just created git remote add origin &lt;repo link&gt; Check that your remote is set correctly git remote -v Commit and push your changes.  "},{"title":"GitHub lab activity​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#github-lab-activity","content":"Please accept the following GitHub assigment and submit your activity. GitHub_Classroom_Link "},{"title":"TODO​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#todo","content":"Create a local copy of the lab activityOpen the repository locally on VS CodeCreate a branch my-branch to edit README.mdSwitch to my-branchEdit the contents of README.md in my-branchAdd and commit changes to my-branchSwitch back to mainMerge contents of my-branch into main/masterPush changes to origin mainThat's it! "},{"title":"B05 Event Listeners","type":0,"sectionRef":"#","url":"/docs/labs/pr3-work/","content":"B05 Event Listeners Coming soon...","keywords":""},{"title":"B10 Pr4 Work","type":0,"sectionRef":"#","url":"/docs/labs/pr4-work/","content":"B10 Pr4 Work Coming soon...","keywords":""},{"title":"B13 Pr5 & Pr6 Work","type":0,"sectionRef":"#","url":"/docs/labs/pr5-6-work-3/","content":"B13 Pr5 &amp; Pr6 Work Coming soon...","keywords":""},{"title":"B11 Pr5 Work","type":0,"sectionRef":"#","url":"/docs/labs/pr5-work-1/","content":"B11 Pr5 Work Coming soon...","keywords":""},{"title":"B12 Pr5 Work","type":0,"sectionRef":"#","url":"/docs/labs/pr5-work-2/","content":"B12 Pr5 Work Coming soon...","keywords":""},{"title":"Lectures","type":0,"sectionRef":"#","url":"/docs/lectures/","content":"Lectures Lectures will be led by the professor and provide a high-level overview of the course material. The presentation format will include a variety of slides, written notes, programming examples, activities, etc. All material will be available through the course learning management system site or website. You are expected to attend every lecture for your section and arrive promptly so you do not disturb others. You may use electronic devices during class, however, its use must pertain to the activity at hand. If your use of an electronic device is distracting to yourself or others, you will be asked to turn the device off.","keywords":""},{"title":"L17 ACID and SQL","type":0,"sectionRef":"#","url":"/docs/lectures/acid-sql/","content":"L17 ACID and SQL Coming soon...","keywords":""},{"title":"L20 Authentication","type":0,"sectionRef":"#","url":"/docs/lectures/auth/","content":"L20 Authentication Coming soon...","keywords":""},{"title":"L12 Asynchrony, Event Model","type":0,"sectionRef":"#","url":"/docs/lectures/async-event-model/","content":"","keywords":""},{"title":"Slides​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#slides","content":" The slide deck can be found here. "},{"title":"Exercise​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#exercise","content":"No exercise for this lecture. "},{"title":"Code Examples​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#code-examples","content":"examples/12-async-event-model You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#mdn-web-docs","content":"Concurrency Model and the Event Loop, MDNWhat the heck is the event loop anyway?, Philip Roberts JSConfHow does JavaScript and JavaScript Engine work in the browser and Node?Using Promises, MDNWhat Happens if You Don’t Resolve or Reject A Promiseasync function, MDNawait operator, MDNsetTimeout()Callback HellPouchDBPouchDB API "},{"title":"VSCode​","type":1,"pageTitle":"L12 Asynchrony, Event Model","url":"/docs/lectures/async-event-model/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L08 Basic CSS","type":0,"sectionRef":"#","url":"/docs/lectures/basic-css/","content":"","keywords":""},{"title":"Syntax​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#syntax","content":"CSS is written in a syntax that includes selectors, properties, and values. Selectors target the HTML elements you want to style, properties define the style you want to apply, and values specify the details of the style. The syntax for CSS is as follows: selector { property: value; }  "},{"title":"Selectors​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#selectors","content":"Selectors are used to target specific HTML elements to apply styling. They can be based on the element type, class, ID, or other attributes. Here are a few examples of selectors: Element selector: targets all elements of a specific type (e.g. p, h1, div)Class selector: targets all elements with a specific class (e.g. .myclass)ID selector: targets a specific element with a unique ID (e.g. #myid)Attribute selector: targets elements with a specific attribute (e.g. [type=&quot;text&quot;]) Here is an example of a CSS rule that targets all &lt;p&gt; elements: /* Select all &lt;p&gt; elements */ p { color: red; }  Here is an example of a CSS rule that targets all elements with the class myclass: /* Select all elements with the class &quot;myclass&quot; */ .myclass { color: red; }  Finally, here is an example of a CSS rule that targets all elements with the ID myid: /* Select the element with the ID &quot;myid&quot; */ #myid { color: red; }  "},{"title":"Properties and Values​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#properties-and-values","content":"CSS properties and values determine the style that will be applied to the selected elements. There are numerous properties and values to choose from, including: Color: defines the text color (e.g. color: red;)Font: defines the font family, size, and weight (e.g. font-family: Arial, sans-serif; font-size: 16px; font-weight: bold;)Background: defines the background color and image (e.g. background-color: #f2f2f2; background-image: url(&quot;image.jpg&quot;);)Border: defines the border around an element (e.g. border: 1px solid black;)Margin: defines the space around an element (e.g. margin: 10px;)Padding: defines the space between an element's content and border (e.g. padding: 5px;) "},{"title":"CSS Box Model​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#css-box-model","content":"Understanding the CSS box model is essential for creating well-designed layouts. Every HTML element is made up of content, padding, border, and margin. The content is the actual text or image displayed, padding is the space between the content and border, border is the line around the content, and margin is the space around the border. "},{"title":"CSS Layout​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#css-layout","content":"CSS can also be used to create responsive layouts that adjust to different screen sizes. There are various layout techniques, including: Floats: allows elements to be positioned next to each otherFlexbox: provides flexible container layoutGrid: allows for a more complex layout structure "},{"title":"Floats​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#floats","content":"CSS floats are a powerful layout tool that allow you to position elements in a specific direction within their parent container. By floating elements left or right, you can create interesting and flexible layouts that adjust to different screen sizes. Here's a quick example of how to use CSS floats: Let's say you have a simple HTML page with a header, main content area, and sidebar. You want the sidebar to appear on the right side of the content area, but you also want the content area to expand to fill the remaining space in the container. Here's how you could achieve that using CSS floats: &lt;style&gt; /* float the sidebar to the right */ .sidebar { float: right; } /* expand the content area to fill the remaining space */ .content { overflow: hidden; } &lt;/style&gt; &lt;body&gt; &lt;header&gt; &lt;!-- header content here --&gt; &lt;/header&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;content&quot;&gt; &lt;!-- main content here --&gt; &lt;/div&gt; &lt;div class=&quot;sidebar&quot;&gt; &lt;!-- sidebar content here --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;  In this example, we've set the float property of the .sidebar element to right. This causes the element to be positioned on the right side of its container, and any elements following it in the HTML flow will appear on the left side. We've also set the overflow property of the .content element to hidden. This allows the element to expand to fill the remaining space in the container and prevents any content from appearing beside the floated sidebar. CSS floats are a powerful tool for creating flexible layouts, but they can also be tricky to work with. Be sure to test your layouts on different screen sizes and browsers to ensure they look great for all users. "},{"title":"Flexbox​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#flexbox","content":"CSS Flexbox is a layout system that allows you to create dynamic and flexible layouts with ease. With Flexbox, you can easily align and distribute elements within a container, regardless of their size or content. Here's an example of how to use CSS Flexbox: Let's say you have a container with three child elements that you want to display horizontally, with the second element aligned to the right side of the container. Here's how you could achieve that using Flexbox: &lt;style&gt; .container { display: flex; justify-content: space-between; } .item-2 { margin-left: auto; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item-1&quot;&gt; &lt;!-- content here --&gt; &lt;/div&gt; &lt;div class=&quot;item-2&quot;&gt; &lt;!-- content here --&gt; &lt;/div&gt; &lt;div class=&quot;item-3&quot;&gt; &lt;!-- content here --&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;  In this example, we've set the display property of the .container element to flex. This tells the browser to use the Flexbox layout system for the container and its child elements. We've also set the justify-content property of the container to space-between. This distributes the child elements evenly within the container, with extra space between each element. Finally, we've added margin-left: auto to the .item-2 element. This pushes the element to the right side of the container, while still allowing the other elements to be distributed evenly. CSS Flexbox is a powerful tool for creating dynamic and flexible layouts, and it can be used for a wide variety of applications. With a little practice, you'll be able to create beautiful and functional designs that work well on all devices and screen sizes. "},{"title":"Grid Layout​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#grid-layout","content":"CSS Grid Layout is a powerful tool for creating complex and responsive layouts. With Grid Layout, you can easily create rows and columns of elements, and control their size, spacing, and alignment. Here's an example of how to use CSS Grid Layout: Let's say you have a container with six child elements that you want to display in a 3x2 grid. Here's how you could achieve that using Grid Layout: &lt;style&gt; .container { display: grid; grid-template-columns: repeat(3, 1fr); grid-template-rows: repeat(2, 1fr); gap: 10px; } .item { background-color: #ccc; padding: 20px; } &lt;/style&gt; &lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;item&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;3&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;4&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;5&lt;/div&gt; &lt;div class=&quot;item&quot;&gt;6&lt;/div&gt; &lt;/div&gt; &lt;/body&gt;  In this example, we've set the display property of the .container element to grid. This tells the browser to use the Grid Layout system for the container and its child elements. We've also set the grid-template-columns property to repeat(3, 1fr) and grid-template-rows property to repeat(2, 1fr). This creates a 3x2 grid with each cell taking up an equal fraction of the available space. Finally, we've added gap: 10px to the .container element. This creates a 10 pixel gap between each element in the grid. CSS Grid Layout is a powerful tool for creating complex and responsive layouts. It can be used for a wide variety of applications, from simple grids to complex multi-column layouts. With a little practice, you'll be able to create beautiful and functional designs that work well on all devices and screen sizes. "},{"title":"Conclusion​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#conclusion","content":"In conclusion, CSS is a powerful tool for designing and styling websites. Understanding the basics of CSS syntax, selectors, properties, and values is essential for creating visually appealing and functional websites. We hope this lecture has provided you with a solid foundation for CSS and we look forward to exploring more advanced CSS concepts with you in future lessons. "},{"title":"Slides​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#slides","content":"Download Powerpoint "},{"title":"Exercise​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#exercise","content":"You must complete Ex7: Checkerboard by the assigned due date. "},{"title":"Code Examples​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#code-examples","content":"examples/08-basic-css You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#mdn-web-docs","content":"CSS: Cascading Style Sheets CSS Basics Pseudo-classesCSS Grid Layout Learn CSS Grid in 5 MinutesBasic Concepts of Grid Layout CSS Specificity "},{"title":"Video​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#video","content":"CSS Grid in 100 Seconds, Fireship "},{"title":"VSCode​","type":1,"pageTitle":"L08 Basic CSS","url":"/docs/lectures/basic-css/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L01 Course Introduction","type":0,"sectionRef":"#","url":"/docs/lectures/course-intro/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#overview","content":"Welcome to COMPSCI 326 Web Programming! We are excited to have you as a part of this journey, where we'll be exploring the fundamentals of web programming and building real-world projects. In this lecture, we'll be covering the course logistics, including how lectures will be conducted and the exercises you'll be starting in class. We will discuss homework assignments that build on the understanding you gain from the exercises, allowing you to apply your knowledge and strengthen your skills. In addition to individual assignments, you'll also have the opportunity to work on a team project. This project will give you the chance to explore web programming in a real-world setting and work with your classmates to build something truly impactful. I'm confident that, by the end of this course, you'll have a solid understanding of web programming and the skills you need to build exciting and innovative projects. So let's get started! "},{"title":"Slides​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#slides","content":"Download Powerpoint "},{"title":"Other Material​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#other-material","content":"SyllabusScheduleMoodle "},{"title":"L14 CRUD #1","type":0,"sectionRef":"#","url":"/docs/lectures/crud-1/","content":"L14 CRUD #1 Coming soon...","keywords":""},{"title":"L15 CRUD #2","type":0,"sectionRef":"#","url":"/docs/lectures/crud-2/","content":"L15 CRUD #2 Coming soon...","keywords":""},{"title":"L05 Classes","type":0,"sectionRef":"#","url":"/docs/lectures/classes/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#overview","content":"JavaScript classes are a way of defining object-oriented programming (OOP) constructs in JavaScript. Classes provide a way to define blueprints for objects, which encapsulate data and functionality into a single entity. "},{"title":"Syntax​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#syntax","content":"The syntax for creating a class in JavaScript is as follows: class ClassName { constructor() { // constructor code } method1() { // method1 code } method2() { // method2 code } }  The class keyword is used to declare a new class, followed by the name of the class (ClassName in this case). The class body is contained within curly braces, which includes a constructor and any number of methods. The constructor method is a special method that is called when an instance of the class is created. It is used to set up any initial state that the object needs. "},{"title":"Examples​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#examples","content":"Here are some examples of JavaScript classes: "},{"title":"Example 1: Animal​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#example-1-animal","content":"class Animal { constructor(name, age) { this.name = name; this.age = age; } speak() { console.log('Hello, my name is ' + this.name); } getAge() { return this.age; } } const cat = new Animal('Fluffy', 2); cat.speak(); // output: &quot;Hello, my name is Fluffy&quot; console.log(cat.getAge()); // output: 2  In this example, we define a class Animal that has a constructor that takes a name and age argument. The class also has two methods, speak and getAge. We then create an instance of the Animal class called cat and call its speak and getAge methods. "},{"title":"Example 2: Person​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#example-2-person","content":"class Person { constructor(name, age) { this.name = name; this.age = age; } sayHello() { console.log('Hello, my name is ' + this.name); } getAge() { return this.age; } } class Employee extends Person { constructor(name, age, salary) { super(name, age); this.salary = salary; } getSalary() { return this.salary; } } const alice = new Employee('Alice', 30, 50000); alice.sayHello(); // output: &quot;Hello, my name is Alice&quot; console.log(alice.getAge()); // output: 30 console.log(alice.getSalary()); // output: 50000  In this example, we define a class Person that has a constructor that takes a name and age argument, and two methods, sayHello and getAge. We then define a subclass Employee that extends the Person class and has a constructor that takes a name, age, and salary argument, and a getSalary method. We create an instance of the Employee class called alice and call its sayHello, getAge, and getSalary methods. "},{"title":"Slides​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#slides","content":"Download Powerpoint "},{"title":"Exercise​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#exercise","content":"You must complete Ex5: Decoder Ring Class by the next class meeting. "},{"title":"Code Examples​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#code-examples","content":"examples/05-classes You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#mdn-web-docs","content":"strict modeJavaScript ModulesJavaScript ClassesDynamic ImportsJavaScript Modules with Import/Export Syntax (ES6) (video)JavaScript Classes #1: The Basics (video) "},{"title":"VSCode​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L07 DOM Events","type":0,"sectionRef":"#","url":"/docs/lectures/dom-events/","content":"","keywords":""},{"title":"Understanding the JavaScript DOM, DOM Events, and Event Handlers​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#understanding-the-javascript-dom-dom-events-and-event-handlers","content":"The Document Object Model (DOM) is a programming interface for web documents. It represents the page so that programs can change the document structure, style, and content. With the DOM, developers can create and modify HTML and XML documents, and also add interactivity to web pages with JavaScript. "},{"title":"The JavaScript DOM​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#the-javascript-dom","content":"In JavaScript, the DOM is represented as a tree-like structure, with the document object at the root. Each node in the tree represents an element, attribute, or text content of the document. Developers can use JavaScript to access, modify, and create elements in the DOM tree. For example, to access an HTML element with a given id using JavaScript, we can use the getElementById() method: const element = document.getElementById('my-element');  Once we have a reference to an element in the DOM, we can modify its properties, such as its text content or style, using JavaScript: element.textContent = 'Hello, World!'; element.style.color = 'red';  "},{"title":"DOM Events​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#dom-events","content":"DOM events are actions or occurrences that happen in the browser (or server), such as a user clicking a button or a page finishing loading. JavaScript can listen for these events and perform actions in response, such as updating the page content or submitting a form. To listen for an event in JavaScript, we can use the addEventListener() method: const button = document.getElementById('my-button'); button.addEventListener('click', () =&gt; { console.log('Button clicked!'); });  This code adds a click event listener to a button element with the id my-button. When the button is clicked, the anonymous function passed as the second argument will be executed, logging a message to the console. "},{"title":"Event Handlers​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#event-handlers","content":"Event handlers are functions that are called in response to a specific event, such as a button click. In JavaScript, event handlers are often used with DOM events to add interactivity to web pages. For example, we can define an event handler function that updates the text content of an element: function handleClick() { const element = document.getElementById('my-element'); element.textContent = 'Button clicked!'; } const button = document.getElementById('my-button'); button.addEventListener('click', handleClick);  This code defines a handleClick() function that updates the text content of an element with the id my-element. It then adds an event listener to a button element with the id my-button, calling the handleClick() function when the button is clicked. Overall, the JavaScript DOM, DOM events, and event handlers provide a powerful set of tools for creating dynamic and interactive web pages. By using JavaScript to manipulate the DOM and respond to user events, developers can create web applications that are engaging and responsive to user input. "},{"title":"Slides​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#slides","content":"Download Powerpoint "},{"title":"Exercise​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#exercise","content":"You must complete Ex6: Interactive Decoder by the next class meeting. "},{"title":"Code Examples​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#code-examples","content":"examples/07-dom-events You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#mdn-web-docs","content":"Introduction to EventsEvent ReferenceEvent InterfaceEventTarget InterfaceEventTarget.addEventListener()Event.preventDefault()What are event listeners in JavaScript?, mmtuts (video) "},{"title":"VSCode​","type":1,"pageTitle":"L07 DOM Events","url":"/docs/lectures/dom-events/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L09 CSS and DOM Surgery","type":0,"sectionRef":"#","url":"/docs/lectures/css-dom-surgery/","content":"","keywords":""},{"title":"Accessing HTML nodes in the DOM​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#accessing-html-nodes-in-the-dom","content":"To manipulate an HTML node in the DOM using JavaScript, we first need to access it. There are several methods we can use to do this. "},{"title":"document.getElementById()​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#documentgetelementbyid","content":"The getElementById() method returns the HTML element with the specified ID. Here's an example of using getElementById() to get a reference to a paragraph element with the ID &quot;myParagraph&quot;: var myParagraph = document.getElementById(&quot;myParagraph&quot;);  "},{"title":"document.getElementsByTagName()​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#documentgetelementsbytagname","content":"The getElementsByTagName() method returns a collection of HTML elements with the specified tag name. Here's an example of using getElementsByTagName() to get a collection of all the paragraph elements in a document: var paragraphs = document.getElementsByTagName(&quot;p&quot;);  "},{"title":"document.getElementsByClassName()​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#documentgetelementsbyclassname","content":"The getElementsByClassName() method returns a collection of HTML elements with the specified class name. Here's an example of using getElementsByClassName() to get a collection of all the elements in a document with the class name &quot;myClass&quot;: var myElements = document.getElementsByClassName(&quot;myClass&quot;);  Once we have a reference to an HTML element, we can manipulate it using the various properties and methods of the Element object. By combining these access methods with the various DOM manipulation methods we discussed earlier, we can create dynamic and interactive web pages that respond to user actions and events. "},{"title":"Adding HTML nodes to the DOM​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#adding-html-nodes-to-the-dom","content":"To add an HTML node to the DOM using JavaScript, we can use the appendChild() method. This method adds a new child node to an existing parent node. Here's an example of adding a new paragraph element to the body of a web page: // create a new paragraph element var newParagraph = document.createElement(&quot;p&quot;); // add some text to the paragraph var paragraphText = document.createTextNode(&quot;This is a new paragraph.&quot;); newParagraph.appendChild(paragraphText); // get the body element var body = document.getElementsByTagName(&quot;body&quot;)[0]; // append the paragraph to the body body.appendChild(newParagraph);  In this example, we first create a new paragraph element using the createElement() method. We then add some text to the paragraph using the createTextNode() method and append the text to the paragraph using the appendChild() method. Finally, we get the body element of the web page using the getElementsByTagName() method and append the new paragraph to the body using the appendChild() method. "},{"title":"Removing HTML nodes from the DOM​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#removing-html-nodes-from-the-dom","content":"To remove an HTML node from the DOM using JavaScript, we can use the removeChild() method. This method removes a child node from an existing parent node. Here's an example of removing a paragraph element from the body of a web page: // get the paragraph element to remove var paragraphToRemove = document.getElementById(&quot;myParagraph&quot;); // get the parent element of the paragraph var parentElement = paragraphToRemove.parentNode; // remove the paragraph from the parent element parentElement.removeChild(paragraphToRemove);  In this example, we first get the paragraph element we want to remove using the getElementById() method. We then get the parent element of the paragraph using the parentNode property. Finally, we remove the paragraph from the parent element using the removeChild() method. These are just a few examples of the many ways we can manipulate the DOM using JavaScript. By combining DOM manipulation with CSS, we can create dynamic and interactive web pages that respond to user actions and events. "},{"title":"Modifying HTML nodes in the DOM​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#modifying-html-nodes-in-the-dom","content":"In addition to adding and removing HTML nodes from the DOM, we can also modify existing nodes. One common way to do this is by changing the text or HTML content of an element. Here's an example of modifying the text content of a paragraph element: // get the paragraph element to modify var paragraphToModify = document.getElementById(&quot;myParagraph&quot;); // change the text content of the paragraph paragraphToModify.textContent = &quot;This is some modified text.&quot;;  In this example, we first get the paragraph element we want to modify using the getElementById() method. We then change the text content of the paragraph using the textContent property. We can also modify the HTML content of an element using the innerHTML property. However, we should be careful when using this property, as it can introduce security vulnerabilities if we allow user-generated content to be inserted into the HTML. "},{"title":"Modifying HTML nodes in the DOM with innerText and innerHTML​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#modifying-html-nodes-in-the-dom-with-innertext-and-innerhtml","content":"The innerText property sets or returns the text content of the specified node, but unlike textContent, it includes only visible text. For example, if an element contains text that is hidden using CSS, that text will not be included in the innerText property. Here's an example of modifying the text content of a paragraph element using the innerText property: // get the paragraph element to modify var paragraphToModify = document.getElementById(&quot;myParagraph&quot;); // change the text content of the paragraph paragraphToModify.innerText = &quot;This is some modified text.&quot;;  The innerHTML property sets or returns the HTML content of the specified node. Unlike textContent and innerText, the innerHTML property can be used to modify HTML content as well as text content. Here's an example of modifying the HTML content of a paragraph element using the innerHTML property: // get the paragraph element to modify var paragraphToModify = document.getElementById(&quot;myParagraph&quot;); // change the HTML content of the paragraph paragraphToModify.innerHTML = &quot;&lt;em&gt;This is some modified HTML content.&lt;/em&gt;&quot;;  We should be careful when using the innerHTML property, as it can introduce security vulnerabilities if we allow user-generated content to be inserted into the HTML. In particular, we should avoid inserting unescaped user input into the HTML, as this can allow attackers to inject arbitrary code into our web page. In addition, since the innerHTML property allows us to modify the HTML content of an element, we can use it to create new HTML elements and insert them into the DOM. This can be useful when we want to dynamically create and insert new content into our web page. Here's an example of creating a new div element using the innerHTML property and inserting it into the body of a web page: // get the body element var body = document.getElementsByTagName(&quot;body&quot;)[0]; // create a new div element var newDiv = document.createElement(&quot;div&quot;); // set the HTML content of the new div element newDiv.innerHTML = &quot;&lt;p&gt;This is a new div.&lt;/p&gt;&quot;; // append the new div to the body body.appendChild(newDiv);  In this example, we first get the body element of the web page using the getElementsByTagName() method. We then create a new div element using the createElement() method and set its HTML content using the innerHTML property. Finally, we append the new div to the body using the appendChild() method. By combining DOM manipulation with CSS, we can create dynamic and interactive web pages that respond to user actions and events. The innerText and innerHTML properties are powerful tools that allow us to modify the content of HTML elements in the DOM and create new elements dynamically. "},{"title":"Conclusion​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#conclusion","content":"We explored some of the basic JavaScript DOM functions for accessing HTML nodes in the DOM. In addition, we explored some of the basic JavaScript DOM functions for adding, removing, and modifying HTML nodes in the DOM. By mastering these functions, we can create dynamic and interactive web pages that respond to user actions and events. "},{"title":"Slides​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#slides","content":" The slide deck can be found here. "},{"title":"Exercise​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#exercise","content":"You must complete Ex8: Chessboard by the assigned due date. "},{"title":"Code Examples​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#code-examples","content":"examples/09-css-dom-surgery You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#mdn-web-docs","content":"Introduction to the DOMDOM ObjectsDOM Tree "},{"title":"Other​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#other","content":"The difference between span and div "},{"title":"VSCode​","type":1,"pageTitle":"L09 CSS and DOM Surgery","url":"/docs/lectures/css-dom-surgery/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L02 JavaScript Intro","type":0,"sectionRef":"#","url":"/docs/lectures/js-intro/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#overview","content":"JavaScript is one of the most popular scripting languages in the world today. It was first released in 1995 by Netscape and Sun Microsystems as a way to make web pages more interactive and dynamic. It has been a fundamental component of web browsers since then and continues to be an integral part of today’s websites and applications. One of the main strengths of JavaScript is its ease of use, making it a popular choice for both professional and hobbyist web developers alike. It has also seen major improvements in its syntax, and with new versions of JavaScript such as ES6 and ES7, the language is now more robust and full featured than ever before. In addition to its core scripting capabilities, it is also well-known for its ability to manipulate the DOM (Document Object Model) which allows developers to update the appearance of websites and applications in the browser. On the downside, JavaScript has been notorious for the presence of errors and the difficulty in debugging. It can be particularly challenging to debug in older browsers as they can produce obscure error messages, making debugging a headache. Despite this, JavaScript has had an impressive and impressive history. Its origins can be traced back to the Scheme programming language, a subset of the Lisp programming language, and its subsequent rise to prominence as the language of choice for scripting browsers was driven by its versatility and relatively easy learning curve. In conclusion, JavaScript is an incredibly versatile and powerful language. While it is prone to the occasional errors and can be difficult to debug, its features and flexibility make it an attractive choice for web developers and application developers alike. "},{"title":"Slides​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#slides","content":"Download Powerpoint "},{"title":"Code​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#code","content":"Example Code "},{"title":"Resources​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#resources","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L10 Browser Local Storage","type":0,"sectionRef":"#","url":"/docs/lectures/local-storage/","content":"","keywords":""},{"title":"Introduction to Browser Storage​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#introduction-to-browser-storage","content":"Browser storage is a way to store data locally in a user's browser. This data can be accessed and manipulated on the client-side, without the need for server-side code or database connectivity. There are several types of browser storage available, each with its own use case. "},{"title":"Types of Browser Storage​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#types-of-browser-storage","content":"There are three types of browser storage available: Local Storage: Local storage is a key-value pair storage mechanism that stores data with no expiration date. This data is stored on the user's browser and persists even after the browser is closed. It can be accessed and manipulated by JavaScript code.Session Storage: Session storage is similar to local storage, but the data is cleared when the browser is closed or the session is ended. It can be accessed and manipulated by JavaScript code.IndexedDB: IndexedDB is a more powerful storage mechanism that allows developers to store large amounts of structured data. It is an object-oriented database and can be accessed and manipulated by JavaScript code. "},{"title":"Working with Local Storage​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#working-with-local-storage","content":"Let's take a look at how to use local storage in JavaScript: // Store data in local storage localStorage.setItem(&quot;name&quot;, &quot;John&quot;); // Retrieve data from local storage const name = localStorage.getItem(&quot;name&quot;); // Remove data from local storage localStorage.removeItem(&quot;name&quot;); // Clear all data from local storage localStorage.clear();  In the above example, we store data in local storage using the setItem method, retrieve data using the getItem method, remove data using the removeItem method, and clear all data using the clear method. "},{"title":"Working with Session Storage​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#working-with-session-storage","content":"Let's take a look at how to use session storage in JavaScript: // Store data in session storage sessionStorage.setItem(&quot;name&quot;, &quot;John&quot;); // Retrieve data from session storage const name = sessionStorage.getItem(&quot;name&quot;); // Remove data from session storage sessionStorage.removeItem(&quot;name&quot;); // Clear all data from session storage sessionStorage.clear();  In the above example, we store data in session storage using the setItem method, retrieve data using the getItem method, remove data using the removeItem method, and clear all data using the clear method. "},{"title":"Working with IndexedDB​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#working-with-indexeddb","content":"IndexedDB is a client-side database storage system that allows web applications to store and retrieve data in a structured way. It is a NoSQL database that stores data in key-value pairs, and it is supported by all modern browsers. "},{"title":"Creating an IndexedDB Database​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#creating-an-indexeddb-database","content":"To create an IndexedDB database, we use the indexedDB object provided by the browser. The following code creates an IndexedDB database called my_database with a single object store called my_object_store: const request = window.indexedDB.open('my_database', 1); request.onupgradeneeded = (event) =&gt; { const db = event.target.result; const objectStore = db.createObjectStore('my_object_store', { keyPath: 'id' }); // Add indexes for searching by name and age objectStore.createIndex('name', 'name', { unique: false }); objectStore.createIndex('age', 'age', { unique: false }); }; request.onerror = (event) =&gt; { // Handle errors opening the database }; request.onsuccess = (event) =&gt; { const db = event.target.result; // Use the database };  This code creates a request to open the my_database database with version number 1. If the database does not exist, the onupgradeneeded function is called, which creates the my_object_store object store with an id key path. The createIndex calls add two indexes to the object store for searching by name and age. "},{"title":"Adding Data to an IndexedDB Database​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#adding-data-to-an-indexeddb-database","content":"To add data to the my_object_store object store, we use the add method: const transaction = db.transaction(['my_object_store'], 'readwrite'); const objectStore = transaction.objectStore('my_object_store'); objectStore.add({ id: 1, name: 'John', age: 30 });  This code creates a transaction to access the my_object_store object store with read-write access. It then adds an object with an id of 1, a name of 'John', and an age of 30 to the object store. "},{"title":"Retrieving Data from an IndexedDB Database​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#retrieving-data-from-an-indexeddb-database","content":"To retrieve data from the my_object_store object store, we use the get method: const transaction = db.transaction(['my_object_store'], 'readonly'); const objectStore = transaction.objectStore('my_object_store'); const request = objectStore.get(1); request.onsuccess = (event) =&gt; { const data = event.target.result; // Use the retrieved data };  This code creates a transaction to access the my_object_store object store with read-only access. It then retrieves the object with an id of 1 from the object store using the get method. "},{"title":"Conclusion​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#conclusion","content":"IndexedDB is a powerful client-side database storage system that enables web applications to store and retrieve data in a structured way. With IndexedDB, you can build web applications that work offline, provide a better user experience, and are more responsive. "},{"title":"Slides​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#slides","content":" "},{"title":"Exercise​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#exercise","content":"You must complete Ex9: Persistent Encoder by the assigned due date. "},{"title":"Code Examples​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#code-examples","content":"examples/10-persistent-encoder You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#mdn-web-docs","content":"StorageWindow.sessionStorageWindow.localStorageJavaScript CookiesBrowser storage limits and eviction criteria "},{"title":"VSCode​","type":1,"pageTitle":"L10 Browser Local Storage","url":"/docs/lectures/local-storage/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L06 Modules, HTML, DOM","type":0,"sectionRef":"#","url":"/docs/lectures/modules-html-dom/","content":"","keywords":""},{"title":"Using JavaScript in HTML​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#using-javascript-in-html","content":"JavaScript is a powerful programming language used to add interactivity and dynamic behavior to web pages. It is widely used in conjunction with HTML and CSS to create engaging and responsive websites. JavaScript is typically included in HTML pages using the &lt;script&gt; tag. This tag is placed in the &lt;head&gt; or &lt;body&gt; section of the HTML document, and it can either reference an external JavaScript file or include the code directly in the HTML document. Here's an example of including an external JavaScript file in an HTML document: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Page&lt;/title&gt; &lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;!-- HTML content goes here --&gt; &lt;/body&gt; &lt;/html&gt;  In this example, the script.js file contains the JavaScript code that will be executed on the page. This file is referenced using the src attribute of the &lt;script&gt; tag. One common use of JavaScript in HTML is to handle user input through forms. JavaScript can be used to validate form data, manipulate the DOM based on user input, and submit form data to a server. Here's an example of using a form to call a JavaScript function: &lt;!DOCTYPE html&gt; &lt;html&gt; &lt;head&gt; &lt;title&gt;My Form&lt;/title&gt; &lt;script&gt; function submitForm() { // Get form data var name = document.getElementById('name').value; var email = document.getElementById('email').value; // Do something with the form data console.log('Name: ' + name); console.log('Email: ' + email); // Prevent form from submitting return false; } &lt;/script&gt; &lt;/head&gt; &lt;body&gt; &lt;form onsubmit=&quot;submitForm()&quot;&gt; &lt;label for=&quot;name&quot;&gt;Name:&lt;/label&gt; &lt;input type=&quot;text&quot; id=&quot;name&quot; name=&quot;name&quot; /&gt;&lt;br /&gt; &lt;label for=&quot;email&quot;&gt;Email:&lt;/label&gt; &lt;input type=&quot;email&quot; id=&quot;email&quot; name=&quot;email&quot; /&gt;&lt;br /&gt; &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt; &lt;/form&gt; &lt;/body&gt; &lt;/html&gt;  In this example, the submitForm() function is called when the form is submitted. The function retrieves the form data using getElementById(), logs it to the console, and returns false to prevent the form from actually submitting. The onsubmit attribute of the &lt;form&gt; tag is used to call the submitForm() function when the form is submitted. This attribute is set to return submitForm(), which means that the function will be called and its return value (in this case, false) will be used to determine whether or not the form should be submitted. In conclusion, JavaScript is a powerful language that can be used to add interactivity and dynamic behavior to HTML pages. By including JavaScript code in an HTML document and using it to handle user input through forms, you can create engaging and responsive web pages that provide a great user experience. "},{"title":"Slides​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#slides","content":"Download Powerpoint "},{"title":"Exercise​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#exercise","content":"You must complete Ex5: Decoder Web Page by the next class meeting. "},{"title":"Code Examples​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#code-examples","content":"examples/06-modules-html-dom You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#mdn-web-docs","content":"HTML Element Reference (you can find everything here!)&lt;script&gt;: The Script Element&lt;form&gt; - The Form Element&lt;label&gt; - The Label Element&lt;input&gt;: The Input Element&lt;input type=&quot;button&quot;&gt; - The type AttributeUsing the W3C DOM Level 1 CoreJavaScript beginner tutorial 27 - forms (video) "},{"title":"VSCode​","type":1,"pageTitle":"L06 Modules, HTML, DOM","url":"/docs/lectures/modules-html-dom/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L11 Networking, HTTP","type":0,"sectionRef":"#","url":"/docs/lectures/network-http/","content":"","keywords":""},{"title":"Slides​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#slides","content":" "},{"title":"Exercise​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#exercise","content":"You must complete Ex10: Run Server by the assigned due date. "},{"title":"Code Examples​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#code-examples","content":"examples/11-networking-http You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#mdn-web-docs","content":"HTTP OverviewHTTP (lots of resources) "},{"title":"VSCode​","type":1,"pageTitle":"L11 Networking, HTTP","url":"/docs/lectures/network-http/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L19 NoSQL","type":0,"sectionRef":"#","url":"/docs/lectures/no-sql/","content":"L19 NoSQL Coming soon...","keywords":""},{"title":"L03 Objects, Arrays, Functions","type":0,"sectionRef":"#","url":"/docs/lectures/obj-arrays-funcs/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#overview","content":"JavaScript is a powerful and versatile programming language that is widely used for web development. One of its core strengths lies in its ability to handle data structures like arrays, objects, and functions. In this post, we'll take a closer look at each of these data structures and how they can be used in JavaScript. "},{"title":"Arrays:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#arrays","content":"Arrays in JavaScript are ordered collections of values. They can contain any type of data, including numbers, strings, objects, and even other arrays. Arrays are declared using square brackets, and each value is separated by a comma. For example: var myArray = [1, 2, 3, 'Hello', [4, 5]];  Arrays in JavaScript have a number of useful built-in methods that allow you to manipulate the data within them. For example, you can use the .push() method to add an element to the end of an array, or the .pop() method to remove the last element. You can also use the .sort() method to sort the elements in an array, and the .slice() method to extract a portion of the array. "},{"title":"Objects:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#objects","content":"Objects in JavaScript are unordered collections of key-value pairs. They are used to represent complex data structures and can contain any type of data, including arrays and other objects. Objects are declared using curly braces, and each key-value pair is separated by a comma. For example: var myObject = { name: 'John', age: 30, hobbies: ['reading', 'hiking'] };  Objects in JavaScript are very versatile, and you can use them to represent anything from simple data structures to complex data models. They also have a number of useful built-in methods, such as .hasOwnProperty(), which allows you to check if an object has a specific property, and .keys(), which returns an array of the object's keys. "},{"title":"Functions:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#functions","content":"Functions in JavaScript are blocks of code that can be executed when they are called. They can take any number of arguments, and can return a value if desired. Functions are declared using the function keyword, followed by the function name, and a set of parentheses that define the arguments. For example: function addNumbers(a, b) { return a + b; }  Functions are a crucial part of JavaScript, and they allow you to write modular and reusable code. They can also be used to create complex algorithms and data structures, and can be used in conjunction with arrays and objects to achieve powerful results. In conclusion, arrays, objects, and functions are the building blocks of JavaScript and are used to represent and manipulate data in a variety of ways. Understanding how to use these data structures effectively is an important part of being a JavaScript developer, and mastering them can open up a world of possibilities for your projects. "},{"title":"Slides​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#slides","content":"Download Powerpoint "},{"title":"Resources​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#resources","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L18 Node and SQL","type":0,"sectionRef":"#","url":"/docs/lectures/node-sql/","content":"L18 Node and SQL Coming soon...","keywords":""},{"title":"L21 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-1/","content":"L21 Project Work Coming soon...","keywords":""},{"title":"L04 Objects","type":0,"sectionRef":"#","url":"/docs/lectures/objects/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#overview","content":"In JavaScript, an object is a data structure that allows you to store and organize data in a more complex way than primitive data types like numbers and strings. Objects can contain properties, which are key-value pairs, as well as methods, which are functions that can be called on the object. "},{"title":"Creating an Object​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#creating-an-object","content":"There are a few different ways to create an object in JavaScript. One common method is to use object literal notation: const myObj = { property1: 'value1', property2: 'value2', method1: function() { console.log('This is a method.'); } };  This creates an object with two properties (property1 andproperty2) and one method (method1). "},{"title":"Accessing Object Properties​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#accessing-object-properties","content":"You can access object properties using dot notation or bracket notation: console.log(myObj.property1); // Output: 'value1' console.log(myObj['property2']); // Output: 'value2'  "},{"title":"Memory Diagram of an Object​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#memory-diagram-of-an-object","content":"To better understand how objects work in JavaScript, let's take a look at a memory diagram of an object: In this diagram, the Object is represented by a circle, and its properties (property1, property2) and method (method1) are represented by rectables connected to the Object circle. Here is a more in depth diagram: In this diagram, A JavaScript array named Array is represented by a rectangle, and each of the three objects (Object1, Object2, andObject3) are represented by larger rectangles. The objects each contain two properties (property1 and property2) represented by rectangles. The values of the properties are also shown in the circles. "},{"title":"Conclusion​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#conclusion","content":"JavaScript objects are a powerful tool for organizing and manipulating data in your code. By understanding how objects work and how to create and access their properties and methods, you can take your "},{"title":"Slides​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#slides","content":"Download Powerpoint "},{"title":"Code Examples​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#code-examples","content":"examples/04-objects You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#mdn-web-docs","content":"JavaScriptJavaScript data types and data structuresObjectFunctionsthis keywordJavaScript OBJECTS in ONE Video "},{"title":"VSCode​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L22 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-2/","content":"L22 Project Work Coming soon...","keywords":""},{"title":"L24 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-4/","content":"L24 Project Work Coming soon...","keywords":""},{"title":"L23 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-3/","content":"L23 Project Work Coming soon...","keywords":""},{"title":"L25 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-5/","content":"L25 Project Work Coming soon...","keywords":""},{"title":"L16 Routing","type":0,"sectionRef":"#","url":"/docs/lectures/routing/","content":"L16 Routing Coming soon...","keywords":""},{"title":"L26 Project Showcase","type":0,"sectionRef":"#","url":"/docs/lectures/showcase/","content":"L26 Project Showcase Coming soon...","keywords":""},{"title":"L13 REST and Fetch","type":0,"sectionRef":"#","url":"/docs/lectures/rest-fetch/","content":"","keywords":""},{"title":"Slides​","type":1,"pageTitle":"L13 REST and Fetch","url":"/docs/lectures/rest-fetch/#slides","content":" The slide deck can be found here. "},{"title":"Exercise​","type":1,"pageTitle":"L13 REST and Fetch","url":"/docs/lectures/rest-fetch/#exercise","content":"You must complete Ex11: Rest and Fetch by the assigned due date. "},{"title":"Resources​","type":1,"pageTitle":"L13 REST and Fetch","url":"/docs/lectures/rest-fetch/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L13 REST and Fetch","url":"/docs/lectures/rest-fetch/#mdn-web-docs","content":"What is REST?, CodecademyWhat is a REST API?, IBM TechnologyUsing the Fetch API, MDNFetch, JavaScript.info "},{"title":"VSCode​","type":1,"pageTitle":"L13 REST and Fetch","url":"/docs/lectures/rest-fetch/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"Project","type":0,"sectionRef":"#","url":"/docs/project/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Project","url":"/docs/project/#overview","content":"The team project starts on the first day of class with forming teams. You will be working in a team of 4 students to design and implement a web application using the three important components of web applications including HTML, CSS, and JavaScript. The design and implementation of the application is entirely up to you, but it must solve a real-world problem, be connected to work you have done in other areas (general education), connect to your discipline (e.g., CS, Informatics) and be relatively unique as compared to other existing applications (within reason). You are allowed to use any technology as long as it relates to the material covered in class and adheres to the project requirements. Your work is subject to peer review. "},{"title":"Project Specification​","type":1,"pageTitle":"Project","url":"/docs/project/#project-specification","content":"There are 5 project milestones leading up to the project showcase on the last day of class. Each project milestone will lead you towards the final project submission. As part of this, you will need to keep in mind the requirements for the final project submission and the specific technologies we require. "},{"title":"Specifications and Requirements​","type":1,"pageTitle":"Project","url":"/docs/project/#specifications-and-requirements","content":"Here are the specifications that the final project submission will need to support: Innovative Idea: Your application should be an innovative idea that is unique. This does not mean you need to have a radically different web application UI, database, etc.; rather, it can be an application that may exist, but targets a different set of users than an existing web application. The most important part is that your team's project must be different from any other team.Front End: Your application must support a user interface designed and built using HTML and CSS. The application may use HTML/CSS frameworks for developing the UI such as Bootstrap. We have found that Bootstrap is the easiest to work with given its wealth of documentation and tutorials. We strongly recommend you use Bootstrap. If you wish to use other libraries, please ask first. Other frameworks like React/Angular or similar libraries are not allowed.Back End: Your application must support a JavaScript-based server. In particular, you must use a NodeJS backend that provides data storage and processing functionality to the front-end of the site.Data and Communication: Your application must store and retrieve data from the server. That is, it should at a minimum support CRUD (creation, reading, updating, and deletion) of data that will be used and displayed as part of your UI. This data must not only include user information, but also data supported by the application and user experience. For example, in a Facebook-type application, this would include posts, replies, likes, images, social network data, and so on. It should be clear in your submission what this data is and why it is important to the user.User Interactivity Your application must support user interactivity. Users should be able to view data as well as modify aspects of that data. Your application may include the ability to interact with other users as well. You should do this via JavaScript/HTTP or Web Sockets.Dynamic UI: The interactivity on your website must include an element of in-place HTML modification. You cannot only use HTML forms &amp; templates for your interaction.Authentication: Your application must include login/logout functionality. This means that you will be required to support user authentication and authorization. If your application doesn't maintain any personal data, you should have a members only section that is only accessible by logged in users.Deployment: Your application must be deployed to a hosting service. All reviews will be done by testing and examining the code for the publicly-accessible website. You should be deploying your code publicly from day one. This may be removed if we are unable to find a hosting site that is freely available to students. "},{"title":"Project Topics​","type":1,"pageTitle":"Project","url":"/docs/project/#project-topics","content":"Your group is welcome to propose most application ideas as long as they are respectful of everyone, adhere to the syllabus' equality statement, and in general, meet the overall expectations of university work. The general idea is that it is a data-driven website covering the specifications mentioned above. In addition, your project must not rely on any operating system specific components. That is, it must run entirely in the browser (front-end) and be implemented entirely using the NodeJS framework (back-end). You may use third-party NodeJS libraries that can be installed via npm, but they must be supported on all operating systems. "},{"title":"Milestone Schedule​","type":1,"pageTitle":"Project","url":"/docs/project/#milestone-schedule","content":"The milestones are scheduled logically front-to-back: you are expected to work on front-end HTML/CSS first, then front-end JavaScript, then back-end Node.js (also in JavaScript). Everyone must be involved in every milestone. Project Milestone 1: Join a TeamProject Milestone 2: Project IdeasProject Milestone 3: UI DesignProject Milestone 4: Front EndProject Milestone 5: Back End Please see the project due dates in the schedule. "},{"title":"Grading​","type":1,"pageTitle":"Project","url":"/docs/project/#grading","content":"Milestones: Each milestone will have an associated reflection survey that will be used to evaluate team's performance and will be used to determine a grade for that milestone. The survey will be available on Moodle. You will propose a grade for each team member (including yourself) based on their performance. The course staff will use this information to inform the final grade for each team member. The course staff will also review the code and functionality of the project to determine the final grade.Final Submission: Each team member will submit a reflection survey on their experience working on the project. This survey will be used to evaluate the team's performance and will be used to determine your final grade for the project. The survey will be available on Moodle. You will propose a grade for each team member (including yourself) based on their performance. The course staff will use this information to inform the final grade for each team member. The course staff will also review the code and functionality of the project to determine the final grade. "},{"title":"Pr5: Back-End","type":0,"sectionRef":"#","url":"/docs/project/back-end/","content":"Pr5: Back-End Coming soon...","keywords":""},{"title":"Pr4: Front-End","type":0,"sectionRef":"#","url":"/docs/project/front-end/","content":"Pr4: Front-End Coming soon...","keywords":""},{"title":"Pr1: Join a Team","type":0,"sectionRef":"#","url":"/docs/project/join-team/","content":"Pr1: Join a Team Objective: To form a team of four members for the class project and ensure effective communication among team members. Instructions: Use Piazza and in-class discussions to find team members who share similar interests and goals.Add your UMass email address to a Google Sheet that is provided by the instructor. A link to the sheet can be found under theProject section in Moodle.Your team will be used for the class project, and possibly for some of the exercises and homework. Therefore, it is important to have a functioning team that can work together efficiently.We will be using Git and apply a Git workflow to manage shared repositories for the project and some assignments.You must fill in the required information in the Google Sheet by the deadline. The deadline can be found on theschedule. The deadline to form a team and submit the Google Sheet is [insert deadline]. Note: If you are unable to find a team by the deadline, follow the instructions in the google sheet. Remember, working in a team is an essential part of the learning process, and it will help you develop skills such as communication, collaboration, and time management. So, make sure to choose your team members wisely and work together to achieve your goals. Good luck!","keywords":""},{"title":"Pr2: Creative Idea","type":0,"sectionRef":"#","url":"/docs/project/Idea/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. tip Remember, you are responsible for managing your own calendar. Please add an entry to your calendar with the due date for this assignment. "},{"title":"Submission​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#submission","content":"You must submit the following to complete this assignment: Team Submission Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission. All team members must add commit, and push to the repository. We will ask you about your contributions in the Grade Reflection survey, so be prepared to provide evidence of your contributions. See the Version Controlsection below for additional information and requirements.Individual Submission: Complete the Grade Reflection survey associated with this assignment on Moodle. You will be asked to reflect on your team's performance and your individual contributions to the project. Everyone on the team must complete the survey. You will be asked to provide evidence of your contributions to the project. Helpful Links: Project information in the syllabusProject requirements "},{"title":"Starter Kit​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. After you click on the invite link you will be asked to create or join a team. Only 1 person on your team needs to create the team on GitHub classroom. Everyone else on the team should join the team. Your team name must be team-N where N is the number of your team in the Google Team Sign up Sheet. For example, if your team is team 3, your team name should be team-3. Your team will be using the same repository for each project assignment. Please follow these instructions precisely. We provide you with a base repository for your team project. There isn't much in the base repository, but it does contain aREADME.md. You will need to update this file with your team's information and a description of your project. You will also need to update the LICENSE file with the license you choose for your project. "},{"title":"Overview​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#overview","content":"This project milestone will give your team an opportunity to describe an innovative idea for a web application that your team will be developing over the latter half of this semester. In addition, your team will design some preliminary functionality of the application to show us what you expect your final application will be capable of doing. Naturally, we expect your thoughts and ideas for your project to change during the course of the semester leading to changes in the data your application will support and the interface your users will expect. This and all future projects will be building blocks leading to the final project submission at the end of the semester. To get a sense of where your project should be headed, please read the Final Project Specification to understand the requirements for the final submission. "},{"title":"Project Ideas Document​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#project-ideas-document","content":"Your team must come up with an original and innovative idea for a web application. Your idea can be something entirely new or it can be based off of an existing application but targeting a completely different user base. Your application must include at least four different types of data (excluding user data (e.g., username, email, avatar)). For example, an image viewer application that supports only images is not acceptable. A cookbook application that includes data for recipes, ingredients, shopping lists, user comments, and likes is acceptable. You must add to the README.md file in your repository a description of your application and how it relates to other existing applications. If your application does not relate to an existing application then mention that. In particular, you must include the following information in your README.md file: The team name (as it appears in the Google Team Sign up Sheet) The application name (something creative) The first section titled Team Overview includes the names of each team member and their GitHub usernames. The second section titled Innovative Idea provides a brief paragraph or two describing your application and how it relates to other existing applications. If your application does not relate to an existing application then mention that. The third section titled Data provides a list of the data your application will support. For each data type, you must include a brief description of the data and how it will be used in your application. For example, if you are creating a recipe application, you might have a data type for recipes. You would then describe what a recipe is and how it will be used in your application. You must include at least four different types of data (excluding user data (e.g., username, email, avatar)). The fourth section titled Functionality provides a list of the functionality your application will support. For each functionality, you must include a brief description of the functionality and how it will be used in your application. For example, if you are creating a recipe application, you might have a functionality for adding a recipe. You would then describe how a user would add a recipe to your application. You must include at least four different types of functionality. The fifth section titled License includes the license you choose for your project. You must choose a license from the Open Source Initiative and include a link to the license in your README.md file. You must also include a copy of the license in your repository (LICENSE). For example, if you choose the MIT license, you would include the following in yourREADME.md file: [MIT License](https://opensource.org/licenses/MIT) and you would include a copy of the license in your repository. "},{"title":"Version Control (Git)​","type":1,"pageTitle":"Pr2: Creative Idea","url":"/docs/project/Idea/#version-control-git","content":"Each team member must make at least one commit to the repository for this project milestone. You must also push your changes to GitHub before the due date. We recommend using a Git workflow to coordinate work on the project between team members. We recommend the GitHub Flowas a light-weight workflow, however, you are welcome to use any workflow you are comfortable with and your team agrees to. Whichever workflow you choose, however, we expect that you will be using pull requests (PR). You will want to use links to pull requests as evidence of your contributions in the reflection survey. "},{"title":"Pr6: Showcase","type":0,"sectionRef":"#","url":"/docs/project/showcase/","content":"Pr6: Showcase Coming soon...","keywords":""},{"title":"Pr3: UI Design","type":0,"sectionRef":"#","url":"/docs/project/ui-design/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#information","content":"See the calendar for due dates. tip Remember, you are responsible for managing your own calendar. Please add an entry to your calendar with the due date for this assignment. "},{"title":"Submission​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#submission","content":"You must submit the following to complete this assignment: Team Submission Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission. All team members must add commit, and push to the repository. We will ask you about your contributions in the Grade Reflection survey, so be prepared to provide evidence of your contributions. See the Version Controlsection below for additional information and requirements.Individual Submission: Complete the Grade Reflection survey associated with this assignment on Moodle. You will be asked to reflect on your team's performance and your individual contributions to the project. Everyone on the team must complete the survey. You will be asked to provide evidence of your contributions to the project. We will not review your project until you have completed the Grade Reflection survey. Helpful Links: Project information in the syllabusProject requirements "},{"title":"Starter Kit​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#starter-kit","content":"There is no starter kit. Use your project repository from the previous project assignment. "},{"title":"Objective​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#objective","content":"The aim of this project assignment is to design an intuitive and user-friendly front-end user interface for a web application. You will create a wireframe of the user interface and develop stories that illustrate how the interface will work and what its functionality is. "},{"title":"Tasks​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#tasks","content":""},{"title":"Task #1: Setup​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#task-1-setup","content":"Create new directories in your git repository called docs and docs/ui-design. The latter directory will contain all of your UI design files. You will also need to create a new Markdown file called docs/ui-design/index.md. This file will contain a write-up of your UI design. You can use the following template to get started: # UI Design ## Wireframe Facilis quas ut iste nam et. Doloribus ut nostrum nobis ut ut eos quia vel soluta. Minus dolorem error neque voluptas ex. ![Wireframe 1](wireframe-1.png) Consequuntur reiciendis illo non suscipit necessitatibus dolores doloribus sed atque. Quos rem excepturi ut eum et eaque facere et. Illo quos voluptatem ratione sint numquam dolor assumenda. Ea et et sapiente distinctio et aut aspernatur necessitatibus est. Est velit debitis enim. Esse et et quos animi animi. Quibusdam et porro et praesentium maiores dolores facilis. Voluptas molestias sapiente aperiam culpa. Et doloribus maiores omnis quisquam dolores. Esse est et ut rem et praesentium quibusdam eaque. Aut consectetur illum placeat repellendus nam. Exercitationem dolorem tempora. ![Wireframe 2](wireframe-2.png) Qui commodi beatae. Quaerat saepe tempora nisi labore ducimus corporis adipisci repellat nihil. Dolores est sed ratione consequatur est magnam cupiditate. Repellendus molestias qui doloribus. Deserunt quidem temporibus. Sunt hic laudantium vitae natus est. ## Stories ### Story 1 Omnis sed consequatur beatae laudantium voluptatem tenetur. Exercitationem omnis quisquam omnis. Tenetur vitae excepturi rerum quia corporis soluta qui iste necessitatibus. Aut quam autem cum et. Harum consequatur perspiciatis eum et temporibus nisi qui pariatur. ### Story 2 Blanditiis et esse ipsa soluta. Temporibus sunt possimus ut veritatis sint ut in quia eum. Omnis ea vel quae eligendi. Illo optio est doloremque autem. Sit ea dolorum architecto. Fuga ea culpa eaque molestiae illo quod odio culpa. Et aut repellendus aut temporibus quae quia et. Quia consectetur quod est. Repellat animi amet quia velit. Voluptatum accusantium dolores cumque sit accusamus. Eaque quia qui commodi rerum eos doloribus. Sint aliquam quae ut ut tempora pariatur qui. ### Story 3 Esse itaque quia est nam. Ut voluptate voluptatem tempora officia. Minus et repellendus ut aut. Aut sint sint distinctio perferendis voluptas. Aut libero qui reprehenderit. Quia dolor ratione dolore porro. Est quod dolor natus. Nihil provident omnis. Exercitationem voluptate earum. Earum doloremque voluptates quia eos qui suscipit dicta. Optio ea sit minima cum consequatur at ut incidunt. Ea voluptatem iure modi officiis. Distinctio eum nemo soluta nulla. ## HTML &amp; CSS Mockup Reiciendis velit dolorum voluptas earum. Rerum nobis accusantium laudantium minima incidunt. Magnam aut minus minus. Cumque unde voluptatibus soluta molestias perspiciatis aperiam accusantium laborum quo. ![HTML &amp; CSS Mockup 1](mockup-1.png) Natus est molestias est et autem non in. Laudantium consequatur facilis perferendis. Saepe similique sapiente rem ut. Laudantium natus voluptas delectus molestiae ab omnis quidem. Maxime cumque porro ea deleniti incidunt nihil cupiditate sunt. Nihil eaque porro nemo veritatis. ![HTML &amp; CSS Mockup 2](mockup-2.png) Ipsam architecto nulla ut dolor dolor sit mollitia deleniti minus. Velit quia iste. ## References - [Link 1](https://example.com) - [Link 2](https://example.com) - [Link 3](https://example.com)  "},{"title":"Task #2: Wireframe Design​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#task-2-wireframe-design","content":"Develop a wireframe design for your application's front-end user interface. You can use any wireframing tool of your choice. Some popular wireframing tools include Figma, Whimsical, Gimp, Wireframe.cc, and Draw.io. Ensure that your design is visually appealing, easy to navigate, and user-friendly. "},{"title":"Task #3: Story Development​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#task-3-story-development","content":"Create stories that will guide users on how to interact with your application. These stories should illustrate the functionality of your application and how the user interface will work. Use diagrams, screenshots, or any other visual aid to help you tell the story. "},{"title":"Task 4: HTML & CSS Mockup​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#task-4-html--css-mockup","content":"Your team must also create a polished web interface with HTML and CSS code. We are highly encouraging you to use Bootstrap for the layout of your HTML elements. You can also include some JavaScript code to polish up some animations and user interaction. Put any HTML &amp; CSS code for these pages in your main repository and include screenshots of your HTML pages inside your milestone Markdown file docs/milestone1.md. "},{"title":"Deliverables​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#deliverables","content":"A wireframe design for your application's front-end user interface.A set of stories that illustrate the functionality of your application and how the user interface will work.An HTML &amp; CSS mockup of your application's front-end user interface. "},{"title":"Grading​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#grading","content":"You will self score your project based on the following criteria: Creativity and originality of the designClarity and effectiveness of the storiesUser-friendliness of the interfaceQuality of the wireframe designQuality of the HTML &amp; CSS mockupQuality of your write-up The following gives you an idea on how to assign a score to your submission: exceeding expectation: Your submission is above and beyond what was expected. You went above and beyond to create a unique and original design, your stories are clear and effective, your interface is user-friendly, your wireframe design is of high quality, your HTML &amp; CSS mockup is of high quality, and your write-up is well written and easy to understand. You also included additional features/aspects in your submission that were not required or mentioned for this assignment.meeting expectation: Your submission meets the requirements of the assignment. You created a unique and original design, your stories are clear and effective, your interface is user-friendly, your wireframe design is of high quality, your HTML &amp; CSS mockup is of high quality, and your write-up is well written and easy to understand.approaching expectation: Your submission is close to meeting the requirements of the assignment. You may have created a unique and original design, your stories are not entirely clear and effective, your interface is user-friendly but is not entirely complete or friendly in all aspects, your wireframe design is of medium quality, your HTML &amp; CSS mockup is of medium quality, and your write-up is possibly well written and easy to understand. However, there are issues with your submission. One or several of the above criteria are not met, the quality of your submission is not high enough, aspects of your submission are incomplete or unclear.below expectation: Your submission is below the requirements of the assignment. You may have created a unique and original design, your stories are not clear and effective, your interface is not user-friendly, your wireframe design is of low quality, your HTML &amp; CSS mockup is of low quality, and your write-up is not well written and easy to understand. However, there are issues with your submission. Several of the above criteria are not met, the quality of your submission is not high enough, aspects of your submission are incomplete or unclear. This is not considered a submission that is expected at the college level.unable to evaluate: no submission, minimal changes, nothing to evaluate. info There are no specific restrictions on how long or short your stories should be. However, you should be able to explain your design choices and how your stories will guide users on how to interact with your application. There are not specific restrictions on the number of wireframes you should create. However, you should be able to explain your design choices and how your wireframes will guide users on how to interact with your application. There are not specific restrictions on the number of HTML &amp; CSS mockups you should create. However, you should be able to explain your design choices and how your mockups will guide users on how to interact with your application. "},{"title":"Reviewing​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#reviewing","content":"We will select a number of submissions to review and provide feedback on. We will also provide feedback on the submissions that are below expectation. We will not provide feedback on submissions that are exceeding. We will review your work based on your self-assessment and the feedback you provide in the project reflection survey. We will determine if we agree or disagree with your self-assessment and provide feedback on your submission and a suggested score that may be different from your self-assessment. However, we will not change your self-assessment. You will be responsible for deciding if you agree or disagree with our feedback and if you want to change your self-assessment at the end of the semester. "},{"title":"Version Control (Git)​","type":1,"pageTitle":"Pr3: UI Design","url":"/docs/project/ui-design/#version-control-git","content":"Each team member must make at least one commit to the repository for this project milestone. You must also push your changes to GitHub before the due date. We recommend using a Git workflow to coordinate work on the project between team members. We recommend the GitHub Flowas a light-weight workflow, however, you are welcome to use any workflow you are comfortable with and your team agrees to. Whichever workflow you choose, however, we expect that you will be using pull requests (PR). You will want to use links to pull requests as evidence of your contributions in the reflection survey. "}]