[{"title":"Office Hours Posted","type":0,"sectionRef":"#","url":"/blog/office-hours/","content":"I hope that everyone had a fantastic first week of our web programming class! I am thrilled to be teaching this course this semester, and I am eager to help all of you learn the ins and outs of web programming, including the powerful and versatile JavaScript language. This semester is going to be an excellent one, and I am confident that each of you will leave the class with a deep understanding of the building blocks of the web. To help ensure your success, I want to bring to your attention that office hours are now posted and available for you to use. I encourage all of you to take advantage of this valuable resource and stop by for any questions or concerns you may have. Flexible learning is at the forefront of this class, and we are here to support you in any way that we can. Whether you are a beginner just starting out or have a little background in web programming, we believe that this class will have something for everyone. So let's have fun and charge into week two!","keywords":""},{"title":"Week 2","type":0,"sectionRef":"#","url":"/blog/w2/","content":"I hope you're all doing well and enjoying the web programming course so far. As we move into week 2, we'll be diving deeper into JavaScript and working on several more assignments. This week, we'll be covering some advanced topics in JavaScript, including functions, objects, and arrays. These concepts will build upon what you learned in the first week and provide you with the foundation to start creating dynamic and interactive web pages. Along with the lecture material, you'll be working on several new assignments. These assignments are designed to give you hands-on experience and help you apply the concepts you learned in class. Be sure to take your time, read the instructions carefully, and ask for help if you need it. Remember, the goal of this course is to equip you with the skills you need to become a confident and capable web programmer. So, don't be afraid to challenge yourself, ask questions, and push your limits. If you have any questions or concerns, please don't hesitate to reach out. I'm here to support you and help you succeed. Let's continue this journey together!","keywords":""},{"title":"Welcome to Web Programming!","type":0,"sectionRef":"#","url":"/blog/welcome/","content":"We are thrilled to have you onboard and look forward to a challenging and enriching journey as we dive into the exciting world of web programming. By the end of this course, you will gain a fundamental understanding of web development and be able to use both front-end and back-end technologies to build stunning web applications. In particular, you will learn to create stunning designs and user experiences with HTML, CSS, and JavaScript. There are several reasons why taking this course is essential for your career, both in industry and in graduate school. Here are five: Understand the latest trends in web programming: Knowing the latest web technologies will help you create and develop modern web applications that meet the latest standards in web design and usability.Master coding and problem-solving skills: With a deep understanding of the concepts, you can effectively code and solve programming problems to complete complex tasks.Improve job opportunities: Your web programming knowledge can provide valuable skills for landing great job opportunities.Understand how the web works: With an in-depth knowledge of the underlying principles and how they apply to the real world, you can better understand how the web works.Learn important development processes: Knowing the essential development processes will make you more productive and ensure the development of higher quality web applications. So, what are you waiting for? Get started on this journey with us and begin mastering web programming! We are looking forward to teaching you the foundations of web programming and to equipping you with the necessary tools and skills to succeed!","keywords":""},{"title":"Exercises","type":0,"sectionRef":"#","url":"/docs/exercises/","content":"Exercises Most classes will provide time to begin exercises that will apply your understanding of the material being discussed in lecture. You are required to complete participation exercises by the stated deadline. If you are unable to attend class you are still expected to submit the activity by the deadline. They are due on the day of the next class by midnight. You are encouraged to extend these exercises with additional features to explore the material, however, know that some exercises build on previous ones. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review.","keywords":""},{"title":"Ex7: 2x2 Checkerboard","type":0,"sectionRef":"#","url":"/docs/exercises/checkerboard/","content":"Ex7: 2x2 Checkerboard Coming soon...","keywords":""},{"title":"Ex8: 8x8 Chessboard","type":0,"sectionRef":"#","url":"/docs/exercises/chessboard/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#overview","content":"In this exercise you will make a full chess board (8x8) that uses a css grid and changes colors as you hover, revealing the text, and the text indicates which piece is at the relevant position: &quot;rook&quot;, &quot;knight&quot;, &quot;bishop&quot;, &quot;queen&quot;, &quot;king&quot;, &quot;bishop&quot;, &quot;knight&quot;, &quot;rook&quot;, &quot;pawn&quot; When you click on a square, it will print to the console the coordinates of the square:  "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided three files: chessboard.html, chessboard.css, and chessboard.js. The HTML file provides the necessary tags to load in both the CSS and JS files. You do not need to modify this file. Your job is to complete the CSS and JS files to create this 8x8 chessboard application. "},{"title":"TODO #1: CSS​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#todo-1-css","content":"Complete the CSS in checkerboard.css provided in the starter kit to duplicate the visual effects shown in the animated image above. You will find TODO #1 in the chessboard.css file. "},{"title":"TODO #2: JavaScript​","type":1,"pageTitle":"Ex8: 8x8 Chessboard","url":"/docs/exercises/chessboard/#todo-2-javascript","content":"Complete the JS in checkerboard.js provided in the starter kit to duplicate the console output behavior shown in the animated image above. You will find TODO #2 in the chessboard.js file. "},{"title":"Ex12: CRUD #1","type":0,"sectionRef":"#","url":"/docs/exercises/crud-1/","content":"Ex12: CRUD #1 Coming soon...","keywords":""},{"title":"Ex13: CRUD #2","type":0,"sectionRef":"#","url":"/docs/exercises/crud-2/","content":"Ex13: CRUD #2 Coming soon...","keywords":""},{"title":"Ex4: Decoder Ring Class","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-ring-class/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided two files in the starter kit. You are provided an HTML file named decoderRingClass.html and a JavaScript file named decoderRingClass.js. You will not need to modify the decoderRingClass.html file, however, it will be used to run your JavaScript code by loading that JavaScript file into the browser by loading the HTML file into your browser. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended. You can use the Live Server VSCode extension to run this simple web application by right-clicking on the decoderRingClass.html file in VSCode and open it in “Live Server”. This will automatically open a browser window. Once your app is loaded into the browser, you can open the browser’s developer tools and the console to see any output that is generated.  "},{"title":"TODO #1: Decoder Class​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#todo-1-decoder-class","content":"In a previous exercise, we made a decoder ring that could work with a certain number of rotations. Now, we are going to generalize decoders so we can implement different kinds of decoders easily. You will write a decoder class whose constructor takes as input an argument which is a string of characters corresponding to the &quot;cipher&quot;. For example, to implement a Caesar cipher that shifts everything two to the right, you do this: let d = new decoder('cdefghijklmnopqrstuvwxyzab'); d.encode('hello world'); // evaluates to 'jgnnq yqtnf'; d.decode('jgnnq yqtnf'); // evaluates to 'hello world';  Your decoder class will provide a similar interface as we saw in a previous exercise. For example, it includes encodeMap and decodeMap objects that are used for the cipher mapping, and it will contain two functions, encode and decode for encoding a string and decoding a string respectively. In this case, the encodeMap will map 'a' → 'c' (the first character in the string), then 'b' → 'd', and so on. Note, that we are no longer restricted by rotations - the cipher could be the lower-case alphabet in any order. In addition, you are going to implement a getter and a setter method that changes the cipher. When the cipher changes, you must rebuild the encodeMap and decodeMap! We provide you the start of the decoder class in the decoderRingClass.js file. Your job is to complete this class. In particular: Implement the cipher setter methodComplete the implementation of the _rebuildMaps methodImplement the encode methodImplement the decode method You will find TODO #1 in the decoderRingClass.js file. "},{"title":"TODO #2: Extend the decoder class​","type":1,"pageTitle":"Ex4: Decoder Ring Class","url":"/docs/exercises/decoder-ring-class/#todo-2-extend-the-decoder-class","content":"Now, you are going to make a decoderRing subclass that implements the Caesar cipher like last time. The constructor will take a rotation argument, and then it will generate the cipher alphabet to pass to the decoder superclass. Here is an example of its use: let dr = new decoderRing(2); dr.encode('hello world'); // evaluates to 'jgnnq yqtnf'; dr.decode('jgnnq yqtnf'); // evaluates to 'hello world';  We provide you the start of the decoderRing class in the decoderRingClass.js file. Your job is to complete this class. In particular: The constructor To ensure that the decoderRing class that you wrote is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must also write 3 tests to test your code. You must use the console.assert function to write your tests. You will find TODO #2 in the decoderRingClass.js file. "},{"title":"Ex3: Decoder Ring","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-ring/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#starter-kit","content":"GitHub Classroom Starter Kit🔥 GitHub Classroom Not Working 🔥 note Follow the GitHub Classroom assignment link on Moodle first. You are provided a single HTML file named exercise-03.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended.  "},{"title":"TODO #1: Decoder Ring (“Caesar cipher”)​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#todo-1-decoder-ring-caesar-cipher","content":"This is an exercise in implementing a basic encryption technique known as a Caesar cipher. The basic approach is to match each letter in the alphabet to a letter in an alphabet that is shifted by a certain amount. For example: Original: ABCDEFGHIJKLMNOPQRSTUVWXYZ Shifted 2 to the right: CDEFGHIJKLMNOPQRSTUVWXYZAB To encode, you match the original letter to the shifted version, so A → C, B → D, and so on. To decode a message, you just do the same thing in reverse, so C → A, and D → B.  From Wikipedia: The transformation can be represented by aligning two alphabets; the cipher alphabet is the plain alphabet rotated left or right by some number of positions. For instance, here is a Caesar cipher using a left rotation of three places, equivalent to a right shift of 23 (the shift parameter is used as the key): Plain: ABCDEFGHIJKLMNOPQRSTUVWXYZ Cipher: XYZABCDEFGHIJKLMNOPQRSTUVW When encrypting, a person looks up each letter of the message in the &quot;plain&quot; line and writes down the corresponding letter in the &quot;cipher&quot; line. Plaintext: THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG Ciphertext: QEB NRFZH YOLTK CLU GRJMP LSBO QEB IXWV ALD Deciphering is done in reverse, with a right shift of 3. The encryption can also be represented using modular arithmetic by first transforming the letters into numbers, according to the scheme, A → 0, B → 1, ..., Z → 25. Encryption of a letter x by a shift n can be described mathematically as, En(x)=(x+n) mod 26E_n(x)=(x+n) \\text{ mod } 26En​(x)=(x+n) mod 26 Decryption is performed similarly, Dn(x)=(x − n) mod 26D_n(x)=(x - n) \\text{ mod } 26Dn​(x)=(x − n) mod 26  You are to write a function called decoderRing that takes a rotation (a number from 0 to 25) as a parameter and returns an object with the following properties: "},{"title":"Property 1:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-1","content":"An encodeMap object that contains an entry for every lower-case letter and its corresponding encoded version, shifted forward by the rotation. For example, if the rotation is 2, encodeMap will look like this, where the result for every letter is 2 letters after it in the alphabet, wrapping around to the beginning (notice the wrap-around at the end!): const dr = decoderRing(2); // rotation of 2 // verify that the encodeMap is correct // notice that &quot;y&quot; and &quot;z&quot; wrap around to &quot;a&quot; and &quot;b&quot;! console.assert(JSON.stringify(dr.encodeMap) === JSON.stringify({&quot;a&quot;:&quot;c&quot;,&quot;b&quot;:&quot;d&quot;,&quot;c&quot;:&quot;e&quot;,&quot;d&quot;:&quot;f&quot;,&quot;e&quot;:&quot;g&quot;,&quot;f&quot;:&quot;h&quot;,&quot;g&quot;:&quot;i&quot;,&quot;h&quot;:&quot;j&quot;,&quot;i&quot;:&quot;k&quot;,&quot;j&quot;:&quot;l&quot;,&quot;k&quot;:&quot;m&quot;,&quot;l&quot;:&quot;n&quot;,&quot;m&quot;:&quot;o&quot;,&quot;n&quot;:&quot;p&quot;,&quot;o&quot;:&quot;q&quot;,&quot;p&quot;:&quot;r&quot;,&quot;q&quot;:&quot;s&quot;,&quot;r&quot;:&quot;t&quot;,&quot;s&quot;:&quot;u&quot;,&quot;t&quot;:&quot;v&quot;,&quot;u&quot;:&quot;w&quot;,&quot;v&quot;:&quot;x&quot;,&quot;w&quot;:&quot;y&quot;,&quot;x&quot;:&quot;z&quot;,&quot;y&quot;:&quot;a&quot;,&quot;z&quot;:&quot;b&quot;}));  You might find these functions/operations useful: str.charCodeAt(ind): Returns the ASCII value of the character at index ind  Example: ‘a’.charCodeAt(0) // evaluates to 97  String.fromCharCode(asc): Returns the character corresponding to the ASCII value asc Example: String.fromCharCode(98) // evaluates to ‘b’  x % k: x modulo k is the remainder after dividing x by k Example: 30 % 26 === 4  "},{"title":"Property 2:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-2","content":"A decodeMap object that is the inverse of encodeMap dr.decodeMap; // evaluates to { “c”:”a”, “d”:”b”, … }  "},{"title":"Property 3:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-3","content":"A function encode(str) that takes a string and returns the encoded version – if there is no encoding, return the original letter. dr.encode(‘hello world’); // evaluates to ‘jgnnq yqtnf’  Hints and Tips:​ Use let xs = str.split('').map((ch) =&gt; { … return something }) to iterate through each character in a string and returns a list of everything that has been mapped. Example: let str = ‘hey’; let upper = str.split(‘’).map(ch =&gt; ch.toUpperCase()); console.assert(JSON.stringify(upper) === JSON.stringify([‘H’, ‘E’, ‘Y’]));  Use xs.join(‘’) to convert a list xs back to a string, which is what you will return from the encode function. Example: [‘H’, ‘E’, ‘Y’].join(‘’); // evaluates to ‘HEY’  "},{"title":"Property 4:​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#property-4","content":"A function decode(str) that does the reverse. dr.decode(‘jgnnq yqtnf’); // evaluates to ‘hello world’  You will find TODO #1 in the exercise-03.html file. "},{"title":"TODO #2: Write Tests​","type":1,"pageTitle":"Ex3: Decoder Ring","url":"/docs/exercises/decoder-ring/#todo-2-write-tests","content":"To ensure that the decoderRing function and the object it returns that you wrote in TODO #1 is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must write 3 tests to test your code. You must use the console.assert function to write your tests. You will find TODO #2 in the exercise-03.html file. "},{"title":"Ex6: Interactive Decoder","type":0,"sectionRef":"#","url":"/docs/exercises/interactive-decoder/","content":"Ex6: Interactive Decoder Coming soon...","keywords":""},{"title":"Ex5: Decoder Web Page","type":0,"sectionRef":"#","url":"/docs/exercises/decoder-web-page/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#overview","content":"For this exercise you will make a web interface to the decoder class you built in the previous exercise. You can use your solution from the previous exercise or our solution. Note, that for this exercise you are not allowed to use modules. So, if you used modules in the last exercise you can simply comment out any import/export statements in your decoder.js file. If you do use your own solution, make sure you copy your JS file into the same folder as the HTML document you are about to complete. You should write your solutions in VSCode (or an editor of your choice). The web page you will create should look and work roughly like this:  The application works as follows: Enter a key, consisting of 26 letters (for now, no validation or error-checking is required).Optionally, enter text to encode or decodeWhen you click the “Go” button, it should encode the text entered in the “Text to encode” box, printing it in the “Encoded” box, and the same for “Text to decode” and “Decoded”. "},{"title":"Starter Kit​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#starter-kit","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided the decoderRingClass.js solution from the last exercise. This file contains the class definition for the decoder and decoderRing classes. You will use decoder in this exercise to encode/decode text the user enters into the interface. You will not need to make any modifications to that file. We also provide a file named index.html which doesn’t have much. You will need to update this file to build the user interface for our simple encoder/decoder application. "},{"title":"TODO #1: User Interface​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#todo-1-user-interface","content":"For this TODO, you need to use HTML tags to design and implement the user interface you see above for the encoder/decoder application. This will require you to use several different tags. Here are the tags that we used to implement the interface: &lt;h1&gt; - header&lt;center&gt; - this tag is actually deprecated, but is fine to use for now. We will see how to do this properly when we introduce CSS&lt;br&gt; - this is used for formatting&lt;img&gt; - this is used for the image, the image can be found at https://github.com/emeryberger/web-programming/raw/master/decoder-ring.jpg Example: &lt;img src=”URL” alt=”description for the blind”&gt; &lt;form&gt; - for the form itself You want to nest the labels and other form elements inside of the &lt;form&gt; tag: &lt;label&gt; - for accessibility &lt;label for=”some_id”&gt;explanation&lt;/label&gt; &lt;input&gt; - for input UI components &lt;input type=”text” id=”some_id”&gt;Use the following IDs: keyencode, encodeddecode, decoded Examples: &lt;input type=&quot;button&quot; onClick=&quot;doIt()&quot; value=&quot;Go&quot;&gt; &lt;label for=&quot;encode&quot;&gt;Text to encode:&lt;/LABEL&gt; &lt;input type=&quot;text&quot; ID=&quot;encode&quot; /&gt;  You can read up on these tags on the MDN Web Docs. You will find TODO #1 in the index.html file. "},{"title":"TODO #2: Application Behavior​","type":1,"pageTitle":"Ex5: Decoder Web Page","url":"/docs/exercises/decoder-web-page/#todo-2-application-behavior","content":"Now that you have completed TODO #1, you have an interface. Let us make this more interesting by adding some behavior to this application. That is, we want to be able to perform the encode/decode operations when we click on the Go button. To do this you will need to implement a function called doIt inside of the &lt;script&gt; tag in the index.html file. This function needs to create a new decoder object and encode and decode the values from the text boxes in the user interface. Remember, you can get/set the values from the user interface like we do in this example: encodeStr = document.getElementById('encode').value; document.getElementById('encoded').value = c.encode(encodeStr);  Make sure that the Go button calls the doIt function when the Go button is clicked. You will find TODO #2 in the index.html file. That's it! You should now have a working decoder web application! Use VSCode’s Liver Server extension to run your encoder/decoder web application! "},{"title":"Ex2: Letter Histogram","type":0,"sectionRef":"#","url":"/docs/exercises/letter-histogram/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. See the course syllabus for additional information on exercise assignments. "},{"title":"Overview​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#overview","content":"The following exercises will give you some practice with various aspects of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Repository​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#starter-repository","content":"note Follow the GitHub Classroom assignment link on Moodle first. You are provided a single HTML file named exercise-02.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use theconsole.logfunction to print values to the browser’s console andconsole.assertto test the functions that you write. You are encouraged to test your code to make sure it works as intended. "},{"title":"TODO #1: Letter Histogram​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#todo-1-letter-histogram","content":"Write a function called letterHistogram that counts the number of times each character appears in a string and returns an object mapping characters to their frequencies. You will be creating an object ({}) to track the count of each letter. Instead of accessing each character by indexing an array, use str.split(‘’).forEach. Here is the signature of the letterHistogram function: function letterHistogram(str)  Here is an example of calling this function: letterHistogram('this is a test'); // evaluates to { t: 3, h: 1, i: 2, s: 3, ' ': 3, a: 1, e: 1 }  You will find TODO #1 in the exercise-02.html file. "},{"title":"TODO #2: Write Tests​","type":1,"pageTitle":"Ex2: Letter Histogram","url":"/docs/exercises/letter-histogram/#todo-2-write-tests","content":"To ensure that the letterHistogram function you wrote in TODO #1 is working properly, it is good software development/engineering and web programming practice to write tests. For this TODO, you must write 3 tests to test your letterHistogram function. You must use the console.assert function to write your tests. Hint: To compare objects, it is easiest to convert both objects into a string and then perform a string comparison. This will be helpful when you test the return value of your letterHistogram function: console.assert(JSON.stringify(letterHistogram(&quot;xxx&quot;)) === JSON.stringify({x : 3}));  You will find TODO #2 in the exercise-02.html file. "},{"title":"Ex1: Letter Frequency","type":0,"sectionRef":"#","url":"/docs/exercises/letter-frequency/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#information","content":"Believe it or not, you should start HW1 first before completing this exercise.Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#overview","content":"The following exercises will give you some practice with some of the basics of the JavaScript programming language. You should write your solutions in VSCode (or an editor of your choice). "},{"title":"Starter Code​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#starter-code","content":"You are provided a single HTML file named exercise-04.html. Although we haven’t discussed HTML files yet, you will write your JavaScript code between the &lt;script&gt; tags inside of that HTML file. You may only use the console.log function to print values to the browser’s console and console.assert to test the functions that you write. You are encouraged to test your code to make sure it works as intended. "},{"title":"TODO #1: Letter Frequency​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#todo-1-letter-frequency","content":"Write a function letterFrequency that counts the number of times a particular character appears in a string and returns that count. You'll need to use the length property of a string (str.length → the length of the string). Note that the string is represented as an array, so you can access each character by normal array indexing: str[0] is the first character. You will find TODO #1 in the exercise-04.html file. "},{"title":"TODO #2: Palindrome Detector​","type":1,"pageTitle":"Ex1: Letter Frequency","url":"/docs/exercises/letter-frequency/#todo-2-palindrome-detector","content":"Write a function isPalindrome that checks if the input string is a palindrome – that is, the string is the same forwards and backwards (example: level is a palindrome, as is the word racecar and tacocat). This function returns true if the word is a palindrome; false otherwise. For this exercise, &quot;race car&quot; (with a space) is not a palindrome, but &quot;a a a&quot; is. You will find TODO #2 in the exercise-04.html file. "},{"title":"Ex11: REST and Fetch","type":0,"sectionRef":"#","url":"/docs/exercises/rest-and-fetch/","content":"Ex11: REST and Fetch Coming soon...","keywords":""},{"title":"Ex9: Persistent Encoder","type":0,"sectionRef":"#","url":"/docs/exercises/persistent-encoder/","content":"Ex9: Persistent Encoder Coming soon...","keywords":""},{"title":"Ex14: Routing","type":0,"sectionRef":"#","url":"/docs/exercises/routing/","content":"Ex14: Routing Coming soon...","keywords":""},{"title":"Guides","type":0,"sectionRef":"#","url":"/docs/guides/","content":"Guides","keywords":""},{"title":"Ex10: Run Server","type":0,"sectionRef":"#","url":"/docs/exercises/run-server/","content":"Ex10: Run Server Coming soon...","keywords":""},{"title":"VSCode","type":0,"sectionRef":"#","url":"/docs/guides/vscode/","content":"","keywords":""},{"title":"Install VSCode​","type":1,"pageTitle":"VSCode","url":"/docs/guides/vscode/#install-vscode","content":"Do the following: Download VSCode and install it on your computer.Learn a little about VSCode by looking at Getting Started with Visual Studio Code. "},{"title":"Install Extensions​","type":1,"pageTitle":"VSCode","url":"/docs/guides/vscode/#install-extensions","content":"Like many other programming editors, VSCode has a rich set of extensions that you can use to extend the functionality of the editor. To install an extension you want to click on the extension icon in the Activity Bar as shown in the figure below.  This will bring up Extensions pane and allow you to search for extensions. We recommend you install the following extensions: HTML CSS SupportLive Server There are plenty of other extensions you might be interested in exploring that will allow you to make VSCode more powerful and customized to the way you like it. "},{"title":"Homework","type":0,"sectionRef":"#","url":"/docs/homework/","content":"Homework Homework are programming assignments that reinforce material taught in class. These are longer assignments and take more time than in-class exercises. They require you to apply your understanding of the material to a programming challenge that emphasizes what you have learned during lecture and any assigned material. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review.","keywords":""},{"title":"Git Setup","type":0,"sectionRef":"#","url":"/docs/guides/git/","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#preparation","content":"Before you complete the tasks in this document, you should watch the following videos: Git, GitHub, &amp; GitHub Desktop for beginnersGit and GitHub in ~30 Minutes The first video provides a gentle introduction to Git using GitHub Desktop, which is a graphical application that allows you to interface with Git repositories stored on GitHub. The second video covers the most common Git commands that can be used from a command prompt. Although you can use GitHub Desktop for much of the work in this course, you should use Git from the command line to better understand how it works. To be proficient with Git and claim that you understand how it is used and works (say, in a job interview), you should be able to use Git from the command prompt. "},{"title":"Download and Install Git​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#download-and-install-git","content":"Download and Install Git. After you install Git, open a command prompt on your operating system (Terminal on Mac, Command prompt on windows, Terminal on Linux) and type in the following command: git --version  This will print out the version. Mine looks like this: git version 2.38.1  "},{"title":"Create a GitHub Account​","type":1,"pageTitle":"Git Setup","url":"/docs/guides/git/#create-a-github-account","content":"Create an account on GitHub if you do not already have a GitHub account. "},{"title":"Hw5: Fetch, Multiplayer, Server","type":0,"sectionRef":"#","url":"/docs/homework/fetch-multi-server/","content":"Hw5: Fetch, Multiplayer, Server Coming soon...","keywords":""},{"title":"Hw6: Fetch, Scoreboard, Deploy","type":0,"sectionRef":"#","url":"/docs/homework/fetch-scoreboard-deploy/","content":"Hw6: Fetch, Scoreboard, Deploy Coming soon...","keywords":""},{"title":"Hw4: Persistence & Hints","type":0,"sectionRef":"#","url":"/docs/homework/persistence-and-hints/","content":"Hw4: Persistence &amp; Hints Coming soon...","keywords":""},{"title":"Hw1: GitHub Classroom","type":0,"sectionRef":"#","url":"/docs/homework/github-classroom/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#overview","content":"In this course, most of the assignments are distributed using GitHub Classroom. GitHub Classroom uses Git to organize assignments that are stored in Git repositories. The goal of this homework is to get you familiar with Git, GitHub, and GitHub Classroom. This course uses Git extensively to help you practice using version control which is an extremely important tool in the context of software development as well as other disciplines that need a fine-grained method for versioning files. We use GitHub Classroom as a place to manage assignment repositories. "},{"title":"Task 1 – Accept GitHub Classroom Link​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-1--accept-github-classroom-link","content":"The following is step-by-step instructions on how to accept your first GitHub Classroom assignment. Follow these instructions in sequence to successfully gain access to this first assignment. "},{"title":"Step 1​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-1","content":"The first thing you need to do is click on the GitHub Classroom assignment link provided with this homework in the LMS that we are using (e.g., Moodle). Once you click on that link you will see a message similar to the one to the left. It is asking you to join the classroom. You need to find your UMass username or email address in the list of “Identifiers”. Once you find it, click on it to continue. If you do not find it, post to Piazza so we can fix that.  "},{"title":"Step 2​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-2","content":"After you click on your UMass username you then need to click OK to confirm.  "},{"title":"Step 3​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-3","content":"Next, you need to accept the assignment. Notice that it will create a unique repository name that will be associated with your UMass username.  "},{"title":"Step 4​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-4","content":"Now you need to wait a short period of time for GitHub Classroom to create your repository. You must refresh the web page to see when it completes.  "},{"title":"Step 5​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#step-5","content":"After a few browser refreshes it will display the link to your repository. Click on that link to open your GitHub repository.  After you follow those steps, you have a GitHub repository connected to GitHub Classroom. The instructors of this course will have access to your repository and be able to see the work that you commit. This allows us to help you as you complete assignments as well as see your progress. Your repository will look something like this (this may vary depending on the semester):  "},{"title":"Task 2 - Clone the Assignment Repository​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-2---clone-the-assignment-repository","content":"Now that you created the homework repository, you want to clone that repository to your local machine. We will discuss two ways of doing this. The first way is to use the command prompt. The second way is to clone the repository through VSCode. "},{"title":"Command Prompt Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#command-prompt-method","content":"You will need to open a command prompt (this will differ depending on which operating system you are using) and navigate to a folder in which you want to clone your assignment repository into. Once you are in that folder you want to type in the following command : git clone YOUR_REPOSITORY_URL  You will need to replace YOUR_REPOSITORY_URL with the name of the repository that was created for you when you accepted the assignment. Here is an example of what this might look like (depends on the semester): git clone https://github.com/umass-cs-326-summer/homework-01-github-classroom.git  After you type this command you may be asked to enter your GitHub username and password. If you encounter an error, you may need to create a personal access token to clone your repository successfully. To create a personal access token, you should follow the instructions in How To: Clone GIT Repo Using Personal Access Token. You can read more about the reasoning behind GitHub’s decision to require a personal access token in this article. After you run this command, you will see a folder that was created containing the starter repository. You can open this folder in VSCode. There are several ways of doing this depending on the operating system you are using. In Windows, you can right click on the folder and click on “Open with VSCode”. On a Mac, you can drag the folder onto the VSCode application. You can also open VSCode and click on the “Explorer” button on the Activity Bar. Then click on “Open Folder”  "},{"title":"VSCode Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#vscode-method","content":"Another way to clone your repository is directly from VSCode. We will not explain the details in this document, but you are welcome to look at this brief video to show you how. "},{"title":"GitHub Desktop Method​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#github-desktop-method","content":"Lastly, you can use GitHub Desktop to clone your repository. See this video to learn how to do that. You are welcome to use whichever method you prefer, but we will mostly be demonstrating how to work with Git from the command line. "},{"title":"Task 3 - Configuring Names and Emails​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-3---configuring-names-and-emails","content":"For you to be identified properly when you make changes to your repository, you need to configure Git to use your name and email. You must run these two commands from a command prompt to accomplish this: git config --global user.name &quot;John Doe&quot; git config --global user.email johndoe@example.com  You must replace the value for user.name with your actual name and user.email with your actual email. It is extremely important that you provide your credentials, otherwise it is impossible to identify your commits in your Git repositories. Do not skip this step! "},{"title":"Task 4 - Making Changes, Adding, and Committing​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-4---making-changes-adding-and-committing","content":"Now you are ready to work with your homework repository. This homework has a simple task. You will notice a PROFILE.md file in the homework repository folder. Open that file in VSCode. Follow these steps to be successful: Replace the [Your Name Here] and [Your Email Here] text fragments with your name and your email. Next, we want to commit this change to the repository. Run these commands from the command prompt inside your repository folder. These commands will add your changed file to the “staging” area and then commit them to the repository. git add .git commit -m “Added my name and email” You can also do this through VSCode by clicking on the Git icon in the Activity Bar. If you are interested in learning more on how to do that I suggest you google VSCode and Git to learn more. Next, go to the end of the PROFILE.md file. You will find a TODO that asks you to add a little bit about yourself. Replace that TODO with a paragraph about yourself. You can write anything you would like. It also asks you to write something about what you are expecting out of this course. Let us know! After you write the paragraph and feel like you have something done, you need to run the same commands again, but with a different “message”. git add .git commit -m “Added my paragraph”  That is all you need to do here! "},{"title":"Task 5 - Pushing​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#task-5---pushing","content":"You have made changes to your local repository on your computer and added and committed those changes to the repository on your computer. Next, you want to copy those changes to the remote copy of your repository on GitHub. To do that we use the push command. git push  The output of that command will look something like this:  After you push your changes, you are done! "},{"title":"Submission​","type":1,"pageTitle":"Hw1: GitHub Classroom","url":"/docs/homework/github-classroom/#submission-1","content":"The only requirement for submission is to push your changes to GitHub before the deadline. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission. "},{"title":"Hw3: Rack & Render","type":0,"sectionRef":"#","url":"/docs/homework/rack-and-render/","content":"Hw3: Rack &amp; Render Coming soon...","keywords":""},{"title":"Course Information","type":0,"sectionRef":"#","url":"/docs/information/","content":"Course Information The web is arguably today's most important application platform. Web browsers run on practically every device, and even many phone applications are in fact web applications under the covers. This course will cover a broad range of client-side web technologies, including HTTP itself, HTML5, CSS, and JavaScript; it will additionally cover key concepts for the server side of web applications, including key value stores and SQL servers. This course will also cover key concepts and technologies including AJAX, JavaScript libraries (e.g., jQuery), and web security. This course is hands-on and heavily project-based; students will construct a substantial dynamic web application based on the concepts, technologies, and techniques presented during lectures and in readings. This course satisfies the IE Requirement.","keywords":""},{"title":"HW2: Scrabble Starter","type":0,"sectionRef":"#","url":"/docs/homework/scrabble-starter/","content":"","keywords":""},{"title":"Information​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#information","content":"Visit Moodle and follow the GitHub Classroom assignment link.See the calendar for due dates. "},{"title":"Submission​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#submission","content":"You must submit the following to complete this assignment: Push all changes to your GitHub repository before the due date. You do not need to submit anything to Moodle. We will take your last commit before the deadline as your submission.Complete the Grade Reflection survey associated with this assignment on Moodle. "},{"title":"Overview​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#overview","content":"This is the first part of a series of assignments around the game of Scrabble. We hope that it will be a fun experience in progressively learning all the pieces surrounding modern web development, to engineer a fully functional game. In this assignment, you will build a collection of functions that we will use in future homework to build a (mostly) complete scrabble game web application.  "},{"title":"GitHub Classroom and Workflow​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#github-classroom-and-workflow","content":"All homework assignments use GitHub Classroom. To start this assignment, you must click on the GitHub Classroom link and accept the assignment to create your initial GitHub repository. You must then use the git clone command to clone that repository to your local computer to begin work. If you forget how to do this, refer to the first homework assignment and related material. We recommend the following workflow to complete homework assignments: Accept the GitHub Classroom link Clone your repository to your local computer Do the following until the assignment is complete A. Make incremental required additions/edits/changes to the source code B. Add those changes to your repository: `git add .` C. Commit those changes: `git add -m &quot;a short message about changes` D. Push those changes to GitHub: `git push` Copy your GitHub repository URL into the Moodle assignment and submit You are also welcome to use use GitHub Desktop and/or VSCode to do this, but we highly encourage you to become familiar with the command line usage first as this is 100% expected in industry and academia.  "},{"title":"General Guidelines​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#general-guidelines","content":"Here are a few general guidelines for this assignment: It will be helpful to come up with test cases using console.assert. This will give you some assurance that your code is working properly. We encourage you to share test cases that you develop with others taking this class. This will make everyone’s code better and is how quality assurance (QA) can work in practice. We will be spot checking your code for good coding practices. It is expected your code does not contain (1) extraneous variables/code, (2) missing semicolons, (3) missing curly braces, and (4) use of double equals. Furthermore, you should use whitespace consistently and make the code legible. Many of these issues will be recognized by VSCode and either suggested as corrections or automatically corrected when you save your code. Please review the collaboration policy in the Syllabus for further information on what you can and cannot do in terms of sharing of work.  "},{"title":"Starter Code​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#starter-code","content":"The starter code provided below is a skeleton of the code you will be writing. Here is a brief description of each of the files: dictionary.js: This file contains the dictionary of words that will be used in the scrabble game.index.html: this file contains some HTML code that is used to run the scrabbleUtilsTest.js file. There is nothing you need to do with this file.README.md: this file contains a brief description of the project. All GitHub repositories should have this file.scrabbleUtils.js: this file contains the functions you will be writing. You will need to fill in the TODO's with your own code. The TODO's are marked with a // TODO #k comment, where k is the number of the TODO.scrabbleUtilsTest.js: this file contains some test cases that will be used to test your code. You should add your own tests – this is what every good programmer should do. This file will be run when the index.html file is loaded into the browser. To run this &quot;application&quot; it is recommended that you use the Live Server VSCode extension. You simply right-click on the index.html file and select &quot;Open with Live Server&quot;. This will automatically run a web server on your local machine and point your browser to the local server which will load the index.html file into the browser.  Please complete all the TODOs in the code. "},{"title":"What you need to do​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#what-you-need-to-do","content":""},{"title":"TODO #1: Word Checker​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-1-word-checker","content":"In Scrabble, a player has a collection of tiles where each tile is bearing a single character (the letter) as depicted here:  The goal of the game is to form words from these tiles held in a rack that are valid according to the rules of the game. To implement Scrabble as a web application we will need to implement the game using data and functionality in the JavaScript programming language. The first function we need to write is the canConstructWord function which can be found in the scrabbleUtils.js file. This function is used to perform one of the most important parts of the game which is to determine whether a player has the necessary tiles to construct a given word. The signature of this function looks like this: function canConstructWord(availableTiles, word)  This function has two parameters: the available tiles the player has (and how many) and a word the player wants to construct. The former is an object mapping letters to their frequencies. That is, the properties are the letters, and the values of those properties are the number of tiles the player has in their rack. The latter is simply a string. Scrabble also has blank “wildcard” tiles that we will represent with the ‘*’ (asterisk) character. A wildcard tile can be used in place of any character. Additional specifications for this function include: You may not modify the function arguments.You can assume the letters in the availableTiles object are always lowercase.You can assume that the word string is always lowercase. Here is an example of how you call this function: canConstructWord({ a: 1, c: 2, t: 1 }, 'cat'); // =&gt; true canConstructWord({ *: 1, c: 2, t: 1 }, 'cat'); // =&gt; true  This function is labeled as TODO #1 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function.  "},{"title":"TODO #2: Base Score Calculator​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-2-base-score-calculator","content":"The next function we need to write is the baseScore function which is used to calculate the base score of a word. The signature of this function looks like this: function baseScore(word)  This function has one parameter: word. The word is a string. The base score of a word is the sum of the scores of each letter in the word. For example, the base score of the word ‘cat’ is 3 + 1 + 1 = 5, if the letters ‘c’, 'a' and 't' have the scores 3, 2 and 1, respectively. This function returns the base score of the word. The number of letters and the associated scores for each letter are shown in the list below formatted as POINTS: LETTER × COUNT. That is, the number of points for each letter is on the left and the letter is on the right along with the number of those letter tiles that are available in the scrabble game. 0 points: blank tiles x21 point: E ×12, A ×9, I ×9, O ×8, N ×6, R ×6, T ×6, L ×4, S ×4, U ×42 points: D ×4, G ×33 points: B ×2, C ×2, M ×2, P ×24 points: F ×2, H ×2, V ×2, W ×2, Y ×25 points: K ×18 points: J ×1, X ×110 points: Q ×1, Z ×1 You can also find the scoring on Wikipedia2 Additional specifications for this function include: You may assume that the word parameter is non-emptyYou may assume that the word parameter is all lowercaseYou may assume that the word parameter could contain a wildcard character There are many ways in which to implement this function. We suggest using an object mapping characters to their scores. This function is labeled as TODO #2 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function. 2 [Scrabble letter distributions - Wikipedia](https://en.wikipedia.org/wiki/Scrabble_letter_distributions)  "},{"title":"TODO #3: Possible Words​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-3-possible-words","content":"An important goal the human player has in the game of Scrabble is to find a word that they know that can be constructed from the tiles they have in their rack in the context of the words that have already been played on the board. Although this can be a challenge for the human player (depending on their knowledge of words), it is not so hard for a computer to take a giant corpus of words and given a rack of tiles determine the possible words that can be constructed from those tiles. The next function we want to write is the possibleWords function which is used to find all possible words that can be constructed from the tiles the player has in their rack. This function could be used to check if a word played by a player is an actual word (of course this depends on how extensive our dictionary is). The signature of this function looks like this: function possibleWords(availableTiles)  This function has one parameter: the available tiles the player has. The available tiles are an object mapping letters to their frequencies. That is, the properties are the letters, and the values of those properties are the number of tiles the player has in their rack. Additional specifications for this function include: You may not modify the function argument.You can assume the letters in the availableTiles object are always lowercase. This function is labeled as TODO #3 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function.  "},{"title":"TODO #4: Best Possible Words​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-4-best-possible-words","content":"The next function we want to write is the bestPossibleWords function which is used to find the best possible words that can be constructed from the tiles the player has in their rack. This function could be used to determine the best possible words that the player can construct from their rack. As we will see in later homework, this function is used to give the player a list of words that they can construct from their rack. The signature of this function looks like this: function bestPossibleWords(availableTiles)  Additional specifications for this function include: You may not modify the function argument.You can assume the letters in the availableTiles object are always lowercase. This function is labeled as TODO #4 in the scrabbleUtils.js file provided with the starter code for this homework. You must implement this function.  "},{"title":"TODO #5: README.md​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#todo-5-readmemd","content":"It is always important to update a README.md file in your GitHub repository. This final TODO asks you to provide a brief description in the README.md file of the changes you made to the code that was provided. Briefly describe the implementation of your functions in a paragraph or two of text. Please use complete sentences and proper grammar.  "},{"title":"Tips​","type":1,"pageTitle":"HW2: Scrabble Starter","url":"/docs/homework/scrabble-starter/#tips","content":"Write your code in small increments. This will help you identify mistakes early. The more code you write before you test it makes it more difficult to identify mistakes.You should commit your code to git regularly. This will help you keep track of your progress. You can see how many commits you have made by using git log in the terminal.You should push your code to GitHub regularly. This will allow the course staff to easily see your progress and see your code if you are having problems.Use console.log for debugging purposes. The output of this function will be displayed in the browser console.Use console.assert for testing your code. Write additional tests to the scrabbleUtilsTest.js file. Share your tests with your classmates. "},{"title":"AI Assistants","type":0,"sectionRef":"#","url":"/docs/information/ai-assistants/","content":"AI Assistants As computer science students, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science.","keywords":""},{"title":"GitHub Classroom","type":0,"sectionRef":"#","url":"/docs/information/github-classroom/","content":"GitHub Classroom We will be using GitHub Classroom to distribute and collect assignments. GitHub Classroom is a web-based platform for educators to manage and track student assignments. It integrates with GitHub, the popular code hosting and collaboration platform, to provide a streamlined and efficient workflow for educators and students. For a web programming class, GitHub Classroom is particularly useful because it allows educators to set up and distribute assignments, track student progress, and provide feedback all within one platform. Students can access their assignments and submit their work directly on GitHub, providing an easy-to-use environment for both the students and the educator. With GitHub Classroom, educators can also ensure that each student has a unique repository for their work, which can be used to keep track of changes and version history. This makes it easier to review and provide feedback on student work and helps to avoid potential conflicts or merge conflicts. Additionally, GitHub Classroom provides a convenient and secure way for students to submit their work, and provides a platform for peer review, where students can see the code of their classmates and learn from it. This can foster a collaborative learning environment and encourage students to engage with each other’s work. Overall, GitHub Classroom is a valuable tool for web programming classes because it provides a simple and effective solution for managing student assignments and tracking progress, while also promoting collaboration and encouraging learning through peer review.","keywords":""},{"title":"Office Hours","type":0,"sectionRef":"#","url":"/docs/information/office-hours/","content":"","keywords":""},{"title":"Sunday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#sunday","content":"No office hours offered currently at this time. "},{"title":"Monday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#monday","content":"Ashir Imran (Head UCA): 11 AM - 1 PM, zoomXinzhi Liang (TA):Liam Neal Reilly (UCA): 4 PM - 5 PM, CS207-3Seth Franklin (UCA): 2:35 PM - 3:45 PM, zoom "},{"title":"Tuesday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#tuesday","content":"Tim Richards (INSTRUCTOR): 10 AM - 12 PM, LGRC A351AXinzhi Liang (TA): 11:30 AM - 2:30 PM, LGRT 222Isi Bernoff (UCA): 10 AM - 11 AM, CS207-1Chou Heng Ieong (UCA): 1 PM - 2 PM, zoomAnshul Vemulapalli (UCA): 2 PM - 3 PM, LGRT-222Stanley Araki (UCA): 5:30 PM - 6:30 PM, zoom "},{"title":"Wednesday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#wednesday","content":"Harrison Geissler (TA): 9 AM - 12 PM, CS207Sridhama Prakhya (TA): 2 PM - 5 PM, zoomSeth Franklin (UCA): 2:35 PM - 3:45 PM, zoomChou Heng Ieong (UCA): 11 AM - 12 PM, zoom "},{"title":"Thursday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#thursday","content":"Tim Richards (INSTRUCTOR): 3 PM - 5 PM, LGRC A351ARajasi Desai (Head UCA): 4:30 PM - 6:30 PM, LGRT 223/225Isi Bernoff (UCA): 10 AM - 11 AM, CS207-1Anshul Vemulapalli (UCA): 3 PM - 4 PM, zoomStanley Araki (UCA): 5:30 PM - 6:30 PM, zoom "},{"title":"Friday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#friday","content":"Liam Neal Reilly (UCA): 10 AM - 11 AM, CS207-3 "},{"title":"Saturday​","type":1,"pageTitle":"Office Hours","url":"/docs/information/office-hours/#saturday","content":"No office hours offered currently at this time. "},{"title":"Piazza","type":0,"sectionRef":"#","url":"/docs/information/piazza/","content":"Piazza We will be using Piazza for you to ask questions and receive answers Welcome to the world of Piazza! As you embark in this course, you will be using an exciting tool that will greatly enhance your learning experience: the Piazza discussion forum. Piazza is a powerful and efficient tool that provides a platform for students to ask questions and receive answers in a collaborative and supportive environment. This asynchronous tool allows students to interact with their classmates and instructors at any time, from anywhere, making it a convenient and flexible way to stay connected and engaged with the course material. One of the key advantages of Piazza is that it enables students to get answers to their questions quickly and easily. Whether you have a question about a specific concept or need clarification on a homework assignment, Piazza provides a space where you can ask and receive answers from your classmates and instructors. Additionally, Piazza fosters a collaborative learning environment, where students can learn from each other and share their insights and experiences. Another advantage of Piazza is that it is an asynchronous tool, meaning that students can access it at any time and participate in discussions at their own pace. This allows students to fit their learning into their busy schedules and can be especially beneficial for those who have other commitments outside of class. However, like any tool, Piazza also has its disadvantages. One disadvantage is that students may not receive a prompt response to their questions, especially if they are posted during the weekend when instructors may not be as readily available. Additionally, the platform can be overwhelming, with a large amount of information and discussions taking place at once, making it difficult for students to keep up and find the information they need. Despite these challenges, we believe that Piazza is an incredibly valuable tool for students and we encourage you to make the most of it. We will respond to your questions and participate in discussions as soon as we can during the week, and while we may be less responsive on the weekend, we will do our best to support you and answer your questions in a timely manner. So let's dive in and make the most of this exciting and dynamic platform! Remember, the road to success is paved with questions, and Piazza provides the perfect platform for asking, exploring, and learning. We highly encourage you to also answer questions posted by your fellow students to get the most out of this platform!","keywords":""},{"title":"Schedule","type":0,"sectionRef":"#","url":"/docs/information/schedule/","content":"","keywords":""},{"title":"Lecture Schedule​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#lecture-schedule","content":"Tu 2/7 - L01 Course IntroductionTh 2/9 - L02 JavaScript IntroTu 2/14 - L03 JavaScript Objects, Arrays, FunctionsTh 2/16 - L04 JavaScript ObjectsTu 2/21 - L05 JavaScript ClassesTh 2/23 - L06 Modules, HTML, DOMTu 2/28 - L07 DOM EventsTh 3/2 - L08 Basic CSSTu 3/7 - L09 CSS and DOM SurgeryTh 3/9 - L10 Browser Local StorageTu 3/21 - L11 Networking, HTTPTh 3/23 - L12 Asynchrony, Event ModelTu 3/28 - L13 REST and FetchTh 3/30 - L14 CRUD #1Tu 4/4 - L15 CRUD #2Th 4/6 - L16 RoutingTu 4/11 - L17 ACID and SQLTh 4/13 - L18 Node and SQLTh 4/20 - L19 NoSQLTu 4/25 - L20 AuthenticationTh 4/27 - L21 ProjectTu 5/2 - L22 ProjectTh 5/4 - L23 ProjectTu 5/9 - L24 ProjectTh 5/11 - L25 ProjectTu 5/15 - L26 Project Showcase "},{"title":"Lab Schedule​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#lab-schedule","content":"Fr 2/10 - B01 Git and GitHub BasicsFr 2/17 - B02 Git Commands and Repository CreationFr 2/24 - B03 Advanced Git UsageFr 3/3 - B04 Tagging and JSFr 3/10 - B05 Milestone 2 WorkFr 3/17 - B06 Milestone 2 WorkFr 3/24 - B07 Milestone 2 WorkFr 3/31 - B08 Fetch and AsyncFr 4/7 - B09 RoutingFr 4/14 - B10 Milestone 3 WorkFr 4/21 - B11 Milestone 3 WorkFr 4/28 - B12 Milestone 4 WorkFr 5/5 - B13 Milestone 4 WorkFr 5/12 - B14 Milestone 4 Work "},{"title":"Exercises​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#exercises","content":"All exercise assignments are due the following day by 11:59 unless otherwise specified. Ex1 Letter Frequency (A: 2/9, D: 2/13)Ex2 Letter Histogram (A: 2/14, D: 2/15)Ex3 Decoder Ring (A: 2/16, D: 2/17)Ex4 Decoder Ring Class (A: 2/21, D: 2/22)Ex5 Decoder Web Page (A: 2/23, D: 2/24)Ex6 Interactive Decoder (A: 2/28, D: 3/1)Ex7 2x2 Checkerboard (A: 3/2, D: 3/3)Ex8 8x8 Chessboard (A: 3/7, D: 3/8)Ex9 Persistent Encoder (A: 3/9, D: 3/10)Ex10 Run Server (A: 3/21, D: 3/22)Ex11 REST and Fetch (A: 3/28, D: 3/29)Ex12 CRUD #1 (A: 3/30, D: 3/31)Ex13 CRUD #2 (A: 4/4, D: 4/5)Ex14 Routing (A: 4/6, D: 4/7) "},{"title":"Homework​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#homework","content":"All homework assignments are due by 11:59 unless otherwise specified. Hw1 GitHub Classroom (A: 2/9, D: 2/16)Hw2 Scrabble Starter (A: 2/16, D: 3/7)Hw3 Rack &amp; Render (A: 3/7, D: 3/28)Hw4 Persistence &amp; Hints (A: 3/28, D: 4/13)Hw5 Fetch, Multiplayer, Server (A: 4/13, D: 5/4)Hw6 Fetch, Scoreboard, Deploy (A: 5/4, D: 5/17) "},{"title":"Project​","type":1,"pageTitle":"Schedule","url":"/docs/information/schedule/#project","content":"All project assignments are due by 11:59 unless otherwise specified. Pr1 Join Team (A: 2/16, D: 2/23)Pr2 Idea (A: 2/23, D: 3/7)Pr3 UI Design (A: 3/7, D: 3/30)Pr4 Front-End (A: 3/30, D: 4/25)Pr5 Back-End (A: 4/25, D: 5/25)Pr6 Showcase (A: 4/25, D: 5/17) "},{"title":"Course Staff","type":0,"sectionRef":"#","url":"/docs/information/staff/","content":"","keywords":""},{"title":"Instructor​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#instructor","content":"Tim Richards Tim Richards is a senior teaching faculty member at the Manning College of Information and Computer Sciences, where he teaches a variety of courses and dabbles in research. He is the course administrator for this course and is dedicated to teaching computer science and enjoys sharing his passion with students. "},{"title":"Teaching Assistance​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#teaching-assistance","content":"Sabrina Liang First year master student in CS, interest in data science and data visualization. I enjoy knitting and painting, and recently started keeping plants. (she/her) Harrison Geissler Graduate 1st Year MS/PhD Student in CS, BINDs lab, with interest in RL/Convex Optimization. I love hiking, walking as well as Dungeons &amp; Dragons. Sridhama Prakhya Second-year graduate student interested in ML, NLP, and computational neuroscience. I enjoy music, hiking, reading, soccer, chess, and playing violin. (he/him) "},{"title":"Undergraduate Course Assistants​","type":1,"pageTitle":"Course Staff","url":"/docs/information/staff/#undergraduate-course-assistants","content":"Ashir Imran Senior CS Major, interested in Full Stack dev and AI/ML. For fun I like to play video games (he/him) (Head UCA) Rajasi Desai Senior dual degree in CS &amp; Psych with a Math minor. I love to learn new things for fun and also I dance in various campus events as part of KDC. (she/they) (Head UCA) Isi Bernoff Senior CS transfer, interested in web dev and UI/UX. I enjoy classical music and I started playing the piano during lockdown (she/her) Liam Reilly Senior CS, interested in full-stack development and robotics. My biggest hobby is the card game Magic. (He/him) Anshul Vemulapalli Junior in CS, interested in Backend dev, ML, and Computer Vision. I enjoy speed-running Hitman, and playing drums (he/him) Seth Franklin Senior CS and Linguistics double major, interested in DevOps, cloud computing (AWS), and NLP. I enjoy drawing, reading, running, and listening to music (pop, rap, k-pop, grunge). (he/him) Chou Heng Ieong Senior CS, interested in full stack development. I enjoy playing basketball, working out, hiking, as well as eating. Stanley Araki Senior Computer Science major interested in backend development. I enjoy hanging out with friends, listening to music, and cooking! "},{"title":"Introduction","type":0,"sectionRef":"#","url":"/docs/intro/","content":"","keywords":""},{"title":"Why learn web programming?​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#why-learn-web-programming","content":"Learning web programming is essential for computer scientists, as it provides a wide array of advantages. For one, web programming gives computer scientists the chance to develop applications that can be used across multiple platforms, from desktops and laptops to mobile phones and tablets. This level of versatility is invaluable for modern software development. Moreover, web programming offers the potential for large-scale deployment, meaning that software developed with web technologies can be used by a much larger number of people than would be possible with desktop applications. In addition to its versatility and scalability, web programming also allows computer scientists to create applications with powerful data-driven features. By leveraging APIs, cloud computing, and other technologies, web programmers can create applications that can store and process vast amounts of data quickly and efficiently. These powerful applications are being used today in a variety of ways, from digital marketing and e-commerce platforms to streaming video services and online gaming. Moreover, web programming has opened up new opportunities for computer scientists to work in a global economy. As more businesses move their operations online, web developers have the unique opportunity to develop solutions that can be used by customers all over the world. Through web programming, computer scientists can create products that can be accessed from anywhere with an internet connection, allowing businesses to reach new customers in an ever-expanding market. Finally, web programming has enabled computer scientists to create applications that have had a profound effect on the world. Take for example the success of Google Maps, which revolutionized the way we navigate around cities and countries. Similarly, Twitter has completely transformed the way we communicate with each other. These examples show just how powerful and influential web applications can be when designed and developed with the right expertise. In summary, learning web programming is essential for computer scientists due to its versatility, scalability, data-driven capabilities, global reach, and ability to create solutions that can change the world. By mastering web programming skills, computer scientists can position themselves to capitalize on the lucrative opportunities of the modern technology landscape. "},{"title":"A (brief) history of the web​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#a-brief-history-of-the-web","content":"The World Wide Web, the system of interlinked hypertext documents that made the internet so accessible and usable, was invented by British computer scientist Tim Berners-Lee in 1989 while working at CERN. With the help of Robert Cailliau, they developed the HyperText Transfer Protocol (HTTP) and the HyperText Markup Language (HTML). This was a revolutionary step in the history of the internet, as it allowed websites to be easily linked together. The first web browser, Mosaic, was released in 1993 and was quickly followed by Netscape Navigator in 1994. These early browsers revolutionized the way people interacted with the internet, as it was now much easier to navigate and find information. The release of Internet Explorer by Microsoft in 1995 sparked what is known as the “browser wars”. While Microsoft managed to gain a large market share, the open-source Mozilla project (which would later become Firefox) was developed in 1998. In 1995, JavaScript was created by Brendan Eich while working at Netscape. JavaScript was originally intended to allow web developers to add interactivity and dynamism to web pages. However, it has since evolved into a powerful programming language that can be used to build full-scale applications. The introduction of the &quot;XML HTTP Request (XHR) object&quot; in 1999 marked the beginning of web applications. This technology allowed websites to send and receive data from the server without having to refresh the page. This allowed web developers to create dynamic applications which could interact with users. In the same year, Cascading Style Sheets (CSS) were introduced to help web developers create beautiful applications that ran in a browser. CSS revolutionized web design by allowing developers to easily create complex designs with a few lines of code. Since then, the web has seen a tremendous amount of innovation and growth, transforming from simple websites to powerful web applications. It's an exciting time to be a web developer, as the possibilities are endless. "},{"title":"The evolution of web applications​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-evolution-of-web-applications","content":"The power of the JavaScript programming language has been a driving force behind the evolution of web applications. JavaScript has enabled developers to create interactive websites, and over time its functionality has become increasingly more powerful and versatile. Here are 5 reasons why the JavaScript language has been so successful: JavaScript is lightweight and can be quickly loaded into webpages. JavaScript supports dynamic data structures, making it easier to create complex applications. It can be easily integrated with HTML, allowing developers to control how webpages look and feel. It is an interpreted language, meaning that there’s no need to compile code before running it. It supports object-oriented programming principles, making it easier to manage larger projects. The JavaScript language has come a long way since its inception in 1995. Its early versions had limited capabilities but as newer versions were released, more features were added. Some of the most important versions include ES6 (2015) which introduced classes and modules, ES7 (2016) which added the ability to use async functions, and ES8 (2017) which added support for async iterators and generators. Recent additions to the language include WebAssembly which allows for faster execution of code, new browser APIs for working with media and text, and several new features for creating secure and efficient web applications. Node.js has been an important development in the evolution of JavaScript, allowing developers to use JavaScript on the server side as well. This opened up the possibility of writing entire applications in JavaScript, from front-end to back-end. Node.js also made it possible to create highly interactive single-page applications with minimal server-side processing requirements. More recently, TypeScript has emerged as a strongly-typed version of JavaScript, making it easier to debug and maintain large code bases. With TypeScript, developers can work with types just like they do in other languages such as Java or C#, giving them more control over their code. This makes it easier for teams to collaborate on projects and for newcomers to pick up existing code bases quickly. "},{"title":"The technology behind the web and its power​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-technology-behind-the-web-and-its-power","content":"At the core of web applications lies the amazing technology that drives it: HTML, CSS, JavaScript, and other web technologies. All of these components play a vital role in creating a web application that is fast, secure, and user-friendly. Let’s explore each of these technologies and why they are so important for every computer scientist to understand. HTML, or Hypertext Markup Language, is the foundation for every web page. It provides structure for the content on a page and allows for different types of media to be embedded. HTML elements are then styled with Cascading Style Sheets (CSS), which adds colors, fonts, and layout to the page. JavaScript adds dynamic effects to the page, allowing for interactive experiences and complex logic. Each of these technologies is essential in creating a web application. HTML provides the basic structure for the web page and allows for multimedia content to be included. CSS styles the page and makes it visually appealing. JavaScript makes the page dynamic and interactive by providing interactive effects such as animations and real-time interactions. Every computer scientist needs to be well-versed in these technologies because they are used in many applications today. As a computer scientist, understanding these technologies will give you a better understanding of how to create applications that are fast, secure, and user-friendly. Web Assembly is going to revolutionize the way we build web applications. It is a low-level programming language that can be compiled into a binary format and run inside a web browser. This technology will allow developers to write code in any language they choose and have it be immediately executable in the browser, meaning faster loading times and better performance. Web Assembly is an exciting new technology that has the potential to drastically change the landscape of the web. It provides an efficient way to create powerful applications that can run on any device and with any operating system. Through a basic knowledge of these technologies, computer scientists can understand how web applications work, create better solutions to problems, and devise more efficient systems. "},{"title":"The future of web applications​","type":1,"pageTitle":"Introduction","url":"/docs/intro/#the-future-of-web-applications","content":"The future of the web is an exciting one, full of possibilities and opportunities. In the next 50 years, we are sure to see the continued evolution of the web, with developers creating innovative and revolutionary applications that will shape our lives. From interactive websites that can interact with users in real time to powerful software programs that run on the cloud, the possibilities are endless. Augmented reality and virtual reality are also likely to play a big role in the future of web applications. With AR and VR, users can be immersed in 3D environments with realistic visuals, sounds, and interactions. This technology can be used for gaming, training, or even medical purposes. In addition, this technology has the potential to revolutionize the way we interact with the internet and how it can improve our daily lives. Finally, AI-driven web applications could become more prominent over the next few decades. Already, AI-driven tools are being used to automate complex tasks and speed up workflows. We can expect this trend to continue in the future, with AI-driven web applications becoming smarter and more sophisticated over time. Additionally, AI-powered bots could help people find information quickly, saving them time and effort when searching online. "},{"title":"Labs","type":0,"sectionRef":"#","url":"/docs/labs/","content":"Labs The Lab section is led by teaching assistants (TAs) for this course. There will also be undergraduate course assistants (UCA) assigned to your lab section. You are expected to attend every lab section. Labs are used to begin lab exercises in groups as well as to work on the end of semester project. Missing a lab section does not excuse you from any activities that occur during that time. Do not ask to make up any missed work during lab section time.","keywords":""},{"title":"Syllabus","type":0,"sectionRef":"#","url":"/docs/information/syllabus/","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#description","content":"The web is arguably today's most important application platform. Web browsers run on practically every device, and even many phone applications are in fact web applications under the covers. This course will cover a broad range of client-side web technologies, including HTTP itself, HTML5, CSS, and JavaScript; it will additionally cover key concepts for the server side of web applications, including key value stores and SQL servers. This course will also cover key concepts and technologies including AJAX, JavaScript libraries (e.g., jQuery), and web security. This course is hands-on and heavily project-based; students will construct a substantial dynamic web application based on the concepts, technologies, and techniques presented during lectures and in readings. This course satisfies the IE Requirement. "},{"title":"Prerequisites​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#prerequisites","content":"COMPSCI 220 (or 230) with a grade of C or better, or INFO 248 and COMPSCI 186/187, with a grade of C or better in each. This course assumes a good understanding of programming at the 187 (data structure implementation) or 186 level (using data structures), basic command line usage, understanding of version control systems (e.g., git), and object-oriented programming concepts and techniques are helpful. Previous JavaScript background, while not required, is also helpful. We also assume a level of maturity for success in working in a team-based environment. "},{"title":"Statement of Inclusivity​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#statement-of-inclusivity","content":"The staff for this course support the UMass commitment to diversity, and welcome individuals regardless of age, background, citizenship, disability, sex, education, ethnicity, family status, gender, gender identity, geographical origin, language, military experience, political views, race, religion, sexual orientation, socioeconomic status, and work experience. In this course, each voice in the classroom has something of value to contribute. Please take care to respect the different experiences, beliefs and values expressed by students and staff involved in this course. "},{"title":"Required Text​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#required-text","content":"No required text. All material will be provided through lectures notes, slides, examples, code, and any other resources deemed as relevant to the topics covered in this course. "},{"title":"Course Development Environment​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-development-environment","content":"Given that this is a programming intensive course, it is important to highlight the development environment! Generally, most of what we cover in this course is available on all the typical operating systems. However, the team project allows you to explore additional environments that may have specific OS requirements. You are welcome to use those additional libraries/tools; however, you will not receive direct support for what you use. It is your responsibility for the installation, setup, and use of those additional components. You are welcome to use any editor, IDE, or tools to explore this material. We strongly recommend that you use Visual Studio Code. "},{"title":"Other Material​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#other-material","content":"It is assumed that you have a computer to use for assignments in this course. You should make sure to commit your work frequently to GitHub. We will not accept excuses for missing or accidental deletion of work. You may only use GitHub for storing your work on individual assignments if you are using a private repository. Use of public repositories to store assignment solutions on GitHub is considered cheating and will result in a failure for this course. You will be required to store and share your team project work on a public repo! "},{"title":"Learning Outcomes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#learning-outcomes","content":"After this course, students will be able to: Apply HTML to structure content rendered in a browserApply CSS to style content in a browser to enhance the usability of an applicationApply the JavaScript programming language to solve problems in a web environmentApply the fundamental architecture of a front-end web applicationApply the fundamental architecture of a back-end web applicationApply the connection between front-end and back-endApply a RESTful web applicationApply the fundamental construction of a modern and complete web application "},{"title":"Integrative Experience​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#integrative-experience","content":"This course satisfies the Integrative Experience (IE) requirement. The upper-division integrative experience provides a structured context for students to reflect on their own learning and explore the connections between the broad exposure provided by General Education and the more focused exposure of their major. You can read additional details on the integrative experience website. The IE requirement is fulfilled by this course through the application of extensive team-based learning. Furthermore, this course embraces the IE through a substantial team project that is entirely student driven and explicitly integrates the material covered in this course with the experiences, learning, and knowledge attained by every unique person enrolled in this course. "},{"title":"Course Format​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-format","content":""},{"title":"Hybrid​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#hybrid","content":"This course uses a hybrid model. There are two different sections of the course that meet on Tuesdays and Thursdays respectively. You are expected to attend in person the section that you are enrolled in. During the section that you are not enrolled in, you are expected to attend on Zoom. If you have a conflict with the time of the other section, you are then expected to watch the recording of the class on your own time and complete any activity that was introduced during class. If you attend on Zoom, you will be able to ask questions by posting to the messaging system. "},{"title":"Lectures​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lectures","content":"Lectures will be led by the professor and provide a high-level overview of the course material. The presentation format will include a variety of slides, written notes, programming examples, activities, etc. All material will be available through the course learning management system site or website. You are expected to attend every lecture for your section and arrive promptly so you do not disturb others. You may use electronic devices during class, however, its use must pertain to the activity at hand. If your use of an electronic device is distracting to yourself or others, you will be asked to turn the device off. What happens if I can’t attend a lecture in person? Although we want you to attend the lecture for your section in person, we understand that sometimes that isn’t always possible. For that reason, we provide flexible options that allow you to participate. Remote Synchronous: attend the lecture remotely on Zoom and ask questions through the messaging system.Asynchronous: watch the recorded lecture at a time that is convenient for you. "},{"title":"Lab​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lab","content":"The Lab section is led by teaching assistants (TAs) for this course. There will also be undergraduate course assistants (UCA) assigned to your lab section. You are expected to attend every lab section. Labs are used to begin lab exercises in groups as well as to work on the end of semester project. Missing a lab section does not excuse you from any activities that occur during that time. Do not ask to make up any missed work during lab section time. What happens if I can’t attend a lab in person? Although we want you to attend labs in person, we understand that sometimes that isn’t always possible. For that reason, we provide flexible options that allow you to participate. Remote Synchronous: attend the lab remotely on Zoom and ask questions through the messaging system.Asynchronous: labs will not be recorded, however, you must still complete the lab activity by the assigned due date. "},{"title":"Rules for Success​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#rules-for-success","content":""},{"title":"Student Responsibilities​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#student-responsibilities","content":"If you follow these rules, your odds of learning the material and achieving a good grade in this course will improve greatly. Read the assignment documentation early and carefully.Do your work on time, submit your work on time, and make sure you submitted the correct work.Communicate with other students in the course, the professor, and other course staff for help.Be honest in the work you do and the submissions you make.Communicate with me and others in the course with respect and understanding.Do not ask to submit assignments after the due date. "},{"title":"Instructor Responsibilities​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#instructor-responsibilities","content":"You can expect from us: Timely release of course assignments.Timely release of scores achieved on course assignments.To respond to questions in the discussion forums in a reasonable amount of time during the week and normal working hours.Be respectful of your ideas and value the diversity you bring to the virtual classroom.Be open to dialogue that challenges me.Be present during my stated office hours.Ensure the proper running of the course. "},{"title":"Grading Policy​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#grading-policy","content":"The anticipated breakdown of course grades is as follows; this is subject to change. In-Class Exercises (15%)Labs (15%)Homework (40%)Team Project (30%) "},{"title":"Grading Notes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#grading-notes","content":"The numerical cutoff for final course letter grade assignment will be made after all grading is completed. As a rough guide, expect to require at least a 93 to get an A, a 90 to get an A-, an 87 to get a B+, an 83 to get a B, an 80 to get a B-, etc.Individual projects/assignments/labs will not be scaled (curved).The instructor may or may not choose to scale final grades.Final grades are assigned based on the overall weighted average as defined by the grading policy. Grades will be rounded up. For example, if you achieve an 89.93 then the final letter grade will be (for example) an A-, not a B+. "},{"title":"Ungrading​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#ungrading","content":"Ungrading, also known as assessment without grades, is a radical form of assessment that shifts the focus from evaluating students' performance based on numerical scores to fostering their learning and growth. In an ungraded environment, teachers provide regular and ongoing feedback to students on their progress and learning, rather than assigning a final grade at the end of a course or assignment. This approach empowers students to take ownership of their learning by encouraging them to set their own goals, reflect on their progress, and engage in self-assessment. By removing the pressure of grades, students are able to take risks, be creative, and collaborate with their peers, leading to deeper and more meaningful learning experiences. Additionally, ungrading can help to reduce the stress and anxiety that students often experience in a traditional graded environment and foster a positive learning culture in the classroom. This course uses ungrading. In short, the responsibility of the grade you achieve in this course is up to you. You will submit grades that you believed you achieved on each and every assignment in this course including the final project and final grade. We will choose at random some number of submissions where we will provide feedback, but no grade. You will be asked to submit an extensive self-reflection at two points during the semester on your own learning and evidence that supports that learning. We will evaluate these submissions and how they relate to your chosen grade to determine accuracy. At the end of the course, you will submit a grade that you believe accurately reflects your learning in this course. The instructor reserves the right to make modifications to your grade based on your submissions and reflections. This form of grading provides grade freedom and ownership in your own learning. If used wisely, you have the opportunity to learn without grade stress and experience a learning environment that is free and open. We trust that you will use this freedom to explore the course material and beyond in ways in which you may not have been able to otherwise. &quot;The path to true learning lies not in grades but in the journey of self-discovery. Let go of the pressure, and the knowledge will come.&quot; - Yoda "},{"title":"Assignments​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#assignments","content":""},{"title":"Exercises​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#exercises","content":"Most classes will provide time to begin exercises that will apply your understanding of the material being discussed in lecture. You are required to complete participation exercises by the stated deadline. If you are unable to attend class you are still expected to submit the activity by the deadline. They are due on the day of the next class by midnight. You are encouraged to extend these exercises with additional features to explore the material, however, know that some exercises build on previous ones. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Labs​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#labs","content":"Labs serve multiple purposes in this course. You will often complete short exercises during lab that you will be due by the stated deadline. If you are unable to attend lab you are still expected to submit the activity by the deadline. You have until midnight on the day of the lab to submit. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Homework​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#homework","content":"Homework are programming assignments that reinforce material taught in class. These are longer assignments and take more time than in-class exercises. They require you to apply your understanding of the material to a programming challenge that emphasizes what you have learned during lecture and any assigned material. You can collaborate with other students, but you must submit your own work. You will submit what you believe the grade you achieved is on the assignment, reflect on what you learned, and answer other associated questions about the assignment. Your work may be subject to peer review. "},{"title":"Team Project​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#team-project","content":"The team project encompasses the last third of the semester - approximately 4 weeks. You will be required to work in a team of 3-4 students to design and implement a web application using the three important components of web applications including HTML, CSS, and JavaScript. The design and implementation of the application is entirely up to you, but it must solve a real-world problem, be connected to work you have done in other areas (general education), connect to your discipline (e.g., CS, Informatics) and be relatively unique as compared to other existing applications (within reason). You are allowed to use any technology as long as it relates to the material covered in class and adheres to the project requirements. Your work is subject to peer review. "},{"title":"Assignment Submission​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#assignment-submission","content":"Assignments will be submitted electronically. You are responsible for submitting your assignments by the assigned due date. The due dates for assignments will be clearly indicated on the schedule and it is your responsibility to update your own calendar so you are aware of due dates. "},{"title":"Late and Early Submissions​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#late-and-early-submissions","content":""},{"title":"Lateness General Guidelines​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#lateness-general-guidelines","content":"Lateness is defined as any assignment that is outside of the stated due date requirements. We allow assignments to be submitted three days “late” after the posted due date. However, penalties might be applied (see Submission Currency below). After the three days we will not accept a submission from any assessment component. It is your responsibility for maintaining your own schedule and being prompt with your submissions. We expect that you become familiar with the course submission software and verify that your submission has been properly uploaded. We will not accept late submissions due to lack of checking on this. We assume: You are an adult and have the ability to check and verify your work has been received properly.You are capable of using GitHub, DropBox, Google Drive, or some other backup software to ensure that your work is not lost in the event of a computer failure.You have a back-up plan in place in the event that your computer fails or your internet connection is unavailable. Make sure you have a plan B and C if your computer crashes or your internet is unavailable. This is your responsibility.To ensure that you submit projects on time you should begin them early and not wait until the last minute to submit. You will be able to submit multiple times so submit early and often to ensure you have something in before the deadline. If there are extenuating circumstances beyond your control that prevent you from completing an assignment by the posted deadline you must contact the instructor immediately using the appropriate communication channel (see Communication below). "},{"title":"Submission Currency 💵​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#submission-currency-","content":"To add some flexibility to submission deadlines, we will be using a form of “currency” in this course to earn “tokens” for submissions that are made before the day an assignment is due. If you submit an assignment before the deadline you will receive a token. You may then use a token to buy a late day allowing you to submit an assignment past the deadline. If you submit an assignment late and you run out of tokens, you may borrow tokens putting you in the negative. To get out of the hole you will need to submit subsequent assignments early to earn tokens back and pay your debt! If you complete the course with leftover tokens it will be applied to your final grade and increase your overall grade for the course. If you complete the course with negative tokens it will be applied to your final grade and decrease your overall grade for the course. Here are the rules: You start the course with 3 tokens.If you submit an assignment any day before or on the day an assignment is due you will receive a token.If you submit an assignment any day after the day an assignment is due you will pay a token for each day past the due date.You may only use tokens up to three days past the deadline of an assignment. After three days past the deadline you are no longer able to use tokens or submit an assignment late. It will be marked as missing with a 0.You can only earn a maximum of 5 tokens.To use your tokens you must use our token request form available on the course LMS. Examples: At the start of the semester Mia submits the first assignment two days early and receives a token increasing their purse to 4.In the middle of the semester Pat is late by 2 days. This uses 2 tokens from their purse. This is not bad since Pat hasn’t missed an assignment. Pat has 1 token remaining.At the end of the semester Jorge has 3 tokens and their grade is an 88. The tokens are applied and their final grade is a 91. Jorge is happy. 😃At the end of the semester Tanya has -2 tokens and their grade is a 90. The tokens are applied and their final grade is an 88. Tanya is unhappy 😔, but understands. You are ultimately responsible for maintaining your token count. We will do our best to calculate the number of tokens you have for each assignment. However, it may take a few days to do so. Tokens may not be used or gained on in-class exercises or labs. "},{"title":"Final Grades​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#final-grades","content":"To evaluate your understanding of the course content, we will use scores achieved on each of the above assessment components. Your final grade will convey what you know from the course and how well you know it. Missing assignments can have a dramatic impact on your final grade so it is important that you are attentive to submission deadlines and avoid any missing work. The typical breakdown of percentages and final grades for this course are A (93-100), A- (90-92), B+ (87-89), B (83-86), B- (80-82), C+ (77-79), C (73-76), C- (70-72), D+ (67-69), D (60-66), F (0-59). This grading scheme may be adjusted based on the overall performance of students in the course. "},{"title":"Communication​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#communication","content":"Email: Email should not be used. Please post privately to Instructors on Piazza (see below). In the unlikely event that you are unable to post to Piazza, please send an email to the instructor teaching your course section. Piazza: We will be using Piazza for all other communication. This online discussion forum should be your first choice for asking questions. You should check the discussion forum before asking your question to see if the same question has already been posted. We will not answer questions that have already been answered in the discussion forum. Think before you post. We expect you to do a reasonable amount of thinking to try to solve your problems before posting for help. Make sure you are articulate and clear with your post (i.e., think before you post). You should post questions related to assignments early rather than wait until the last minute. Questions that are posted very near an assignment deadline may not be answered. Course staff are expected to answer questions Monday through Friday. Do not expect prompt answers on Saturday, Sunday, and scheduled holidays and breaks. Please post with respect and kindness. Posts that are disrespectful, crude, inappropriate, or mean will not be tolerated and will be reported and result in your immediate removal from the course and a failure for the course. Lecture: You are welcome to ask questions during and after class. The course will reserve 15 minutes after class to answer any questions. After that 15 minutes you will need to remember your question and ask it on Piazza. "},{"title":"Course Support​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-support","content":""},{"title":"Office Hours​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#office-hours","content":"Office hours are times when we provide real-time access to the instructor, TAs, and UCAs. You do not need an appointment to attend office hours, attendance is optional, and all questions you have about the course are welcome. These sessions will be held at several different times during the week. Office hours will be posted on the course website. "},{"title":"Accommodations​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#accommodations","content":"The University of Massachusetts Amherst is committed to providing an equal educational opportunity for all students. If you have a documented physical, psychological, or learning disability on file with Disability Services (DS), you may be eligible for reasonable academic accommodations to help you succeed in this course. If you have a documented disability that requires an accommodation, please notify me as soon as possible so that we may make appropriate arrangements. For further information, please visit Disability Services. "},{"title":"Title IX​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#title-ix","content":"If you have been the victim of sexual violence, gender discrimination, or sexual harassment, the university can provide you with a variety of support resources and accommodations. UMass is committed to providing these resources with minimal impact and costs to survivors on a case-by-case basis. Resources are available to survivors with or without them filing a complaint. No upfront costs are charged to any currently enrolled students for University Health Services or the Center for Counseling and Psychological Health, and no fees exist for services in the Dean of Students Office, the Center for Women and Community, Student Legal Services, or by live-in residential staff. "},{"title":"Attendance and Participation​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#attendance-and-participation","content":"You are expected to attend class and lab regularly, read any assigned readings before class, and participate in class discussions and activities. Your participation will be evaluated in a variety of ways. This includes any in class activities or activities that may be given during class or lab sections. You are responsible for maintaining your own schedule and ensuring that you are present during these activities and/or complete them in a timely manner. It is generally not possible to make up missed work. "},{"title":"Course Incompletes​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#course-incompletes","content":"Students who are unable to complete course requirements within the allotted time because of severe medical or personal problems only may request a grade of Incomplete from the instructor of the course. Incomplete grades are warranted only if a student is passing the course at the time of the request and if the course requirements can be completed by the end of the following semester. Furthermore, an incomplete will be granted if at least 75% of the work has been completed for the course. Otherwise, the recommended course of action is to withdraw and retake the course in the future. Please see the Academic Regulations Section IV Grading System and Credit Guidelines for further details. Note: an incomplete means you are on your own to complete the material agreed upon by the instructor of this course. Do not expect additional help or one-on-one teaching of the material past the course completion date. It is your responsibility to complete the remaining material. "},{"title":"Collaboration Policy​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#collaboration-policy","content":"Group Work Encouragement: Students are encouraged to work in groups to facilitate learning, knowledge sharing, and skill development. Group work will be a regular part of the course and students are expected to actively participate in it. Group work is allowed on all assignments in this course.Individual Submissions: Although group work is encouraged, each student is required to submit their own individual work based on the group collaboration. This is to ensure that each student is held accountable for their own learning and understanding of the course material.Group Responsibilities: All group members are expected to contribute equally to the group discussions and work and should be prepared to share their knowledge and skills with their peers. Group members should also be respectful of each other's opinions and work styles.Conflict Resolution: In the event of a conflict within the group, students are encouraged to communicate and resolve the issue amongst themselves. If the conflict cannot be resolved, the instructor will mediate.Credit Allocation: Credit for group work will be allocated based on each student's individual contribution to the assignment. Students will assess their own contributions to submitted assignments and determine their grades accordingly.Cheating: Cheating, including plagiarism, is not tolerated and will result in a failing grade for the assignment. All work submitted must be original and should accurately reflect the student's own understanding of the course material.Communication: Regular communication between group members is essential for successful collaboration. Students are encouraged to use online tools, such as email or group chat platforms, to stay in touch and communicate effectively. By following this collaboration policy, students will be able to work collectively while still being held accountable for their individual learning and understanding of the course material. "},{"title":"AI Assistants​","type":1,"pageTitle":"Syllabus","url":"/docs/information/syllabus/#ai-assistants","content":"As computer science students, it's important to understand the judicious use of AI technologies like ChatGPT in your homework assignments and projects. While these tools can be a valuable resource in your learning journey, it's essential to use them in a responsible and ethical manner. In this course, we allow the use of AI technologies like ChatGPT as a means of learning and improving your understanding of the subject matter. However, it's important to remember that the work you submit must be original and created by you, the student. Submitting work that is not your own constitutes academic dishonesty and is a violation of the code of conduct in this course. The use of AI technologies like ChatGPT should be seen as a tool for assistance, not a substitute for your own efforts. While it's tempting to rely solely on these tools to complete your assignments and projects, doing so will not help you develop the critical thinking and problem-solving skills that are essential for success in computer science. In conclusion, while we encourage the use of AI technologies like ChatGPT in your learning journey, it's important to use them responsibly and ethically. The work you submit must be original and created by you, and the use of these tools should be seen as a means of assistance, not a substitute for your own efforts. By doing so, you'll be able to make the most of these tools and develop the skills and knowledge you need to succeed in computer science. "},{"title":"B08 Fetch and Async","type":0,"sectionRef":"#","url":"/docs/labs/fetch-async/","content":"B08 Fetch and Async Coming soon...","keywords":""},{"title":"B03 Advanced Git","type":0,"sectionRef":"#","url":"/docs/labs/git-advanced/","content":"B03 Advanced Git Coming soon...","keywords":""},{"title":"B01 Git and GitHub Basics","type":0,"sectionRef":"#","url":"/docs/labs/git-basics/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"B01 Git and GitHub Basics","url":"/docs/labs/git-basics/#overview","content":"In this lab we will go over the basics of how to use Git and GitHub for version control. Version control will ensure you have a solid working history for any code you write and will allow you to easily revert your work if something goes wrong (It happens to all of us!). Git becomes especially important when working on teams of software engineers like you will for the team project later in the semester. Organizing and merging together the work of multiple people is not easy and knowing how to properly use Git will make your lives a lot easier. "},{"title":"Slides​","type":1,"pageTitle":"B01 Git and GitHub Basics","url":"/docs/labs/git-basics/#slides","content":"Download Powerpoint "},{"title":"B05 Milestone 2 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-2-work-1/","content":"B05 Milestone 2 Work Coming soon...","keywords":""},{"title":"B06 Milestone 2 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-2-work-2/","content":"B06 Milestone 2 Work Coming soon...","keywords":""},{"title":"B07 Milestone 2 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-2-work-3/","content":"B07 Milestone 2 Work Coming soon...","keywords":""},{"title":"B02 Git Commands","type":0,"sectionRef":"#","url":"/docs/labs/git-commands/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#overview","content":"In this lab, we will continue learning about and practicing Git and GitHub.  "},{"title":"A Recap​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#a-recap","content":"Git is a tool for managing the development of your software. It helps manage versions of code and allows you to rollback, and helps teams collaborate. For an oversimplified comparison, it's like Google Drive for code. Git works on the concept of local and remote repositories, and GitHub is a website that hosts remote repositories.  "},{"title":"Git Basics​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#git-basics","content":"The most basic concepts in git are those of commits. A commit is a bundle of changes to the codebase. Each commit has a unique hash to identify itHas a time and date stampHas a user associated with it A commit keeps track of who changed what and when they did it. It's very useful to help fix things when something goes wrong. For example: someone adds a commit and all the code breaks, you can easily narrow it down to specific files and line numbers that were changed in that commit. "},{"title":"Git Commands​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#git-commands","content":"git init - Initialize a new local repository git clone &lt;repo_url&gt; - Copies an existing remote repository into a new folder on your machine git add . - Adds all files that were modified to be staged for commiting. You can do git add &lt;file&gt; for specific files. git commit -m &quot;your message&quot; - Commit the added changes with a short message describing the changes. If you don't use -m, Git will open up Vim to allow adding a longer message. git push origin &lt;branch&gt; - Pushes the changes to a particular branch. By default, git push should push to the main/master branch on the remote, but you can specifiy other branches as well. git pull - Grabs changes from the remote repo to your local one. git branch - Lists out all the existing branches on the local repo. git checkout -b &lt;branch_name&gt; - Creates and switches to a new branch. Remove the -b if you only want to switch to an existing branch. git switch &lt;branch_name&gt; - Another way to switch branches. git merge &lt;branch_name&gt; - Merges working branch to main/master (do this on main!). If you can, do this through GitHub so you can view all potential merge conflicts first. "},{"title":"Linking local git projects to GitHub​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#linking-local-git-projects-to-github","content":"Create an empty repository on GitHub. Unless the repo will contain sensitive material, keep this public Initialize a new local git repository with git init Go to the local copy of the repo that you want to store in GitHub Use the following command to set the upload source origin, or remote as the GitHub repo you just created git remote add origin &lt;repo link&gt; Check that your remote is set correctly git remote -v Commit and push your changes.  "},{"title":"GitHub lab activity​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#github-lab-activity","content":"Please accept the following GitHub assigment and submit your activity. GitHub_Classroom_Link "},{"title":"TODO​","type":1,"pageTitle":"B02 Git Commands","url":"/docs/labs/git-commands/#todo","content":"Create a local copy of the lab activityOpen the repository locally on VS CodeCreate a branch my-branch to edit README.mdSwitch to my-branchEdit the contents of README.md in my-branchAdd and commit changes to my-branchSwitch back to mainMerge contents of my-branch into main/masterPush changes to origin mainThat's it! "},{"title":"B10 Milestone 3 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-3-work-1/","content":"B10 Milestone 3 Work Coming soon...","keywords":""},{"title":"B11 Milestone 3 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-3-work-2/","content":"B11 Milestone 3 Work Coming soon...","keywords":""},{"title":"B12 Milestone 4 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-4-work-1/","content":"B12 Milestone 4 Work Coming soon...","keywords":""},{"title":"B13 Milestone 4 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-4-work-2/","content":"B13 Milestone 4 Work Coming soon...","keywords":""},{"title":"B14 Milestone 4 Work","type":0,"sectionRef":"#","url":"/docs/labs/ms-4-work-3/","content":"B14 Milestone 4 Work Coming soon...","keywords":""},{"title":"B09 Routing","type":0,"sectionRef":"#","url":"/docs/labs/routing/","content":"B09 Routing Coming soon...","keywords":""},{"title":"Lectures","type":0,"sectionRef":"#","url":"/docs/lectures/","content":"Lectures Lectures will be led by the professor and provide a high-level overview of the course material. The presentation format will include a variety of slides, written notes, programming examples, activities, etc. All material will be available through the course learning management system site or website. You are expected to attend every lecture for your section and arrive promptly so you do not disturb others. You may use electronic devices during class, however, its use must pertain to the activity at hand. If your use of an electronic device is distracting to yourself or others, you will be asked to turn the device off.","keywords":""},{"title":"B04 Tagging and JS","type":0,"sectionRef":"#","url":"/docs/labs/tagging-js/","content":"B04 Tagging and JS Coming soon...","keywords":""},{"title":"L17 ACID and SQL","type":0,"sectionRef":"#","url":"/docs/lectures/acid-sql/","content":"L17 ACID and SQL Coming soon...","keywords":""},{"title":"L12 Asynchrony, Event Model","type":0,"sectionRef":"#","url":"/docs/lectures/async-event-model/","content":"L12 Asynchrony, Event Model Coming soon...","keywords":""},{"title":"L08 Basic CSS","type":0,"sectionRef":"#","url":"/docs/lectures/basic-css/","content":"L08 Basic CSS Coming soon...","keywords":""},{"title":"L20 Authentication","type":0,"sectionRef":"#","url":"/docs/lectures/auth/","content":"L20 Authentication Coming soon...","keywords":""},{"title":"L01 Course Introduction","type":0,"sectionRef":"#","url":"/docs/lectures/course-intro/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#overview","content":"Welcome to COMPSCI 326 Web Programming! We are excited to have you as a part of this journey, where we'll be exploring the fundamentals of web programming and building real-world projects. In this lecture, we'll be covering the course logistics, including how lectures will be conducted and the exercises you'll be starting in class. We will discuss homework assignments that build on the understanding you gain from the exercises, allowing you to apply your knowledge and strengthen your skills. In addition to individual assignments, you'll also have the opportunity to work on a team project. This project will give you the chance to explore web programming in a real-world setting and work with your classmates to build something truly impactful. I'm confident that, by the end of this course, you'll have a solid understanding of web programming and the skills you need to build exciting and innovative projects. So let's get started! "},{"title":"Slides​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#slides","content":"Download Powerpoint "},{"title":"Other Material​","type":1,"pageTitle":"L01 Course Introduction","url":"/docs/lectures/course-intro/#other-material","content":"SyllabusScheduleMoodle "},{"title":"L14 CRUD #1","type":0,"sectionRef":"#","url":"/docs/lectures/crud-1/","content":"L14 CRUD #1 Coming soon...","keywords":""},{"title":"L05 Classes","type":0,"sectionRef":"#","url":"/docs/lectures/classes/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#overview","content":"JavaScript classes are a way of defining object-oriented programming (OOP) constructs in JavaScript. Classes provide a way to define blueprints for objects, which encapsulate data and functionality into a single entity. "},{"title":"Syntax​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#syntax","content":"The syntax for creating a class in JavaScript is as follows: class ClassName { constructor() { // constructor code } method1() { // method1 code } method2() { // method2 code } }  The class keyword is used to declare a new class, followed by the name of the class (ClassName in this case). The class body is contained within curly braces, which includes a constructor and any number of methods. The constructor method is a special method that is called when an instance of the class is created. It is used to set up any initial state that the object needs. "},{"title":"Examples​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#examples","content":"Here are some examples of JavaScript classes: "},{"title":"Example 1: Animal​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#example-1-animal","content":"class Animal { constructor(name, age) { this.name = name; this.age = age; } speak() { console.log('Hello, my name is ' + this.name); } getAge() { return this.age; } } const cat = new Animal('Fluffy', 2); cat.speak(); // output: &quot;Hello, my name is Fluffy&quot; console.log(cat.getAge()); // output: 2  In this example, we define a class Animal that has a constructor that takes a name and age argument. The class also has two methods, speak and getAge. We then create an instance of the Animal class called cat and call its speak and getAge methods. "},{"title":"Example 2: Person​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#example-2-person","content":"class Person { constructor(name, age) { this.name = name; this.age = age; } sayHello() { console.log('Hello, my name is ' + this.name); } getAge() { return this.age; } } class Employee extends Person { constructor(name, age, salary) { super(name, age); this.salary = salary; } getSalary() { return this.salary; } } const alice = new Employee('Alice', 30, 50000); alice.sayHello(); // output: &quot;Hello, my name is Alice&quot; console.log(alice.getAge()); // output: 30 console.log(alice.getSalary()); // output: 50000  In this example, we define a class Person that has a constructor that takes a name and age argument, and two methods, sayHello and getAge. We then define a subclass Employee that extends the Person class and has a constructor that takes a name, age, and salary argument, and a getSalary method. We create an instance of the Employee class called alice and call its sayHello, getAge, and getSalary methods. "},{"title":"Slides​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#slides","content":"Download Powerpoint "},{"title":"Code Examples​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#code-examples","content":"examples/05-objects You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#mdn-web-docs","content":"strict modeJavaScript ModulesJavaScript ClassesDynamic ImportsJavaScript Modules with Import/Export Syntax (ES6) (video)JavaScript Classes #1: The Basics (video) "},{"title":"VSCode​","type":1,"pageTitle":"L05 Classes","url":"/docs/lectures/classes/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L15 CRUD #2","type":0,"sectionRef":"#","url":"/docs/lectures/crud-2/","content":"L15 CRUD #2 Coming soon...","keywords":""},{"title":"L07 DOM Events","type":0,"sectionRef":"#","url":"/docs/lectures/dom-events/","content":"L07 DOM Events Coming soon...","keywords":""},{"title":"L09 CSS and DOM Surgery","type":0,"sectionRef":"#","url":"/docs/lectures/css-dom-surgery/","content":"L09 CSS and DOM Surgery Coming soon...","keywords":""},{"title":"L10 Browser Local Storage","type":0,"sectionRef":"#","url":"/docs/lectures/local-storage/","content":"L10 Browser Local Storage Coming soon...","keywords":""},{"title":"L02 JavaScript Intro","type":0,"sectionRef":"#","url":"/docs/lectures/js-intro/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#overview","content":"JavaScript is one of the most popular scripting languages in the world today. It was first released in 1995 by Netscape and Sun Microsystems as a way to make web pages more interactive and dynamic. It has been a fundamental component of web browsers since then and continues to be an integral part of today’s websites and applications. One of the main strengths of JavaScript is its ease of use, making it a popular choice for both professional and hobbyist web developers alike. It has also seen major improvements in its syntax, and with new versions of JavaScript such as ES6 and ES7, the language is now more robust and full featured than ever before. In addition to its core scripting capabilities, it is also well-known for its ability to manipulate the DOM (Document Object Model) which allows developers to update the appearance of websites and applications in the browser. On the downside, JavaScript has been notorious for the presence of errors and the difficulty in debugging. It can be particularly challenging to debug in older browsers as they can produce obscure error messages, making debugging a headache. Despite this, JavaScript has had an impressive and impressive history. Its origins can be traced back to the Scheme programming language, a subset of the Lisp programming language, and its subsequent rise to prominence as the language of choice for scripting browsers was driven by its versatility and relatively easy learning curve. In conclusion, JavaScript is an incredibly versatile and powerful language. While it is prone to the occasional errors and can be difficult to debug, its features and flexibility make it an attractive choice for web developers and application developers alike. "},{"title":"Slides​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#slides","content":"Download Powerpoint "},{"title":"Code​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#code","content":"Example Code "},{"title":"Resources​","type":1,"pageTitle":"L02 JavaScript Intro","url":"/docs/lectures/js-intro/#resources","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L06 Modules, HTML, DOM","type":0,"sectionRef":"#","url":"/docs/lectures/modules-html-dom/","content":"L06 Modules, HTML, DOM Coming soon...","keywords":""},{"title":"L11 Networking, HTTP","type":0,"sectionRef":"#","url":"/docs/lectures/network-http/","content":"L11 Networking, HTTP Coming soon...","keywords":""},{"title":"L19 NoSQL","type":0,"sectionRef":"#","url":"/docs/lectures/no-sql/","content":"L19 NoSQL Coming soon...","keywords":""},{"title":"L18 Node and SQL","type":0,"sectionRef":"#","url":"/docs/lectures/node-sql/","content":"L18 Node and SQL Coming soon...","keywords":""},{"title":"L04 Objects","type":0,"sectionRef":"#","url":"/docs/lectures/objects/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#overview","content":"In JavaScript, an object is a data structure that allows you to store and organize data in a more complex way than primitive data types like numbers and strings. Objects can contain properties, which are key-value pairs, as well as methods, which are functions that can be called on the object. "},{"title":"Creating an Object​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#creating-an-object","content":"There are a few different ways to create an object in JavaScript. One common method is to use object literal notation: const myObj = { property1: 'value1', property2: 'value2', method1: function() { console.log('This is a method.'); } };  This creates an object with two properties (property1 andproperty2) and one method (method1). "},{"title":"Accessing Object Properties​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#accessing-object-properties","content":"You can access object properties using dot notation or bracket notation: console.log(myObj.property1); // Output: 'value1' console.log(myObj['property2']); // Output: 'value2'  "},{"title":"Memory Diagram of an Object​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#memory-diagram-of-an-object","content":"To better understand how objects work in JavaScript, let's take a look at a memory diagram of an object: In this diagram, the Object is represented by a circle, and its properties (property1, property2) and method (method1) are represented by rectables connected to the Object circle. Here is a more in depth diagram: In this diagram, A JavaScript array named Array is represented by a rectangle, and each of the three objects (Object1, Object2, andObject3) are represented by larger rectangles. The objects each contain two properties (property1 and property2) represented by rectangles. The values of the properties are also shown in the circles. "},{"title":"Conclusion​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#conclusion","content":"JavaScript objects are a powerful tool for organizing and manipulating data in your code. By understanding how objects work and how to create and access their properties and methods, you can take your "},{"title":"Slides​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#slides","content":"Download Powerpoint "},{"title":"Code Examples​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#code-examples","content":"examples/04-objects You can view all of the examples by cloning the examples repository. "},{"title":"Resources​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#resources","content":""},{"title":"MDN Web Docs​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#mdn-web-docs","content":"JavaScriptJavaScript data types and data structuresObjectFunctionsthis keywordJavaScript OBJECTS in ONE Video "},{"title":"VSCode​","type":1,"pageTitle":"L04 Objects","url":"/docs/lectures/objects/#vscode","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L21 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-1/","content":"L21 Project Work Coming soon...","keywords":""},{"title":"L03 Objects, Arrays, Functions","type":0,"sectionRef":"#","url":"/docs/lectures/obj-arrays-funcs/","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#overview","content":"JavaScript is a powerful and versatile programming language that is widely used for web development. One of its core strengths lies in its ability to handle data structures like arrays, objects, and functions. In this post, we'll take a closer look at each of these data structures and how they can be used in JavaScript. "},{"title":"Arrays:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#arrays","content":"Arrays in JavaScript are ordered collections of values. They can contain any type of data, including numbers, strings, objects, and even other arrays. Arrays are declared using square brackets, and each value is separated by a comma. For example: var myArray = [1, 2, 3, 'Hello', [4, 5]];  Arrays in JavaScript have a number of useful built-in methods that allow you to manipulate the data within them. For example, you can use the .push() method to add an element to the end of an array, or the .pop() method to remove the last element. You can also use the .sort() method to sort the elements in an array, and the .slice() method to extract a portion of the array. "},{"title":"Objects:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#objects","content":"Objects in JavaScript are unordered collections of key-value pairs. They are used to represent complex data structures and can contain any type of data, including arrays and other objects. Objects are declared using curly braces, and each key-value pair is separated by a comma. For example: var myObject = { name: 'John', age: 30, hobbies: ['reading', 'hiking'] };  Objects in JavaScript are very versatile, and you can use them to represent anything from simple data structures to complex data models. They also have a number of useful built-in methods, such as .hasOwnProperty(), which allows you to check if an object has a specific property, and .keys(), which returns an array of the object's keys. "},{"title":"Functions:​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#functions","content":"Functions in JavaScript are blocks of code that can be executed when they are called. They can take any number of arguments, and can return a value if desired. Functions are declared using the function keyword, followed by the function name, and a set of parentheses that define the arguments. For example: function addNumbers(a, b) { return a + b; }  Functions are a crucial part of JavaScript, and they allow you to write modular and reusable code. They can also be used to create complex algorithms and data structures, and can be used in conjunction with arrays and objects to achieve powerful results. In conclusion, arrays, objects, and functions are the building blocks of JavaScript and are used to represent and manipulate data in a variety of ways. Understanding how to use these data structures effectively is an important part of being a JavaScript developer, and mastering them can open up a world of possibilities for your projects. "},{"title":"Slides​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#slides","content":"Download Powerpoint "},{"title":"Resources​","type":1,"pageTitle":"L03 Objects, Arrays, Functions","url":"/docs/lectures/obj-arrays-funcs/#resources","content":"VSCode Live Server, an extension we will end up using quite a bit for several weeks. "},{"title":"L22 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-2/","content":"L22 Project Work Coming soon...","keywords":""},{"title":"L23 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-3/","content":"L23 Project Work Coming soon...","keywords":""},{"title":"L24 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-4/","content":"L24 Project Work Coming soon...","keywords":""},{"title":"L25 Project Work","type":0,"sectionRef":"#","url":"/docs/lectures/project-5/","content":"L25 Project Work Coming soon...","keywords":""},{"title":"L16 Routing","type":0,"sectionRef":"#","url":"/docs/lectures/routing/","content":"L16 Routing Coming soon...","keywords":""},{"title":"L13 REST and Fetch","type":0,"sectionRef":"#","url":"/docs/lectures/rest-fetch/","content":"L13 REST and Fetch Coming soon...","keywords":""},{"title":"Project","type":0,"sectionRef":"#","url":"/docs/project/","content":"Project The team project starts on the first day of class with forming teams. You will be working in a team of 4 students to design and implement a web application using the three important components of web applications including HTML, CSS, and JavaScript. The design and implementation of the application is entirely up to you, but it must solve a real-world problem, be connected to work you have done in other areas (general education), connect to your discipline (e.g., CS, Informatics) and be relatively unique as compared to other existing applications (within reason). You are allowed to use any technology as long as it relates to the material covered in class and adheres to the project requirements. Your work is subject to peer review.","keywords":""},{"title":"L26 Project Showcase","type":0,"sectionRef":"#","url":"/docs/lectures/showcase/","content":"L26 Project Showcase Coming soon...","keywords":""},{"title":"Pr4: Front-End","type":0,"sectionRef":"#","url":"/docs/project/front-end/","content":"Pr4: Front-End Coming soon...","keywords":""},{"title":"Pr5: Back-End","type":0,"sectionRef":"#","url":"/docs/project/back-end/","content":"Pr5: Back-End Coming soon...","keywords":""},{"title":"Pr2: Creative Idea","type":0,"sectionRef":"#","url":"/docs/project/Idea/","content":"Pr2: Creative Idea Coming soon...","keywords":""},{"title":"Pr1: Join a Team","type":0,"sectionRef":"#","url":"/docs/project/join-team/","content":"Pr1: Join a Team Coming soon...","keywords":""},{"title":"Pr6: Showcase","type":0,"sectionRef":"#","url":"/docs/project/showcase/","content":"Pr6: Showcase Coming soon...","keywords":""},{"title":"Pr3: UI Design","type":0,"sectionRef":"#","url":"/docs/project/ui-design/","content":"Pr3: UI Design Coming soon...","keywords":""}]